% \iffalse meta-comment
%/GitFileInfo=tudscr-manual.dtx
%
%  TUD-Script -- Corporate Design of Technische Universität Dresden
% ----------------------------------------------------------------------------
%
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2012-2022
%
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, either version 1.3c of this license or
%  any later version. The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
%  and version 1.3c or later is part of all distributions of
%  LaTeX version 2008-05-04 or later.
%
%  This work has the LPPL maintenance status "maintained".
%
%  The current maintainer and author of this work is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
% \fi
%
% \iffalse ins:batch + dtx:driver
%<*ins>
\ifx\documentclass\undefined
  \input docstrip.tex
  \ifToplevel{\batchinput{tudscr.ins}}
\else
  \let\endbatchfile\relax
\fi
\endbatchfile
%</ins>
%<*dtx>
\ProvidesFile{tudscr-manual.dtx}[2022/09/03]
\RequirePackage{tudscr-gitinfo}
\documentclass[english,ngerman,xindy]{tudscrdoc}
\iftutex
  \usepackage{fontspec}
\else
  \usepackage[T1]{fontenc}
  \usepackage[ngerman=ngerman-x-latest]{hyphsubst}
\fi
\usepackage{tudscrfonts}
\usepackage{babel}
\usepackage[babel]{microtype}

\GitHubBase{\TUDScriptRepository}
\begin{document}
  \author{Falk Hanisch\TUDScriptContactTitle}
  \maketitle
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</dtx>
% \fi
%
%
%
% \section{Anwenderdokumentation und Leitfäden zu \TUDScript}
%
% \changes{v2.02}{2014/12/17}{Erstellung der \app{texindy}-Stildatei während
%   der Kompilierung}^^A
% \changes{v2.02}{2014/11/18}{\pkg{tudscrmanual}: Index für Tutorials}^^A
% \changes{v2.05}{2015/08/04}{Geteilte Deklarationen für Klasse und Paket}^^A
%
% Es werden die Klasse \cls{tudscrmanual} (auf Basis von \cls{tudscrreprt}) für 
% die Anwenderdokumentation sowie das Paket \pkg{tudscrmanual} für das Setzen
% von einigen Anwenderleitfäden bzw. Tutorials erzeugt. Da es zwischen der
% Klasse und dem Paket es eine große Menge an Überschneidungen gibt, basieren
% diese auf der gleichen Quelldatei.
% \ToDo{guards überarbeiten, korrelierenden Quelltext zusammenhalten}[v2.07]
%    \begin{macrocode}
%<*package&identify>
\ProvidesPackage{tudscrmanual}[%
%!TUD@Version
  package (tutorials)%
]
\TUD@Class@Check{tudscrmanual}
%</package&identify>
%<*configuration&identify>
\ProvidesFile{tudscrmanual.cfg}[%
%!TUD@Version
  configuration (default entities for indexes and links)%
]
\@ifundefined{DefaultEntity}{%
  \GenericError{}{Wrong usage of `tudscrmanual.cfg'}{%
    This file can only be used with `tudscrmanual' but\MessageBreak%
    found `\@currname.\@currext' instead%
  }{}%
  \expandafter\endinput
}{}
%</configuration&identify>
%    \end{macrocode}
%
% \iffalse
%<*!configuration>
%<*body>
% \fi
%
% \subsection{Kleine Helferlein}
% \subsubsection{Verarbeitung von Versionsangaben}
%
% Mit diesen Befehlen können Versionsangaben zu \TUDScript verarbeitet und 
% validiert werden.
%
% \begin{macro}{\tud@v@to@number}
% \changes{v2.07}{2021/06/16}{neu}^^A
% Das zweite obligatorischen Argument wird expandiert und eine Versionsangabe 
% im gebräuchlichen \LaTeX"~Format (|[v]?\d.\d\d?[a-z]?\s.*|) in einen
% Integer-Wert gewandelt. Dieser wird in das Makro im ersten obligatorischen
% Argument zurückgeschrieben, welches anschließend für Vergleiche verwendet
% werden kann. Die Sternversion schreibt die normalisierte Versionsangabe in
% das Makro im zweiten Argument zurück.
%    \begin{macrocode}
\NewDocumentCommand\tud@v@to@number{s m m}{%
  \begingroup%
    \edef\tud@res@a{%
      \unexpanded{\tud@v@get\tud@res@a}{#3}%
    }%
    \tud@res@a%
    \def\tud@res@c##1 ##2~##3\@nil{%
      \IfArgIsEmpty{##2}{%
        \let\tud@res@b\@empty%
      }{%
        \def\tud@res@a{##1}%
        \def\tud@res@b{\space##2}%
      }%
    }%
    \expandafter\tud@res@c\tud@res@a~ ~\@nil%
    \protected@expandtwoargs\in@{.}{\tud@res@a}%
    \ifin@%
      \def\tud@res@c##1.##2##3##4\@nil{%
        \let\tud@res@a\relax%
        \Ifnumber{##1}{%
          \Ifnumber{##2}{%
            \Ifnumber{##3}{%
              \edef\tud@res@a{##1.##2##3##4}%
            }{%
              \edef\tud@res@a{##1.\two@digits{##2}##3##4}%
            }%
          }{}%
        }{}%
      }%
      \expandafter\tud@res@c\tud@res@a\@empty\@nil%
      \ifx\tud@res@a\relax\else%
        \def\tud@res@c##1.##2##3##4##5\@nil{%
          \tud@if@strblank{##5}{%
            \edef\tud@res@a{v##1.##2##3##4\tud@res@b}%
            \edef\tud@res@b{##1.##2##3##4}%
          }{%
            \let\tud@res@a\relax%
          }%
        }%
        \expandafter\tud@res@c\tud@res@a\@empty\@nil%
      \fi%
    \else%
      \let\tud@res@a\relax%
    \fi%
    \ifx\tud@res@a\relax%
      \ClassWarning{tudscrmanual}{Wrong formatted version number}%
    \else%
      \def\tud@res@c##1.##2##3##4\@nil{%
        ##1##2##3%
        \IfArgIsEmpty{##4}{000}{\ifnum\number`##4<100 0\fi\number`##4}%
      }%
      \edef\tud@res@b{\expandafter\tud@res@c\tud@res@b\@nil}%
    \fi%
    \edef\tud@res@c{%
      \endgroup%
      \ifx\tud@res@a\relax%
        \unexpanded{\let#2\relax}%
      \else%
        \unexpanded{\def#2}{\tud@res@b}%
        \IfBooleanT{#1}{\unexpanded{\def#3}{\tud@res@a}}%
      \fi%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \tud@v@to@number
%
% \begin{macro}{\tud@v@validate}
% \changes{v2.07}{2021/06/16}{neu}^^A
% Normalisiert die Versionsangabe im übergebenen Makro und erzeugt einen 
% Fehler, falls diese nicht ausgewertet werden kann.
%    \begin{macrocode}
\newcommand*\tud@v@validate[1]{%
  \begingroup%
    \protected@edef\tud@res@a{#1}%
    \trim@spaces@in\tud@res@a%
    \tud@v@to@number*\tud@res@b{\tud@res@a}%
    \edef\tud@res@a{%
      \endgroup%
      \ifx\tud@res@b\relax%
        \unexpanded{%
          \ClassError{tudscrmanual}{Invalid version number}{%
            The given version number `#1' is invalid as it\MessageBreak%
            should be `[v][0-9]+.[0-9]+[a-z]*' (regex).%
          }%
          \let#1\relax%
        }%
      \else%
        \unexpanded{\def#1}{\tud@res@a}%
      \fi%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@v@validate
%
% \subsubsection{Abschneiden von Werten}
%
% \begin{macro}{\tud@truncate@value}
% \changes{v2.07}{2021/06/15}{neu}^^A
% Der expandierte Inhalt des zweiten Argumentes \meta{key}|=|\meta{value}
% wird an |=| getrennt und \meta{key} in das Makro des ersten Argumentes 
% zurück geschrieben.
%    \begin{macrocode}
\newcommand*\tud@truncate@value[2]{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \def\tud@res@b##1=##2\@nil{%
      \endgroup%
      \def#1{##1}%
    }%
  \expandafter\tud@res@b\tud@res@a=\@nil%
}
%    \end{macrocode}
% \end{macro}^^A \tud@truncate@value
%
%
% \subsection{Patches für den Kernel}
%
% Sowohl für die Ausgaberoutine als auch für das Inhaltsverzeichnis sind im 
% weiteren Verlauf Anpassungen notwendig, weshalb hierfür entsprechende Hooks 
% bereitgestellt werden.
% Spezielles für Inhaltsverzeichnis und Fußzeile
% \ToDo{Das muss dokumentiert werden!}[v2.07]
% \begin{macro}{\tud@outputpage@hook}
% \changes{v2.07}{2021/06/15}{neu}^^A
% \begin{macro}{\tud@outputpage@special}
% \changes{v2.07}{2021/06/15}{neu}^^A
% \begin{macro}{\@outputpage}
% Die Patches für die Ausgaberoutine.
%    \begin{macrocode}
\newcommand*\tud@outputpage@hook{}
\let\tud@outputpage@hook\relax
\newcommand*\tud@outputpage@special[1]{\appto\tud@outputpage@hook{#1}}
\@onlypreamble\tud@outputpage@special
\patchcmd\@outputpage{%
  \let\index\@gobble\let\glossary\@gobble%
}{%
  \let\index\@gobble\let\glossary\@gobble%
  \tud@outputpage@hook%
}{}{\tud@patch@wrn{@outputpage}}
%    \end{macrocode}
% \end{macro}^^A \@outputpage
% \end{macro}^^A \tud@outputpage@special
% \end{macro}^^A \tud@outputpage@hook
% \begin{macro}{\tud@addtocontents@hook}
% \changes{v2.07}{2021/06/15}{neu}^^A
% \begin{macro}{\tud@addtocontents@special}
% \changes{v2.07}{2021/06/15}{neu}^^A
% \begin{macro}{\addtocontents}
% Die Patches für die Inhaltsverzeichnis und Outline-Einträge. Letztere werden 
% nur geändert, falls die Sternversion genutzt wurde.
%    \begin{macrocode}
\newcommand*\tud@addtocontents@hook{}
\let\tud@addtocontents@hook\relax
\NewDocumentCommand\tud@addtocontents@special{s m}{%
  \appto\tud@addtocontents@hook{#2}%
  \IfBooleanT{#1}{%
    \AfterPackage*{hyperref}{\pdfstringdefDisableCommands{#2}}%
    \AfterPackage*{nameref}{\GetTitleStringDisableCommands{#2}}%
  }%
}
\@onlypreamble\tud@addtocontents@special
\patchcmd\addtocontents{%
  \let\index\@gobble\let\glossary\@gobble%
}{%
  \let\index\@gobble\let\glossary\@gobble%
  \tud@addtocontents@hook%
}{}{\tud@patch@wrn{addtocontents}}
%    \end{macrocode}
% \end{macro}^^A \addtocontents
% \end{macro}^^A \tud@addtocontents@special
% \end{macro}^^A \tud@addtocontents@hook
%
%
%
% \subsection{Notwendige Pakete, Einstellungen und abgeleitete Befehle}
%
% Mit dem Paket \pkg{morewrites} lassen sich Probleme mit zu wenig verfügbaren 
% Streams für das Schreiben externer Datein beheben. Hintergrund ist die
% Verwendung des Paketes \pkg{glossaries} in einem der Tutorials, welches eine
% Vielzahl solcher Streams benötigt.
% \ToDo{noch notwendig?}[v2.07]
%    \begin{macrocode}
%<*package>
\RequirePackage{morewrites}
%</package>
%    \end{macrocode}
%
% \subsubsection{Makro- und Microtypografie}
% Für den zweispaltigen Satz im Index.
%    \begin{macrocode}
\RequirePackage{multicol}
%    \end{macrocode}
% Vergrößerung des Durchschusses.
%    \begin{macrocode}
\RequirePackage{setspace}
\setstretch{1.1}
%    \end{macrocode}
%
% \iffalse
%</body>
% \fi
%
% Zitate mit Beachtung der Absatzeinstellungen.
%    \begin{macrocode}
%<option>\PassOptionsToPackage{vskip=\smallskipamount}{quoting}
%<body>\RequirePackage{quoting}
%    \end{macrocode}
%
% \iffalse
%<*body>
% \fi
%
% Automatisierte Datumsformatierung.
%    \begin{macrocode}
\RequirePackage{isodate}
%    \end{macrocode}
% Mit dem Paket \pkg{ragged2e} wird~-- falls benötigt~-- die Silbentrennung im 
% Flattersatz aktiviert. 
%    \begin{macrocode}
\RequirePackage{ragged2e}
%    \end{macrocode}
% Die Fußnoten werden nicht mit jedem Kapitel zurückgesetzt\dots
%    \begin{macrocode}
\@removefromreset{footnote}{chapter}
%    \end{macrocode}
% \dots und im Flattersatz ausgegeben.
%    \begin{macrocode}
\renewcommand*\raggedfootnote{\tud@RaggedRight}%
%    \end{macrocode}
% Unterdrücken von Absatzeinzügen nach bestimmten Umgebungen.
%    \begin{macrocode}
\RequirePackage{noindentafter}
%    \end{macrocode}
% Das Paket \pkg{ellipsis} sorgt für korrekte Auslassungpunkte.
%    \begin{macrocode}
\AtEndPreamble{%
  \RequirePackage{ellipsis}
  \let\ellipsispunctuation\relax%
}
%    \end{macrocode}
%
%
%
% \subsubsection{Tabellen, Listen und Auflistungen}
%
% Mit Hilfe von \pkg{tabularx} können Tabellen bestimmter Breite und
% automatisch berechneten Spaltenbreiten gesetzt werden.
%    \begin{macrocode}
\RequirePackage{tabularx}
%    \end{macrocode}
% Das Paket wird für die Erstellung von Tabellen verwendet.
%    \begin{macrocode}
\RequirePackage{booktabs}
%    \end{macrocode}
% \begin{macro}{\dossvlist}
% \changes{v2.05}{2015/11/17}{neu}^^A
% \begin{macro}{\forssvlist}
% \changes{v2.05}{2015/11/17}{neu}^^A
% Makros aus \pkg{etoolbox} für das Verarbeiten von semikolongetrennten Listen.
%    \begin{macrocode}
\DeclareListParser{\dossvlist}{;}
\DeclareListParser*{\forssvlist}{;}
%    \end{macrocode}
% \end{macro}^^A \forssvlist
% \end{macro}^^A \dossvlist
% Das Paket \pkg{enumitem} erlaubt das Beeinflussen der Standardlisten und die 
% Ableitung neuer Listen aus diesen. Mit \cs{setlist\{noitemsep\}} werden die 
% zusätzlichen Zwischenräume innerhalb der Listen beseitigt. Weiterhin wird 
% linksbündiger Flattersatz für die Standardlisten aktiviert.
%    \begin{macrocode}
\RequirePackage{enumitem}
\setlist{%
  before*={\endgraf\tud@RaggedRight},%
  partopsep=0pt,noitemsep%
}
%    \end{macrocode}
% \begin{macro}{\tud@list@create}
% \changes{v2.07}{2021/06/09}{neu}^^A
% Dieses Makro dient dem Erstellen zusätzlicher Listenumgebungen mit 
% vordefinierten Einstellungen.
%    \begin{macrocode}
\newcommand*\tud@list@create[4][]{%
  \newlist{#2}{#3}{#4}%
  \setlist[{#2}]{%
    font=\normalfont,%
    labelindent=.75em,labelwidth=\dimexpr\linewidth-.75em\relax,labelsep=0pt,%
    topsep=\smallskipamount,parsep=\parskip,listparindent=\parindent,%
    #1%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@list@create
%
%
%
% \subsubsection{Grafiken \& Co.}
%
% \ToDo{welche Pakete sind für Klasse oder Paket zwingend notwendig?}[v2.06]
%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}
% Einbinden von ganzseitigen PDF"~Dokumenten als Beispiel im Handbuch.
%    \begin{macrocode}
\RequirePackage{pdfpages}
%    \end{macrocode}
%
%
% \subsubsection{Formatierung von Gleitobjekten}
%
%    \begin{macrocode}
\RequirePackage{caption}
\RequirePackage{floatrow}
\DeclareCaptionSubType[alph]{figure}
\DeclareCaptionSubType[alph]{table}
\captionsetup{font=sf,labelfont=bf,labelsep=space}
\captionsetup{singlelinecheck=off,format=hang,justification=raggedright}
\captionsetup[subfloat]{labelformat=brace,list=off}
\KOMAoption{captions}{tableheading,figuresignature}
\floatsetup[table]{style=plaintop}
%    \end{macrocode}
%
%
% \subsubsection{Kompilieren externer Quelldateien}
%
% \ToDo{shell-Kram raus, Tutorials/Examples über \app{make} erstellen}[v2.07]
% Das Paket \pkg{filemod} wird genutzt, um externer Dateien nur zu kompilieren,
% wenn dies aufgrund einer Änderung auch notwendig ist.
% \ToDo{\pkg{filemod} raus, \cs{pdf@filemoddate} direkt verwenden}[v2.06]
%    \begin{macrocode}
\RequirePackage{filemod}
%    \end{macrocode}
% Um \cs{ShellEscape} sowohl für Windows als auch für unixoide Betriebssysteme 
% nutzen zu können, wird das Paket \pkg{ifplatform} geladen.
%    \begin{macrocode}
\RequirePackage{ifplatform}
%    \end{macrocode}
% \begin{macro}{\tud@shellescape@wrn}
% \changes{v2.02}{2014/10/14}{neu}^^A
% Dieses Makro wird verwendet, wenn eine gesuchte Datei nicht gefunden wurde, 
% weil das Dokument noch nicht mit dem Parameter \file{-{}-shell-escape} 
% kompiliert wurde.
%    \begin{macrocode}
\newcommand*\tud@shellescape@wrn[1]{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrmanual}%
%</package>
  {%
    File `#1' is missing!\MessageBreak%
    You have to recompile this document with\MessageBreak%
    activated shell escape option%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@shellescape@wrn
% \begin{macro}{\tud@latex@ext}
% \changes{v2.06}{2019/06/21}{neu}^^A
% Für das verschachtelte Aufrufen von \app{pdflatex} bzw. \app{lualatex}.
%    \begin{macrocode}
\newcommand*\tud@latex@ext{pdflatex\space}
\iftutex
  \ifxetex
    \renewcommand*\tud@latex@ext{xelatex\space}
  \else
    \renewcommand*\tud@latex@ext{lualatex\space}
  \fi
\fi
\appto\tud@latex@ext{-synctex=1\space}
%    \end{macrocode}
% \end{macro}^^A \tud@latex@ext
%
%
%
% \subsubsection{Einbinden von Quelltexten}
%
% Sowohl im Handbuch als auch in den Tutorials werden Quelltextauszüge für das 
% bessere Verständnis des Anwenders angegeben. Um diese darzustellen wird das 
% Paket \pkg{listings} verwendet.
%    \begin{macrocode}
\RequirePackage{listings}
\lstdefinestyle{tudscr}{%
  basicstyle=\ttfamily\ifundef\setstretch{}{\setstretch{1}},%
  keywordstyle=,%
  columns=fullflexible,keepspaces,%
  aboveskip=\smallskipamount,%
  belowskip=\smallskipamount,%
  language=[LaTeX]TeX,%
  texcl,%
}
%    \end{macrocode}
%
% \begin{environment}{Code}
% Folgend werden Befehle und Umgebungen für die Darstellung von Quelltexten im 
% Handbuch definiert. Mit dieser Umgebung können kurze Quelltextbeispiele 
% ausgegeben werden. Sicherlich sinnvoll ist, die \env{Code}-Umgebung innerhalb
% von \env{Example} oder \env{quoting} zu verwenden, um den Quelltext etwas
% abzuheben.
%    \begin{macrocode}
\lstnewenvironment{Code}[1][]{\lstset{style=tudscr,#1}}{}
\NoIndentAfterEnv{Code}
%    \end{macrocode}
% Innerhalb der Umgebung \env{Code} wird \cs{@currentHref} unerwünschter Weise
% geändert. Um dies zu vermeiden, wird dieser Befehl gesichert und anschließend
% zurückgesetzt.
%    \begin{macrocode}
\BeforeBeginEnvironment{Code}{\global\let\tud@currentHref\@currentHref}
\AfterEndEnvironment{Code}{\global\let\@currentHref\tud@currentHref}
%    \end{macrocode}
% \end{environment}^^A Code
%
% \iffalse
%</body>
% \fi
%
% \subsubsection{Querverweise und Anpassungen für das Paket \pkg{hyperref}}
%
% Verbesserte Referenzierungen auf Seiten.
%    \begin{macrocode}
%<option>\PassOptionsToPackage{nospace}{varioref}
%<body>\RequirePackage{varioref}
%    \end{macrocode}
%
% \iffalse
%<*body>
% \fi
%
% \begin{macro}{\fullref}
% Ein Makro zur vollständigen Referenzierungen inklusive der relevanten Seite.
%    \begin{macrocode}
\renewrobustcmd*\fullref[1]{\hyperref[{#1}]{\autoref*{#1}\space\vpageref{#1}}}
%    \end{macrocode}
% \end{macro}^^A \fullref
% Um ungewünschten vertikalen Leerraum vor und nach Überschriften zu vermeiden, 
% werden die Befehle \cs{label} und \cs{index} innerhalb des obligatorischen 
% Argumentes von Gliederungsbefehlen genutzt (\GitHubRepo(latex3/latex2e)<307>).
% Damit diese nicht im durch \cs{newlabel} erzeugten Label auftauchen, muss 
% durch \pkg{nameref} explizit \cs{GetTitleStringExpand} verwendet werden.
%    \begin{macrocode}
\RequirePackage{nameref}
\AfterPackage*{nameref}{%
  \patchcmd\NR@gettitle{%
    \GetTitleString%
  }{%
    \GetTitleStringExpand%
  }{}{\tud@patch@wrn{NR@gettitle}}%
}
%    \end{macrocode}
%
% Es folgen einige Befehle, die an das Paket \pkg{hyperref} gekoppelt sind. 
% Sobald das Paket geladen wurde, werden die Makros mit der jeweiligen
% Funktionalität definiert.
% \begin{macro}{\tud@currentHref}
% Einige Befehle und Umgebungen von Drittpaketen ändern bei deren Aufruf die 
% Definition von \cs{currentHref}, was bei Querverweisen gegebenenfalls zu 
% falschen Einträgen führt. Hierfür wird \cs{tud@currentHref} definiert, um die 
% jeweils aktuelle Definition von \cs{currentHref} zu sichern und nach den 
% fraglichen Befehlen und Umgebungen zurückzusetzen.
%    \begin{macrocode}
\newcommand*\tud@currentHref{}
%    \end{macrocode}
% \end{macro}^^A \tud@currentHref
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
%    \end{macrocode}
% \begin{macro}{\autorefname}
% \begin{macro}{\auto@refname}
% \begin{macro}{\auto@@refname}
% Der Befehl \cs{autorefname} dient dazu, den Verweistyp beziehungsweise den 
% Bezeichner des aktuellen~-- oder optional eines speziellen~-- Labels ohne die 
% dazugehörige Nummerierung zu erhalten. Das zugrunde liegende Funktionsprinzip 
% wurde bei \hrfn{http://tex.stackexchange.com/q/33776}{LaTeX Stack Exchange} 
% vorgestellt und hier übernommen.
%    \begin{macrocode}
  \newcommand*\autorefname[1][current]{%
    \tud@if@strequal{#1}{current}{%
      \expandafter\HyPsd@@autorefname\@currentHref\@nil%
    }{%
      \auto@refname\HyPsd@@autorefname{#1}%
    }%
    \unskip\xspace%
  }%
  \newcommand*\auto@refname[2]{%
    \ifcsundef{r@#2}{%
      ??%
    }{%
      \expandafter\expandafter\expandafter\auto@@refname%
          \csname r@#2\endcsname{}{}{}{}\@nil#1\@nil%
    }%
  }%
  \newcommand*\auto@@refname{}%
  \def\auto@@refname#1#2#3#4#5\@nil#6\@nil{#6#4.\@nil}%
%    \end{macrocode}
% \end{macro}^^A \auto@@refname
% \end{macro}^^A \auto@refname
% \end{macro}^^A \autorefname
% Die Bezeichner für die Abschnittsebenen werden umbenannt.
%    \begin{macrocode}
  \begingroup%
    \def\do#1{%
      \tud@if@language@loaded{#1}{%
        \renewcaptionname{#1}{\subsectionautorefname}{Abschnitt}%
        \renewcaptionname{#1}{\subsubsectionautorefname}{Abschnitt}%
        \renewcaptionname{#1}{\subparagraphautorefname}{Absatz}%
      }{}%
    }%
    \expandafter\docsvlist\expandafter{\tud@localization@@german}%
  \endgroup%
}
%    \end{macrocode}
% \begin{macro}{\autoref}
% \begin{macro}{\partautorefname}
% \begin{macro}{\chapterautorefname}
% \begin{macro}{\sectionautorefname}
% \begin{macro}{\subsectionautorefname}
% \begin{macro}{\subsubsectionautorefname}
% \begin{macro}{\paragraphautorefname}
% \begin{macro}{\subparagraphautorefname}
% \begin{macro}{\appendixautorefname}
% \begin{macro}{\figureautorefname}
% \begin{macro}{\tableautorefname}
% \begin{macro}{\pageautorefname}
% Sollte das Paket \pkg{hyperref} nicht geladen werden, wird eine Rückfallebene 
% definiert, wodurch die lokalen Bezeichner der Gliederungsebenen etc. dennoch 
% verwendet werden können.
%    \begin{macrocode}
\TUD@UnwindPackage{hyperref}{%
  \providerobustcmd*\autoref{??\xspace\kernel@ifstar{\ref}{\ref}}%
  \providerobustcmd*\autorefname[1][]{??\xspace}%
  \tud@localization@german{\partautorefname}{Teil}%
  \tud@localization@german{\chapterautorefname}{Kapitel}%
  \tud@localization@german{\sectionautorefname}{Abschnitt}%
  \tud@localization@german{\subsectionautorefname}{Abschnitt}%
  \tud@localization@german{\subsubsectionautorefname}{Abschnitt}%
  \tud@localization@german{\paragraphautorefname}{Absatz}%
  \tud@localization@german{\subparagraphautorefname}{Absatz}%
  \tud@localization@german{\appendixautorefname}{Anhang}%
  \tud@localization@german{\figureautorefname}{Abbildung}%
  \tud@localization@german{\tableautorefname}{Tabelle}%
  \tud@localization@german{\pageautorefname}{Seite}%
  \tud@localization@english{\partautorefname}{Part}%
  \tud@localization@english{\chapterautorefname}{chapter}%
  \tud@localization@english{\sectionautorefname}{section}%
  \tud@localization@english{\subsectionautorefname}{subsection}%
  \tud@localization@english{\subsubsectionautorefname}{subsubsection}%
  \tud@localization@english{\paragraphautorefname}{paragraph}%
  \tud@localization@english{\subparagraphautorefname}{subparagraph}%
  \tud@localization@english{\appendixautorefname}{Appendix}%
  \tud@localization@english{\figureautorefname}{Figure}%
  \tud@localization@english{\tableautorefname}{Table}%
  \tud@localization@english{\pageautorefname}{page}%
}
%    \end{macrocode}
% \end{macro}^^A \pageautorefname
% \end{macro}^^A \tableautorefname
% \end{macro}^^A \figureautorefname
% \end{macro}^^A \appendixautorefname
% \end{macro}^^A \subparagraphautorefname
% \end{macro}^^A \paragraphautorefname
% \end{macro}^^A \subsubsectionautorefname
% \end{macro}^^A \subsectionautorefname
% \end{macro}^^A \sectionautorefname
% \end{macro}^^A \chapterautorefname
% \end{macro}^^A \partautorefname
% \end{macro}^^A \autoref
%
% \begin{macro}{\tud@hypertarget}
% \begin{macro}{\tud@@hypertarget}
% \begin{macro}{\tud@@@hypertarget}
% \begin{macro}{\tud@lbl@dest@auxlist}
% \begin{macro}{\hypertargetraised}
% \begin{macro}{\tud@hyperlink}
% Diese Befehle dienen sowohl zum Definieren von Textankern im Handbuch als 
% auch zum Referenzieren auf diese. Bei der Erstellung des Ankers mit 
% \cs{tudhyperdef} wird zusätzlich auch noch ein Label (\cs{label}) erzeugt.
% Der Anker wird mit \cs{Hy@raisedlink}~-- wie es auch bei pkg{hyperref}-Labels 
% geschieht~-- über die Grundlinie gehoben.
%    \begin{macrocode}
%<*class>
\NewDocumentCommand\tud@hypertarget{m d'' d<> m}{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\tud@@hypertarget{#1}'#2'<#3>{#4}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@@hypertarget{m r'' r<> m}{%
  \begingroup%
    \let\tud@res@a\@empty%
    \tud@@@hypertarget\tud@res@a{#1}{#4}{#4}%
    \IfValueT{#3}{%
      \forlistloop{\tud@@@hypertarget\tud@res@a{#1}{#4}}{#3}%
    }%
    \tud@trace@lbl@add{created}[{#2}]{\tud@res@a}%
  \endgroup%
}
\tud@auxlist@register(\detokenize\expandafter){tud@lbl@dest}
\NewDocumentCommand\tud@@@hypertarget{m m m m}{%
  \begingroup%
    \@tud@res@swatrue%
    \IfBooleanTF{#2}{%
      \tud@auxlist@add{tud@lbl@dest}{#4}%
      \ifx\HyperDestRename\@gobbletwo%
        \hypertargetraised{#4}%
      \else%
        \HyperDestRename{#4}{#3}%
      \fi%
    }{%
      \tud@auxlist@ifin{#4}{tud@lbl@dest}{%
        \@tud@res@swafalse%
      }{%
        \hypertargetraised{#4}%
        \let\HyperDestRename\@gobbletwo%
        \let\@currentlabelname\@empty%
      }%
    }%
    \protected@edef\tud@res@a{%
      \if@tud@res@swa%
        \noexpand\label{#4}%
      \fi%
      \endgroup%
      \if@tud@res@swa%
        \unexpanded{\listadd#1}{#4}%
      \fi%
    }%
  \tud@res@a%
}
\newcommand*\hypertargetraised[1]{%
  \begingroup%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\Hy@raisedlink{\noexpand\hypertarget{#1}{}}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Und schließlich der Befehl zum Referenzieren auf die definierten Anker.
% \ToDo{was soll das zweite Argument genau?!}[v2.06]
%    \begin{macrocode}
\newrobustcmd*\tud@hyperlink[3]{%
  \begingroup%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\hyperlink{#1}%
    }%
  \tud@res@a{#3}{#2}%
}
%</class>
%    \end{macrocode}
% Aus einem Tutorial erfolgen alle Querverweise mit \cs{tudhyperref} auf das 
% Anwenderhandbuch \enquote*{tudscr} im übergeordneten Ordner.
% \ToDo{umbenennen in \cs{tudscrmanualref}}[v2.06]
% \ToDo{\pkg{xr-hyper} oder \cs{href}[pdfnewwindow]{run:./../xxx}}[v2.06]
%    \begin{macrocode}
%<*package>
\newrobustcmd*\tudhyperref[2]{%
%%  \PackageWarning{tudscrmanual}{Change me if you can!}%
%% \href[pdfnewwindow]{run:./../tudscr.pdf\##1}{#2}
  \hyperref{../tudscr.pdf}{}{#1}{#2}%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \tud@hyperlink
% \end{macro}^^A \hypertargetraised
% \end{macro}^^A \tud@lbl@dest@auxlist
% \end{macro}^^A \tud@@@hypertarget
% \end{macro}^^A \tud@@hypertarget
% \end{macro}^^A \tud@hypertarget
%
% \iffalse
%</body>
%<*option>
% \fi
%
% \subsubsection{ToDo-Liste}
%
% Für Klasse und Paket besteht die Möglichkeit, ToDo-Notizen zu nutzen, wofür
% das Paket \pkg{todonotes} geladen wird.
%    \begin{macrocode}
\PassOptionsToPackage{obeyFinal}{todonotes}
%    \end{macrocode}
% Für den Druck wird die farbige Ausgabe der ToDo-Notizen deaktiviert.
%    \begin{macrocode}
\ifdef\tudprintflag{%
  \PassOptionsToPackage{color=white}{todonotes}%
}{%
  \PassOptionsToPackage{colorinlistoftodos}{todonotes}%
}
%    \end{macrocode}
%
% \begin{option}{ToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% \changes{v2.05}{2015/10/27}{Nutzung von Positiv- und Negativ-Liste}^^A
% \begin{macro}{\tud@todo@num}
% \changes{v2.07}{2021/06/09}{neu}^^A
% \begin{macro}{\tud@todo@type@use}
% \changes{v2.06}{2018/08/02}{neu}^^A
% \begin{macro}{\tud@todo@type@default}
% \changes{v2.07}{2021/06/09}{neu}^^A
% \begin{macro}{\tud@todo@type@set}
% \changes{v2.07}{2021/06/09}{neu}^^A
% Mit dieser Option wird gesteuert, ob und welche ToDo-Notizen ausgegeben 
% werden sollen.
%    \begin{macrocode}
\tud@newcount\tud@todo@num
\newcommand*\tud@todo@type@use{}
\newcommand*\tud@todo@type@default{}
\forcsvlist{\listadd\tud@todo@type@default}{rls,imp,doc,default}
\TUD@key{ToDo}[true]{%
  \TUD@set@numkey{ToDo}{@tempa}{%
    \TUD@bool@numkey,{inline}{1},{noinline}{2}%
  }{#1}%
%    \end{macrocode}
% Wird der Option ein gültiger Wert übergeben, werden alle definerten Typen der 
% ToDo-Notizen ausgegeben.
%    \begin{macrocode}
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \tud@todo@num=\@tempa\relax%
    \let\tud@todo@type@use\tud@todo@type@default%
  \else%
%    \end{macrocode}
% Außerdem kann für einen spezifischen Typen einer ToDo-Notiz bestimmt werden, 
% ob dieser ausschließlich ausgegeben (\opt{ToDo=\{only=\meta{Typ}\}}) oder 
% unterdrückt (\opt{ToDo=\{not=\meta{Typ}\}}) wird.
%    \begin{macrocode}
    \begingroup%
      \tud@strlowercase\tud@res@a{#1}%
      \protected@expandtwoargs\in@{=}{\tud@res@a}%
      \ifin@%
        \def\tud@res@b##1=##2\@nil{%
          \IfArgIsEmpty{##2}{\def\tud@res@a{default}}{\def\tud@res@a{##2}}%
          \tud@if@strequal{only}{##1}{\let\tud@res@c\z@}{%
          \tud@if@strequal{not}{##1}{\let\tud@res@c\@ne}{%
            \let\tud@res@c\m@ne%
          }}%
        }%
        \expandafter\tud@res@b\tud@res@a\@nil%
        \let\tud@res@b\relax%
        \ifcase\tud@res@c\relax% only
          \tud@todo@type@set[\tud@res@b]{\tud@res@a}%
        \or% not
          \tud@todo@type@set*[\tud@res@b]{\tud@res@a}%
        \fi%
        \ifx\tud@res@b\relax\else%
          \ifx\tud@res@b\@empty%
            \FamilyKeyStateProcessed%
          \else%
            \ClassError{tudscrmanual}{Wrong ToDo type(s) `\tud@res@b'}{%
              The given type(s)\MessageBreak%
              `ToDo={\ifcase\tud@res@c only\or not\fi=\tud@res@b}'\MessageBreak%
              are invalid.%
            }%
          \fi%
        \fi%
      \else%
        \let\tud@res@b\@empty%
        \let\tud@res@c\@empty%
        \@for\tud@res@a:=\tud@res@a\do{%
          \trim@spaces@in\tud@res@a%
          \ifx\tud@res@a\@empty\else%
            \xifinlist{\tud@res@a}{\tud@todo@type@default}{%
              \protected@eappto\tud@res@b{,\tud@res@a}%
            }{%
              \protected@eappto\tud@res@c{,\tud@res@a}%
            }%
          \fi%
        }%
        \ifx\tud@res@b\@empty\else%
          \FamilyKeyStateProcessed%
          \edef\tud@res@a{%
            \noexpand\TUDoption{ToDo}{{{{only=\expandonce\tud@res@b}}}}%
            \ifx\tud@res@c\@empty\else%
              \noexpand\AtEndOfFamilyOptions*{%
                \noexpand\TUDoption{ToDo}{\expandonce\tud@res@c}%
              }%
            \fi%
          }%
          \tud@res@a%
        \fi%
      \fi%
      \edef\tud@res@a{%
        \endgroup%
        \unexpanded{\def\tud@todo@type@use}{\expandonce\tud@todo@type@use}%
        \ifx\FamilyKeyState\FamilyKeyStateProcessed%
          \noexpand\FamilyKeyStateProcessed%
        \else%
          \tud@todo@num=\z@\relax%
        \fi%
      }%
    \tud@res@a%
  \fi%
}
\NewDocumentCommand\tud@todo@type@set{s o m}{%
  \begingroup%
    \protected@edef\tud@res@a{#3}%
    \IfBooleanTF{#1}{%
      \let\tud@todo@type@use\tud@todo@type@default%
      \def\tud@res@b{\listeremove\tud@todo@type@use}%
    }{%
      \let\tud@todo@type@use\@empty%
      \def\tud@res@b{\tud@unique@eadd\tud@todo@type@use}%
    }%
    \let\tud@res@c\@empty%
    \@for\tud@res@a:=\tud@res@a\do{%
      \trim@spaces@in\tud@res@a%
      \ifx\tud@res@a\@empty\else%
        \TUD@set@numkey{ToDo}{@tempa}{%
          {rls}{0},{imp}{1},{doc}{2},{default}{3}%
        }{\tud@res@a}%
        \ifx\FamilyKeyState\FamilyKeyStateProcessed%
          \tud@res@b{\tud@res@a}%
        \else%
          \protected@eappto\tud@res@c{\ifx\tud@res@c\@empty\else,\fi\tud@res@a}%
        \fi%
      \fi%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\tud@todo@type@use}{\expandonce\tud@todo@type@use}%
      \IfValueT{#2}{\unexpanded{\def#2}}{\expandonce\tud@res@c}%
    }%
  \tud@res@a%
}
\TUDExecuteOptions{ToDo=true}
%    \end{macrocode}
% \end{macro}^^A \tud@todo@type@set
% \end{macro}^^A \tud@todo@type@default
% \end{macro}^^A \tud@todo@type@use
% \end{macro}^^A \tud@todo@num
% \end{option}^^A ToDo
%
% \iffalse
%</option>
%<*body>
% \fi
%
%
% \begin{macro}{\ToDo}
% \changes{v2.02}{2014/07/10}{Verwendung von \pkg{todonotes}}^^A
% \changes{v2.03}{2015/01/25}{Ausgabe auf bestimmten Typ beschränkbar}^^A
% \changes{v2.05}{2015/11/02}{Farbkodierung durch optionale Versionsnummer}^^A
% \changes{v2.06}{2018/08/02}{farbige Ausgabe abhängig von Versionsnummer}^^A
% \begin{macro}{\@ToDo}
% \changes{v2.07}{2021/06/09}{neu}^^A
% \begin{macro}{\ListOfToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% Mit dem Befehl \cs{ToDo}\oarg{Option}\marg{ToDo-Notiz}\oarg{Versionsnummer}
% kann bei aktivierter Option \opt{ToDo} eine Notiz mit einer offenen Aufgabe
% erstellt werden. Das erste optionale Argument kann die Kategorisierungstypen
% \val{doc}, \val{imp} und \val{rls} beinhalten, welche für eine spezifische
% farbliche Kodierung sorgen, um die Aufgaben zu kategorisieren.
%
% Sollte das Paket \pkg{todonotes} nicht geladen werden, erfolgt die Definition 
% der beiden nachfolgend implemtierten Befehle als Dummy.
% Laden des Paketes und minimale Breite der Randnotiz.
%    \begin{macrocode}
\RequirePackage{todonotes}
\AtEndPreamble{%
  \ifdim\marginparwidth<2cm\relax%
    \tud@setdim\marginparwidth{2cm}%
  \fi%
}
\TUD@UnwindPackage{todonotes}{%
  \RenewDocumentCommand\ToDo{s o m !o}{}%
  \renewcommand*\ListOfToDo{}%
}
%    \end{macrocode}
% Nun folgt die Definition des eigentlichen Befehls. Dabei wird zu Beginn
% \cs{@currentHref} gesichert und am Ende wiederhergestellt.
% \ToDo{\texttt{s o D()\{default\} m}; auch für \cls{tudscrdoc}}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\ToDo{s O{default} m !o}{%
  \ifnum\tud@todo@num>\z@\relax%
    \global\let\tud@currentHref\@currentHref%
    \begingroup%
%    \end{macrocode}
% Die Ausgabe erfolgt entweder für die per Option in \cs{tud@todo@type@use} 
% festgelegten Eintragstypen oder speziell für die im optionalen Argument 
% angegebenen. Hierfür wird \opt{ToDo=\{only=\meta{\dots}\}} für das optionale
% Argument lokal ausgeführt und anschließend mit der zuvor gesicherten globalen
% Liste eine Schnittmenge gebildet.
%    \begin{macrocode}
      \begingroup%
        \let\tud@res@a\tud@todo@type@use%
        \let\tud@res@b\@empty%
        \def\tud@res@c##1{%
          \ifinlist{##1}{\tud@res@a}{\listadd\tud@res@b{##1}}{}%
        }%
        \TUDoptions{ToDo={only={#2}}}%
        \forlistloop\tud@res@c{\tud@todo@type@use}%
        \edef\tud@res@c{%
          \endgroup%
          \unexpanded{\def\tud@todo@type@use}{\expandonce\tud@res@b}%
        }%
      \tud@res@c%
      \ifx\tud@todo@type@use\@empty\else%
%    \end{macrocode}
% Wenn mindestens ein aktiver Kategorisierungstyp gefunden wurde, werden in 
% temporären Makros die Versionsangabe (\cs{tud@res@a}) sowie die Einstellungen 
% zur farbige Ausprägung der ToDo-Notiz (\cs{tud@res@b}) gespeichert.
%    \begin{macrocode}
        \edef\tud@res@a{\TUDScriptVersionNumber}%
%    \end{macrocode}
% Der Kategorisierungstyp für Releases \val{rls} ist quasi vorkonfiguriert. 
% Sind weitere Kategorisierungstypen angegeben, werden diese ignoriert. Der Typ 
% für Implemtierung \val{imp} wird vorangig zur Dokumentation \val{doc} 
% behandelt.
%    \begin{macrocode}
        \ifinlist{rls}{\tud@todo@type@use}{%
          \IfValueT{#4}{%
            \ClassWarning{tudscrmanual}{`rls' implies current version}%
          }%
          \def\tud@res@c{HKS44}%
        }{%
          \IfValueT{#4}{\protected@edef\tud@res@a{#4}}%
          \ifinlist{imp}{\tud@todo@type@use}{%
            \def\tud@res@c{HKS57}%
          }{%
            \ifinlist{doc}{\tud@todo@type@use}{%
              \def\tud@res@c{HKS33}%
            }{%
              \def\tud@res@c{HKS92}%
            }%
          }%
        }%
%    \end{macrocode}
% Das optionale Argument erzeugt zusätzlich eine Notiz am Rand, in welcher
% vorzugsweise die angedachte Version eingetragen werden kann. Sollte 
% dieses angegeben sein, wird auf eine gültige Versionsnummer geprüft.
%    \begin{macrocode}
        \begingroup%
          \tud@v@to@number*\tud@res@b{\tud@res@a}%
%    \end{macrocode}
% Die Ausprägung der ToDo-Notiz wird in Abhängigkeit von der gefundenen 
% Versionsnummer im Vergleich zur gerade aktuellen Version gestaltet.
%    \begin{macrocode}
          \ifx\tud@res@b\relax%
            \tud@res@cnt=1%
          \else%
            \tud@v@to@number\tud@res@c{\TUDScriptVersionNumber}%
            \ifnum\tud@res@b<\tud@res@c\relax%
              \tud@res@cnt=0%
            \else%
              \ifnum\tud@res@b>\tud@res@c\relax%
                \tud@res@cnt=3%
              \else%
                \tud@res@cnt=2%
              \fi%
            \fi%
          \fi%
%    \end{macrocode}
% Die~-- gegebenfalls korrigerte~-- Randnotiz (\cs{tud@res@a}) sowie die 
% farbliche Ausprägung (\cs{tud@res@b}) werden expandiert. Die zu verwendende 
% Farbe selbst ist nach der Gruppe weiterhin in \cs{tud@res@c} abgelegt.
%    \begin{macrocode}
          \edef\tud@res@c{%
            \endgroup%
            \unexpanded{\def\tud@res@a}{\tud@res@a}%
            \unexpanded{\edef\tud@res@b}{%
              \ifcase\tud@res@cnt% < current version
                color=\noexpand\tud@res@c,%
                bordercolor=HKS07!80,%
                textcolor=white,%
                inlinewidth=\linewidth - 2pt%
              \or% no version
                color=\noexpand\tud@res@c!15,%
                bordercolor=HKS07!50%
              \or% = current version
                color=\noexpand\tud@res@c!60,%
                bordercolor=\noexpand\tud@res@c%
              \or% > current version
                color=\noexpand\tud@res@c!30,%
                bordercolor=\noexpand\tud@res@c%
              \else% undefined state
                color=HKS07!80,%
                textcolor=\noexpand\tud@res@c%
              \fi%
            }%
%    \end{macrocode}
% Die Inhalte werden zentriert gesetzt. Für überfällige ToDo-Notizen wird 
% zusätzlich die Linienstärke erhöht.
%    \begin{macrocode}
            \unexpanded{\tikzset{notestyleraw/.append style={align=center}}}%
            \ifcase\tud@res@cnt\relax%
              \unexpanded{%
                \tikzset{notestyleraw/.append style={%
                  line width = 2pt,%
                  text width = \@todonotes@textwidth - 1.6ex - 2pt,%
                  inner sep  = 0.8ex%
                }}%
              }%
            \fi%
          }%
        \tud@res@c%
%    \end{macrocode}
% Vor der Ausgabe wird ggf. ein kleiner vertikaler Abstand eingefügt.
%    \begin{macrocode}
        \ifnum\tud@todo@num=\tw@\relax%
          \let\@todonotes@drawInlineNote\relax%
        \else%
          \ifhmode\strut\par\fi%
          \let\par\relax%
          \vskip\glueexpr\smallskipamount/2\relax%
          \noindent%
        \fi%
%    \end{macrocode}
% Dann erfolgt die Ausgabe der eigentlichen ToDo-Notiz im Textbereich. Die 
% Sternversion von \cs{ToDo} unterdrückt dabei die Aufnahme in die ToDo-Liste.
%    \begin{macrocode}
        \edef\tud@res@c{\tud@res@b,inline\IfBooleanT{#1}{,nolist}}%
        \sbox\z@{\@ToDo{\tud@res@c}{#3}}\usebox\z@%
%    \end{macrocode}
% Es folgt die dazugehörige Randnotiz. Damit diese nicht verrutscht, wird
% \cs{marginnote} anstelle von \cs{marginpar} verwendet. Wurde das angestellte
% optionale Argument verwendet, wird dieses für die Randnotiz genutzt.
% Andernfalls erscheint im Rand die Anmerkung \emph{ToDo}.
%    \begin{macrocode}
        \renewcommand*\marginpar[2][]{%
          \marginnote[{##1}]{##2}[\dimexpr\ht\strutbox-\ht\z@-\dp\z@\relax]%
        }%
        \edef\tud@res@c{\tud@res@b,noline,nolist}%
        \@ToDo{\tud@res@c}{\tud@res@a}%
        \ifnum\tud@todo@num=\tw@\relax\else%
          \aftergroup\par\aftergroup\noindent%
        \fi%
      \fi%
    \endgroup%
    \global\let\@currentHref\tud@currentHref%
  \fi%
  \ignorespaces%
}
%    \end{macrocode}
% Hilfmakro zur Ausführung des Befehle \cs{todo} aus dem Paket \pkg{todonotes}.
%    \begin{macrocode}
\newcommand*\@ToDo[2]{%
  \expandafter\todo\expandafter[\expandafter{#1}]{\trim@spaces{#2}\strut}%
}
%    \end{macrocode}
% Zum Schluss wird der Befehl \cs{ListOfToDo} definiert, der die Liste der noch 
% zu erledigenden Punkte ausgibt.
%    \begin{macrocode}
\newcommand*\ListOfToDo{%
  \ifnum\tud@todo@num>\z@\relax\cleardoublepage\listoftodos\fi%
}
%    \end{macrocode}
% \end{macro}^^A \ListOfToDo
% \end{macro}^^A \@ToDo
% \end{macro}^^A \ToDo
%
% \subsection{Markup von Klassen, Paketen, Optionen und weiteren Elementen}
%
% Es folgen die Definitionen für Befehle und Umgebungen für Klasse und Paket, 
% welche sich überschneidenden und für beide benötigt werden. Allerdings sind 
% diese für Klasse und Paket in ihrer Implementierung teilweise unterschiedlich.
%
% Als erstes werden für Klasse und Paket einige Hilfmakros definiert.
%
% \begin{macro}{\tud@specialurl@wrapper}
% \begin{macro}{\tud@specialurl@resolve}
% \begin{macro}{\tud@specialurl@validate}
%    \begin{macrocode}
\newcommand*\tud@specialurl@wrapper[2]{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \let\tud@res@c\@empty%
    \ifx\tud@res@a\@empty\else%
      \expandafter\tud@specialurl@resolve\expandafter\tud@res@b\tud@res@a::\@nil%
      \ifnum\tud@res@b<\z@\relax\else%
        \def\tud@res@d##1:##2\@nil{\def\tud@res@c{##2}}%
        \expandafter\tud@res@d\tud@res@a\@nil%
        \ifx\tud@res@c\@empty\else%
          \ifcase\tud@res@b\relax% CTAN
            \tud@ctan@url@normalize\tud@res@c{pkg/\tud@res@c}%
          \or% CTANinfo
            \tud@ctan@url@normalize\tud@res@c{tex-archive/info/\tud@res@c}%
          \or% GH
            \tud@github@url@normalize\tud@res@c{\tud@res@c}%
          \fi%
        \fi%
      \fi%
      \ifx\tud@res@c\@empty%
        \ClassWarning{tudscrmanual}{%
          The given special link `#2' \MessageBreak%
          could not be resolved%
        }%
      \fi%
    \fi%
%    \end{macrocode}
% \ToDo{Warnung, falls empty?}[v2.06]
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{%
        \ifx\tud@res@c\@empty%
          \noexpand\@firstofone%
        \else%
          \noexpand\href{\tud@res@c}%
        \fi%
      }%
    }%
  \tud@res@a%
}
\newcommand*\tud@specialurl@resolve{}
\def\tud@specialurl@resolve#1#2:#3:#4\@nil{%
  \begingroup%
    \FamilyKeyStateUnknownValue%
    \IfArgIsEmpty{#3}{}{%
      \TUD@set@numkey{}{tud@res@a}{%
        {ctan}{0},{ctaninfo}{1},{gh}{2},{url}{3}%
      }{#2}%
    }%
    \ifx\FamilyKeyState\FamilyKeyStateProcessed\else%
      \def\tud@res@a{-1}%
      \FamilyKeyStateProcessed%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@res@a}%
    }%
  \tud@res@a%
}
\newcommand*\tud@specialurl@validate[1]{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \unexpanded{\tud@specialurl@resolve\tud@res@a}#1::\noexpand\@nil%
    }%
    \tud@res@a%
    \ifnum\tud@res@a<\z@\relax%
      \ClassWarning{tudscrmanual}{%
        Special link `#1' invalid, permitted are:\MessageBreak%
        CTAN[info]:... GH:... URL:...
      }%
      \aftergroup\@gobble%
    \else%
      \aftergroup\@firstofone%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@specialurl@validate
% \end{macro}^^A \tud@specialurl@resolve
% \end{macro}^^A \tud@specialurl@wrapper
%
% \subsubsection{Markup von Variablen, Parametern etc.}
%
% \begin{macro}{\NewParameterCommand}
% \begin{macro}{\tud@param@list}
% \begin{macro}{\P@Braces}
%    \begin{macrocode}
\newcommand*\tud@param@list{}
\NewDocumentCommand\NewParameterCommand{s m m m m}{%
  \edef\tud@res@a{\expandafter\@gobble\string#2}%
  \listeadd\tud@param@list{\tud@res@a}%
  \edef\tud@res@b{\expandafter\noexpand\csname @\tud@res@a\endcsname}%
  \expandafter\NewExpandableDocumentCommand\tud@res@b{#3}{#5}%
  \NewDocumentCommand#2{#3}{#4}%
}
\@onlypreamble\NewParameterCommand
\NewDocumentCommand\P@Braces{s m}{%
  \mbox{%
    \texttt{\IfBooleanTF{#1}{\lbrack}{\textbraceleft}}%
    #2%
    \texttt{\IfBooleanTF{#1}{\rbrack}{\textbraceright}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \P@Braces
% \end{macro}^^A \tud@param@list
% \end{macro}^^A \NewParameterCommand
% \begin{macro}{\tud@if@param@special}
% \changes{v2.05}{2015/11/14}{neu}^^A
% Der Befehl wird von den Makros \cs{tud@lbl@get} und \cs{tud@idx@get} genutzt,
% um bedingten Quelltext auszuführen, falls im ersten obligatorischen Argument
% entweder Parameter direkt oder aber mit einem der Parameter-Markup-Befehle
% \cs{PValue} oder \cs{PValueName} angegeben wurde.
% \ToDo{Sternversion von \cs{NewParameterCommand} nutzen (Liste?)}[v2.06]
% \ToDo{sollte \cs{PLength} als Spezialparameter behandelt werden?}[v2.06]
% \ToDo{Was, wenn \val{-NoValue-} übergeben wird?}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@if@param@special[1]{%
  \begingroup%
    \protected@edef\tud@res@b{#1}%
    \def\tud@res@a{<p:special>}%
    \edef\PSet##1{\tud@res@a}%
    \edef\PMisc{\tud@res@a}%
    \edef\PBoolean{\tud@res@a}%
    \edef\PLength{\tud@res@a}%
    \protected@edef\tud@res@b{\tud@res@b}%
    \ifx\tud@res@a\tud@res@b%
      \aftergroup\@firstoftwo%
    \else%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@if@param@special
% \begin{macro}{\Parameter@Expandable}
% \changes{v2.07}{2019/11/22}{neu}^^A
% Hiermit werden die Befehle für Parameter expandierbar.
% \ToDo{von \cs{Markup@Expandable} trennen?}[v2.06]
%    \begin{macrocode}
\newcommand*\Parameter@Expandable{%
  \begingroup%
    \def\tud@res@a{\endgroup}%
    \def\tud@res@b##1{\appto\tud@res@a{\csletcs{##1}{@##1}}}%
    \forlistloop\tud@res@b{\tud@param@list}%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Parameter@Expandable
% \ToDo{
%   Verwendung der Befehle überprüfen, evtl. umbennenen. Wozu \cs{PValueName}?
%   Evtl. sollte \cs{PValue} innerhalb von \cs{PName} lokal geändert werden?
%   Was passiert, wenn auch \cs{PName} von \cs{tud@doifPValue} akzeptiert?
%   Zeile 542--546 in tudscr-hints, 294 in tudscr-packages
% }[v2.07]
% \ToDo{
%   nach '=\cs{P(Value)?Name}' in *.tex suchen und ggf. 
%   überarbeiten; \cs{PValueName} umbenennen
% }[v2.07]
% \ToDo{neues Makro \cs{PSetLength} mit \cs{PName}\marg{Längenwert}}[v2.??]
% \begin{macro}{\PName}
% \begin{macro}{\PValue}
% \begin{macro}{\MPName}
% \begin{macro}{\MPValue}
% \begin{macro}{\MList}
% \begin{macro}{\OPName}
% \begin{macro}{\OPValue}
% \begin{macro}{\OList}
% \begin{macro}{\OPList}
% \changes{v2.03}{2015/01/25}{neu}^^A
% \begin{macro}{\PMisc}
% \begin{macro}{\PBoolean}
% \begin{macro}{\PLength}
% \begin{macro}{\PSet}
% Diese Befehle dienen zum Auszeichnen von obligatorischen und optionalen 
% Parametern und Befehlen oder bestimmten Wertzuweisungen. Pfade werden ohne
% zusätzliches Markup ausgegeben.
%    \begin{macrocode}
\NewParameterCommand\PName{s m}{%
  \tud@if@strblank{#2}{%
%<*class>
    \ClassWarning{tudscrmanual}%
%</class>
%<*package>
    \PackageWarning{tudscrmanual}%
%</package>
      {The argument of `\string\PName' should not be empty}%
  }{}%
  \mbox{\IfBooleanTF{#1}{\textttit}{\texttt}{<#2>}}%
}{<8:#2>}
\NewParameterCommand\PValue{s m}{%
  \tud@if@strblank{#2}{%
%<*class>
    \ClassWarning{tudscrmanual}%
%</class>
%<*package>
    \PackageWarning{tudscrmanual}%
%</package>
      {The argument of `\string\PValue' should not be empty}%
  }{}%
  \mbox{\IfBooleanTF{#1}{\textttit}{\texttt}{#2}}%
}{<9:#2>}
\NewParameterCommand\MPName{m}{\P@Braces{\PName{#1}}}{\@PName{#1}}
\NewParameterCommand\MPValue{m}{\P@Braces{\PValue{#1}}}{\@PValue{#1}}
\NewParameterCommand\MList{}{\MPName{Parameterliste}}{\@PName{Parameterliste}}
\NewParameterCommand\OPName{m}{\P@Braces*{\PName{#1}}}{\@PName{#1}}
\NewParameterCommand\OPValue{m}{\P@Braces*{\PValue{#1}}}{\@PValue{#1}}
\NewParameterCommand\OList{}{\OPName{Parameterliste}}{\@PName{Parameterliste}}
\NewParameterCommand\OPList{m}{%
  \P@Braces*{%
    \PName{#1}%
    \texttt{\txb\kern-.5em\txb}%
    \PName{Parameterliste}%
  }%
}{\@PName{Parameterliste}}
%    \end{macrocode}
% \ToDo{\cs{PMisc} aufteilen in "Wert" und "Einstellung"?}[v2.06]
% \ToDo{oder ggf. \cs{PSet} entfernen?}[v2.06]
%    \begin{macrocode}
\NewParameterCommand*\PMisc{}{\PName{Einstellung}}{<0:misc>}
\NewParameterCommand*\PBoolean{}{\PName{Ein-Aus-Wert}}{<1:boolean>}
\NewParameterCommand*\PLength{}{\PName{L\"ange}}{<2:length>}
\NewParameterCommand*\PSet{m}{\PName{#1}}{<3:#1>}
%    \end{macrocode}
% \end{macro}^^A \PSet
% \end{macro}^^A \PLength
% \end{macro}^^A \PBoolean
% \end{macro}^^A \PMisc
% \end{macro}^^A \OPList
% \end{macro}^^A \OList
% \end{macro}^^A \OPValue
% \end{macro}^^A \OPName
% \end{macro}^^A \MList
% \end{macro}^^A \MPValue
% \end{macro}^^A \MPName
% \end{macro}^^A \PValue
% \end{macro}^^A \PName
% \begin{macro}{\PValue@Enfold}
%    \begin{macrocode}
\NewDocumentCommand\PValue@Enfold{s t' m}{%
  \begingroup%
    \protected@edef\tud@res@a{#3}%
    \trim@spaces@in\tud@res@a%
    \ifx\tud@res@a\@empty%
      \let\tud@res@b\relax%
    \else%
      \Parameter@Expandable%
      \protected@edef\tud@res@b{\tud@res@a}%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \IfBooleanTF{#2}{\noexpand\@firstofone}{\unexpanded{\def#3}}{%
        \ifx\tud@res@a\tud@res@b%
          \noexpand\PValue\IfBooleanT{#1}{*}%
        \else%
          \expandafter\@firstofone%
        \fi%
        {\expandonce\tud@res@a}%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \PValue@Enfold
%
% \subsubsection{Definition der Markup-Befehle}
%
% \changes{v2.05}{2015/11/02}{Markup-Befehle komplett überarbeitet}^^A
%
% Im Folgenden werden allerhand Befehle mit Hilfe des Paketes \pkg{xparse} 
% definiert, um bestimmte Begriffe, Klassen, Pakete, Optionen, Umgebungen, 
% Befehle, Parameter, Bezeichner, Längen, Schriftelemente und Farben speziell
% auszuzeichnen. Diese Befehle lauten für Klasse und Paket aus Gründen der
% Konsistenz zwar gleich, unterschieden sich jedoch ein klein wenig in der
% Implementierung.
%
% Die Sternversion all dieser Befehlen tragen nichts in den Index ein. Für 
% (fast) alle der folgenden Befehle gilt, dass diese mit zwei optionalen
% Argumenten am Ende genutzt werden können. Sollte ein Label existieren, wird 
% automatisch ein Hyperlink erzeugt, welcher mit der optionalen Angabe von
% |'|\meta{Referenzvariante}|'| um einen textuellen Querverweis ergänzt werden
% kann. Mit \verb+|+\meta{Indexmarkup}\verb+|+ kann die Erscheinung im Index
% angepasst werden. Bei einigen Befehlen kann zusätzlich zuvor im Markup mit
% dem optionalen Argument \parg{Entität} die Zuweisung auf ein bestimmtes
% Paket oder eine Klasse aus dem \TUDScript-Bundle erfolgen.
%
% Die eigentliche Behandlung erfolgt mit dem Befehl \cs{Process@Markup}, 
% welcher die tatsächliche Auszeichnung im Fließtext bzw. als Deklaration 
% übernimmt. Das Auszeichnungsformat wird dafür zuvor mit \cs{Markup@Format@Set}
% festgelegt. Ein Eintrag in den Index wird mit \cs{Process@Index} realisiert.
% Für die Änderungsliste wird der Befehl \cs{Process@ChangedAt} genutzt, um die 
% entsprechende Formatierung zu gewährleisten, wobei dies nur für die Klasse
% \cls{tudscrmanual} und nicht für das Paket \pkg{tudscrmanual} gilt.
%
% Für Labels, Index- und Änderungs- sowie PDF-Outline-Einträge etc. müssen die
% nachfolgend definierten Markup-Befehle durch eine expandierbare Version
% ersetzt werden, welche hier mit \cs{NewExpandableDocumentCommand} ebenfalls 
% definiert werden.
%
% \ToDo{einheitliches Schema für @Gobble und @Expandable}[v2.06]
% \begin{macro}{\NewMarkupCommand}
% \begin{parameter}{lvl}
% \begin{parameter}{idx}
% \begin{parameter}{type}
% \begin{macro}{\tud@markup@lvl}
% \begin{macro}{\tud@markup@idx}
% \begin{macro}{\tud@markup@type@num}
% \begin{macro}{\tud@markup@list}
% \ToDo{doc: L=V..B L: Level der Entität, nutzbar mit Leveln von..bis}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@markup@lvl{}
\let\tud@markup@lvl\relax
\TUD@key[.markup]{lvl}{%
  \begingroup%
    \def\tud@res@d##1>##2>##3\@nil{%
      \Ifisinteger{##1}{%
        \edef\tud@res@a{\the\numexpr##1\relax}%
        \IfArgIsEmpty{##2}{%
          \ifcase\tud@res@a\relax% 0
            \def\tud@res@b{-1..-1}%
          \or% 1
            \def\tud@res@b{-1..-1}%
          \or% 2
            \def\tud@res@b{1}%
          \else% >=3
            \def\tud@res@b{1..2}%
          \fi%
        }{%
          \def\tud@res@b{##2}%
        }%
        \def\tud@res@d####1..####2..####3\@nil{%
          \edef\tud@res@b{\the\numexpr\tud@res@a-2\relax}%
          \ifnum\tud@res@b<1\relax%
            \edef\tud@res@b{1}%
          \fi%
          \IfArgIsEmpty{####1}{}{%
            \Ifisinteger{####1}{%
              \edef\tud@res@b{\the\numexpr####1\relax}%
            }{%
              \FamilyKeyStateUnknownValue%
            }%
          }%
          \edef\tud@res@c{\the\numexpr\tud@res@a-1\relax}%
          \IfArgIsEmpty{####2}{}{%
            \Ifisinteger{####2}{%
              \edef\tud@res@c{\the\numexpr####2\relax}%
              \ifnum\tud@res@c<\m@ne\relax%
                 \edef\tud@res@c{-1}%
              \fi%
            }{%
              \FamilyKeyStateUnknownValue%
            }%
          }%
        }%
        \FamilyKeyStateProcessed%
        \expandafter\tud@res@d\tud@res@b....\@nil%
      }{}%
    }%
    \FamilyKeyStateUnknownValue%
    \tud@res@d#1>>\@nil%
    \edef\tud@res@d{%
      \endgroup%
      \def\noexpand\tud@markup@lvl{{\tud@res@a}{{\tud@res@b}{\tud@res@c}}}%
      \expandonce\FamilyKeyState%
    }%
  \tud@res@d%
}
\newcommand*\tud@markup@idx{\jobname}
\TUD@key[.markup]{idx}[true]{%
  \begingroup%
    \def\tud@res@b{\endgroup}%
    \def\tud@res@a##1:##2:##3\@nil{%
      \undef\tud@markup@idx%
      \TUD@set@ifkey{idx}{@tempswa}{##1}%
      \ifx\FamilyKeyState\FamilyKeyStateProcessed%
        \if@tempswa%
          \def\tud@markup@idx{\jobname}%
        \fi%
      \else%
        \xifinlist{##1}{\tud@index@list}{%
          \FamilyKeyStateProcessed%
          \def\tud@markup@idx{##1}%
        }{%
          \ClassError{tudscrmanual}{Unknown index `##1'}{%
            Index `##1' was never defined with \string\tud@index@make!%
          }%
        }%
      \fi%
      \protected@eappto\tud@res@b{%
        \ifundef\tud@markup@idx{%
          \unexpanded{\undef\tud@markup@idx}%
        }{%
          \unexpanded{\def\tud@markup@idx}{%
            \expandonce\tud@markup@idx\IfArgIsEmpty{##2}{}{\unexpanded{:##2}}%
          }%
        }%
        \expandonce\FamilyKeyState%
      }%
    }%
    \tud@res@a#1::\@nil%
  \tud@res@b%
}
\tud@newcount\tud@markup@type@num
\TUD@key[.markup]{type}{%
  \TUD@set@numkey{type}{@tempa}{%
    {default}{0},{value}{1},{param}{2}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \tud@markup@type@num=\@tempa\relax%
  \fi%
}
\newcommand*\tud@markup@list{}
\NewDocumentCommand\NewMarkupCommand{s m O{} D(){\texttt} D<>{} D''{ic} m}{%
  \begingroup%
    \TUDExecuteOptions[.markup]{#3}%
    \ifx\tud@markup@lvl\relax%
      \TUDExecuteOptions[.markup]{lvl=3}%
    \fi%
    \edef\tud@res@d{\expandafter\@gobble\string#2}%
    \def\tud@res@c{\endgroup}%
    \eappto\tud@res@c{\unexpanded{\listadd\tud@markup@list}{\tud@res@d}}%
    \eappto\tud@res@c{%
      \unexpanded{\newcommand*}%
      \csname Entity@@Level@@\tud@res@d\endcsname{\tud@markup@lvl}%
    }%
    \tud@toks@{\Markup@Format@Set}%
    \addto@hook@expandafter\tud@toks@{\expandafter{\tud@res@d}}%
    \addto@hook\tud@toks@{(#4)}%
    \IfBooleanT{#1}{\addto@hook\tud@toks@{[\bsc]}}%
    \addto@hook\tud@toks@{<#5>}%
    \ifundef\tud@markup@idx{}{%
      \addto@hook@expandafter\tud@toks@{\expandafter|\tud@markup@idx|}%
    }%
    \addto@hook\tud@toks@{'#6'{#7}}%
    \eappto\tud@res@c{\the\tud@toks@}%
    \def\tud@res@b##1##2{%
      \eappto\tud@res@c{%
        \NewExpandableDocumentCommand\expandafter\noexpand\csname##1\endcsname%
          {s d|| d'' d() m}{##2}%
      }%
    }%
    \tud@res@b{\tud@res@d @Gobble}{}%
    \tud@res@b{@\tud@res@d}{\unexpanded{\Markup@Gobble@Extra##5|\relax}}%
    \ifcase\tud@markup@type@num\relax% default
      \def\tud@res@b{\AP@MarkupDefault}%
    \or% val
      \def\tud@res@b{\AP@MarkupValue}%
    \or% key
      \def\tud@res@b{\AP@MarkupKey}%
    \fi%
    \eappto\tud@res@c{%
      \unexpanded{\NewDocumentCommand#2}{%
        s d|| d'' d() >{\expandonce\tud@res@b{\tud@res@d}}m%
      }{%
        \unexpanded{\Process@Markup[##1]}%
          {\tud@res@d}%
          \unexpanded{##5|##2|'##3'(##4)}%
      }%
    }%
  \tud@res@c%
}
\@onlypreamble\NewMarkupCommand
%    \end{macrocode}
% \end{macro}^^A \tud@markup@list
% \end{macro}^^A \tud@markup@type@num
% \end{macro}^^A \tud@markup@idx
% \end{macro}^^A \tud@markup@lvl
% \end{parameter}^^A type
% \end{parameter}^^A idx
% \end{parameter}^^A lvl
% \end{macro}^^A \NewMarkupCommand
% \begin{macro}{\Markup@Format@Set}
% \begin{macro}{\Markup@Inline@Format@Set}
% \begin{macro}{\Markup@InlineDeclare@Format@Set}
% \begin{macro}{\Markup@Declare@Format@Set}
% \begin{macro}{\Markup@Suffix@Format@Set}
% Der Befehl \cs{Markup@Format@Set} setzt das gewünschte Format für die jeweilge
% Ausgabe. Dieses wird im ersten Argument angegeben. Das ordinäre optionale 
% Argument kann genutzt werden, wenn bei der Deklaration noch eine genauere 
% Beschreibung oder Spezifizierung erscheinen soll, beispielsweise etwas wie
% \enquote{Umgebung} oder \enquote{Parameter}.
% \ToDo{doc: r'' dlicn -> declare, inline, index, changelog, normal text}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Markup@Format@Set{m r() O{} D<>{} d|| r'' m}{%
  \tud@toks@{{#1}{{#2{#3##1}\IfValueT{##2}{\PValue{=}##2}}\IfValueT{##3}{##3}}}%
  \ifcsundef{Markup@Format@@Inline@@#1}{%
    \expandafter\Markup@Inline@Format@Set\the\tud@toks@%
  }{}%
  \ifcsundef{Markup@Format@@InlineDeclare@@#1}{%
    \expandafter\Markup@InlineDeclare@Format@Set\the\tud@toks@%
  }{}%
  \ifcsundef{Markup@Format@@Declare@@#1}{%
    \def\@tempa{[{#4}]}%
    \expandafter\expandafter\expandafter\Markup@Declare@Format@Set%
      \expandafter\@tempa\the\tud@toks@%
  }{}%
  \IfValueT{#5}{%
    \expandafter\newcommand\csname Markup@Format@@Index@@#1\endcsname{}%
    \csdef{Markup@Format@@Index@@#1}{#5}%
  }%
  \Markup@Suffix@Format@Set{#1}{#6}{\suffix{#7}}%
}
\@onlypreamble\Markup@Format@Set
\newcommand*\Markup@Inline@Format@Set[2]{%
  \expandafter\newcommand\csname Markup@Format@@Inline@@#1\endcsname{}%
  \csdef{Markup@Format@@Inline@@#1}##1=##2=[##3]{%
    \mbox{#2\Markup@Suffix@Select{#1}}%
  }%
}
\@onlypreamble\Markup@Inline@Format@Set
\newcommand*\Markup@InlineDeclare@Format@Set[2]{%
  \expandafter\newcommand\csname Markup@Format@@InlineDeclare@@#1\endcsname{}%
  \csdef{Markup@Format@@InlineDeclare@@#1}##1=##2=[##3]{%
    \mbox{#2\Markup@Suffix@@Select{l}{#1}}%
  }%
}
\@onlypreamble\Markup@InlineDeclare@Format@Set
\newcommand*\Markup@Declare@Format@Set[3][]{%
  \expandafter\newcommand\csname Markup@Format@@Declare@@#2\endcsname{}%
  \csdef{Markup@Format@@Declare@@#2}##1=##2=[##3]{%
    \mbox{#1#3\Markup@Suffix@@Select{d}{#2}}%
  }%
}
\@onlypreamble\Markup@Declare@Format@Set
\newcommand*\Markup@Suffix@Format@Set[3]{%
  \expandafter\newcommand\csname Markup@Format@@Suffix@@#1\endcsname{}%
  \csdef{Markup@Format@@Suffix@@#1}{{#2}{#3}}%
}
\@onlypreamble\Markup@Suffix@Format@Set
%    \end{macrocode}
% \end{macro}^^A \Markup@Suffix@Format@Set
% \end{macro}^^A \Markup@Declare@Format@Set
% \end{macro}^^A \Markup@InlineDeclare@Format@Set
% \end{macro}^^A \Markup@Inline@Format@Set
% \end{macro}^^A \Markup@Format@Set
% \begin{macro}{\tud@index@mode@num}
% \begin{environment}{NoIndexDefault}
%    \begin{macrocode}
% \ToDo{doc 1:default=yes 0:default=no -1:no -2:index -3:changelog}[v2.06]
% \ToDo{Verarbeitung durch \cs{tud@idx@attribute@get}}[v2.06]
\tud@newcount\tud@index@mode@num
\tud@index@mode@num=\@ne\relax%
\newenvironment{NoIndexDefault}{%
  \tud@index@mode@num=\z@\relax%
  \ignorespaces%
}{%
  \aftergroup\ignorespaces%
}
%    \end{macrocode}
% \end{environment}^^A NoIndexDefault
% \end{macro}^^A \tud@index@mode@num
% \begin{macro}{\Markup@Suffix@Select}
% \begin{macro}{\Markup@Suffix@@Select}
%    \begin{macrocode}
\newcommand*\Markup@Suffix@Select[1]{%
  \begingroup%
    \tud@index@mode@num=\numexpr\tud@index@mode@num+3\relax%
    \ifcase\tud@index@mode@num\relax%
      \def\tud@res@a{c}%
    \or%
      \def\tud@res@a{i}%
    \else%
      \def\tud@res@a{n}%
    \fi%
    \expandafter\Markup@Suffix@@Select\expandafter{\tud@res@a}{#1}%
  \endgroup%
}
\newcommand*\Markup@Suffix@@Select[3][\@firstofone]{%
  \begingroup%
    \protected@edef\tud@res@a{\csuse{Markup@Format@@Suffix@@#3}}%
    \@expandtwoargs\in@{#2}{\expandafter\@firstoftwo\tud@res@a}%
    \ifin@%
      \protected@edef\tud@res@b{%
        \def\noexpand\tud@res@b{\expandafter\@secondoftwo\tud@res@a}%
      }%
      \tud@res@b%
    \else%
      \let\tud@res@b\@empty%
    \fi%
    \protected@edef\tud@res@c{%
      \endgroup%
      \unexpanded{#1}{\tud@res@b}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Suffix@@Select
% \end{macro}^^A \Markup@Suffix@Select
% \begin{macro}{\suffix}
% \changes{v2.05}{2015/10/27}{neu}^^A
% \begin{macro}{\idxsuffix}
% \begin{macro}{\nosuffix}
% \begin{macro}{\suffixsize}
% Für alle möglichen, zusätzlichen Informationen bei Deklarationen, im Index 
% oder der normalen in Ausgabe im Fließtext wird eine etwas kleinere Schrift 
% in einer Größe zwischen \cs{tiny} und \cs{scriptsize} gewählt.
%    \begin{macrocode}
\newcommand*\suffixsize{\scriptsize}
\AtBeginDocument{%
  \begingroup%
    \def\tud@res@c#1#2#3#4\@nil{\def\tud@res@a{#4}}%
    \expandafter\tud@res@c\tiny\@nil%
    \def\tud@res@c#1#2#3#4\@nil{\def\tud@res@b{#3}}%
    \expandafter\tud@res@c\scriptsize\@nil%
    \xdef\suffixsize{%
      \unexpanded{\@setfontsize\suffixsize}%
        {\expandonce\tud@res@a}{\expandonce\tud@res@b}%
    }%
  \endgroup%
}
\newrobustcmd*\suffix[1]{%
  \begingroup%
    \nobreakspace\suffixsize(#1)%
  \endgroup%
}
\newrobustcmd*\idxsuffix[1]{%
  \begingroup%
    \let\Markup@Suffix@Select\@gobble%
    \nobreakspace\suffixsize\textlangle#1\textrangle%
  \endgroup%
}
\newrobustcmd*\nosuffix[1]{%
  \begingroup%
    \let\suffix\@gobble%
    \let\idxsuffix\@gobble%
    #1%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \suffixsize
% \end{macro}^^A \nosuffix
% \end{macro}^^A \idxsuffix
% \end{macro}^^A \suffix
% \begin{macro}{\AP@MarkupKey}
% \begin{macro}{\AP@MarkupValue}
% \begin{macro}{\AP@MarkupDefault}
% Bei Optionen und Parametern können spezielle Werte einfach im Hauptargument 
% durch |=| getrennt angegeben werden. Um diese auszuwerten, wird dieser Befehl
% definiert, welcher als Argumentprozessor verwendet wird.
% \ToDo{vereinfachen, tud@res@... in separate Makros auslagern}[v2.07]
% \ToDo{test auf strbool == true/false}[v2.06]
%    \begin{macrocode}
\newcommand*\AP@MarkupKey[2]{%
  \begingroup%
    \AP@MarkupDefault{#1}{#2}%
    \def\tud@res@a##1##2\@nil{%
      \in@{/}{##1}%
      \ifin@%
        \def\tud@res@b####1=####2\@nil{%
          \def\tud@res@c{####2}%
          \PValue@Enfold\tud@res@c%
          \def\tud@res@d{####1}%
          \trim@spaces@in\tud@res@d%
          \eappto\ProcessedArgument{%
            /\expandonce\tud@res@d/=\expandonce\tud@res@c=%
          }%
        }%
        \def\tud@res@a####1/####2\@nil{%
          \def\tud@res@d{####1}%
          \trim@spaces@in\tud@res@d%
          \edef\ProcessedArgument{{\expandonce\tud@res@d}}%
%    \end{macrocode}
% \ToDo{warum hier nicht \cs{AP@MarkupValue}?}[v2.07]
%    \begin{macrocode}
          \in@{=}{####2}%
          \ifin@%
            \tud@res@b####2\@nil%
          \else%
            \def\tud@res@d{####2}%
            \trim@spaces@in\tud@res@d%
            \eappto\ProcessedArgument{/\expandonce\tud@res@d/}%
          \fi%
        }%
        \tud@res@a##1\@nil%
        \appto\ProcessedArgument{##2}%
      \fi%
    }%
    \expandafter\tud@res@a\ProcessedArgument\@nil%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \ToDo{prüfen, ob etwas wie \texttt{=\cs{PMisc} aa=} angegeben wurde}[v2.07]
%    \begin{macrocode}
\newcommand*\AP@MarkupValue[2]{%
  \begingroup%
    \AP@MarkupDefault{#1}{#2}%
    \def\tud@res@a##1##2\@nil{%
%    \end{macrocode}
% Wird im Argument ein |=| gefunden, so wird alles Darauffolgende als Wert 
% erkannt und dem eigentlichen Hauptargument bei der Ausgabe angehangen. Das
% Makro, welches diesen Argumentprozessor verwendet, erhält als Ausgabe also
% entweder \marg{Schlüssel} oder \marg{Schlüssel}|=|\meta{Wert}|=| falls
% \cs{AP@MarkupValue} mit \marg{Schlüssel=Wert} verwendet wurde.
%    \begin{macrocode}
      \in@{=}{##1}%
      \ifin@%
        \def\tud@res@a####1=####2\@nil{%
          \def\tud@res@c{####2}%
          \PValue@Enfold\tud@res@c%
          \def\tud@res@d{####1}%
          \trim@spaces@in\tud@res@d%
%    \end{macrocode}
% Zum Schluss wird noch geprüft, ob ein boolscher Werte auch in der gewünschten 
% Notation angegeben wurden.
%    \begin{macrocode}
%%    \def\tud@res@c##1{%
%%      \tud@ifstrbool{##1}
%%        {\@tud@res@swatrue}{\@tud@res@swatrue}{\@tud@res@swafalse}%
%%      \if@tud@res@swa%
%%        \tud@if@strequal{##1}{true}{\@tud@res@swafalse}{}%
%%        \tud@if@strequal{##1}{false}{\@tud@res@swafalse}{}%
%%        \if@tud@res@swa%
%%          \ClassWarning{tudscrmanual}{%
%%            Boolean values should only be referred with\MessageBreak%
%%            'true/false' but '##1' was used%
%%          }%
%%        \fi%
%%      \fi%
%%    }%
%% TODO use to validate =...= within Value Processors (Parameter@Gobble)?
%%      \ifx\tud@res@a\tud@res@b\else%
%%        \def\tud@res@c##1<##2>##3\@nil{%
%%          \@tud@res@swafalse%
%%          \IfArgIsEmpty{##1}{}{\@tud@res@swatrue}%
%%          \IfArgIsEmpty{##3}{}{\@tud@res@swatrue}%
%%          \if@tud@res@swa%
%%            \ClassWarning{tudscrmanual}{%
%%              Enfolding text removed from parameter macro\MessageBreak%
%%              \detokenize\expandafter{\tud@res@a}%
%%            }%
%%          \fi%
%%          \def\tud@res@c##1####1##3\@nil{\def\tud@res@a{####1}}%
%%          \expandafter\tud@res@c\tud@res@a\@nil%
%%        }%
%%        \expandafter\tud@res@c\tud@res@b\@nil%
%%      \fi%
          \edef\ProcessedArgument{%
            {\expandonce\tud@res@d}=\expandonce\tud@res@c=\unexpanded{##2}%
          }%
        }%
        \tud@res@a##1\@nil%
      \fi%
    }%
    \expandafter\tud@res@a\ProcessedArgument\@nil%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
\newcommand*\AP@MarkupDefault[2]{%
  \begingroup%
    \in@{|}{#2}%
    \ifin@%
      \def\tud@res@a##1|##2\@nil{%
        \def\tud@res@d{##1}%
        \trim@spaces@in\tud@res@d%
        \edef\ProcessedArgument{{\expandonce\tud@res@d}}%
        \tud@if@strblank{##2}{%
          \in@{/}{##1}%
          \ifin@%
            \def\tud@res@b####1/####2\@nil{%
              \begingroup%
                \let\suffix\@firstofone%
                \Markup@Suffix@@Select[\edef\tud@res@c]{}{KeyVal@Parameter}%
                \trim@spaces@in\tud@res@c%
                \eappto\tud@res@c{: \csname #1\endcsname*{####1}}%
                \edef\tud@res@c{%
                  \endgroup%
                  \unexpanded{\appto\ProcessedArgument}{%
                    [{\noexpand\suffix{\expandonce\tud@res@c}}]%
                  }%
                }%
              \tud@res@c%
            }%
            \tud@res@b##1\@nil%
          \else%
            \appto\ProcessedArgument{[{\Markup@Suffix@@Select{}{#1}}]}%
          \fi%
        }{%
          \appto\ProcessedArgument{[{##2}]}%
        }%
      }%
      \tud@res@a#2\@nil%
    \else%
      \def\tud@res@d{#2}%
      \trim@spaces@in\tud@res@d%
      \edef\ProcessedArgument{{\expandonce\tud@res@d}}%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@MarkupDefault
% \end{macro}^^A \AP@MarkupValue
% \end{macro}^^A \AP@MarkupKey
% \begin{macro}{\AP@Underscore}
% \changes{v2.07}{2019/11/08}{neu}^^A
% Mit diesem Argumentprozessor werden Unterstriche in Datei- und Pfadangaben 
% unschädlich gemacht.
%    \begin{macrocode}
\newcommand*\AP@Underscore[1]{%
  \begingroup%
    \def\tud@res@a{#1}%
    \tud@replace@in\tud@res@a{_}{\_}%
    \edef\tud@res@a{%
      \endgroup%
      \def\noexpand\ProcessedArgument{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@Underscore
% \begin{macro}{\Markup@Expandable}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dieser Befehl definiert alle Markup-Befehle in der Form um, dass diese nur 
% noch das eigentliche Hauptargument unformatiert durchreichen. Dies wird für 
% die Erstellung von Label und Indexeinträgen benötigt. Die Sternversion führt 
% dies auch noch für die Auszeichnung von Parametern etc. durch.
% \ToDo{\cs{Markup@[@]Expandable} und \cs{Misc@Expandable} notwendig?}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Markup@Expandable{!s}{%
  \begingroup%
    \def\tud@res@a{\endgroup}%
    \def\do##1{\appto\tud@res@a{\csletcs{##1}{@##1}}}%
    \dolistloop{\tud@markup@list}%
  \tud@res@a%
%    \end{macrocode}
% \ToDo{entkoppeln?}[v2.06]
%    \begin{macrocode}
  \IfBooleanF{#1}{%
    \Markup@@Expandable%
    \Parameter@Expandable%
    \Misc@Expandable%
  }%
}
\newcommand*\Markup@@Expandable{%
  \def\KOMAScript{KOMA-Script\space}%
  \def\TUDScript{TUD-Script\space}%
  \def\CD{Corporate Design\space}%
  \def\CDs{Corporate Designs\space}%
  \def\TUD{Technische Universit\"at Dresden\space}%
  \def\TnUD{Technischen Universit\"at Dresden\space}%
  \def\DDC{DRESDEN-concept\space}%
  \def\OpenSans{Open Sans\space}%
  \def\Univers{Univers\space}%
  \def\DIN{DIN Bold\space}%
}
\newcommand*\Misc@Expandable{%
  \def\suffix##1{\space##1}%
  \def\idxsuffix##1{\space##1}%
  \let\nosuffix\@firstofone%
  \let\seeplain\@seeplain%
  \let\Logo\@firstofone%
  \let\emph\@firstofone%
  \let\texttt\@firstofone%
  \def~{\space}%
  \def\nobreakspace{\space}%
  \def\dots{...}%
  \def\_{_}%
}
%    \end{macrocode}
% Mit dem zuvor definierten Makro \cs{Markup@Expandable} wird gleich dafür
% Sorge getragen, dass die Auszeichnungsbefehle für PDF-Outline-Einträge
% korrekt funktionieren.
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
  \expandafter\pdfstringdefDisableCommands\expandafter{\Markup@Expandable}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Expandable
% \begin{macro}{\tud@if@markup}
% \begin{macro}{\Markup@Gobble}
% \begin{macro}{\Markup@Gobble@Extra}
% \begin{macro}{\tud@markup@detokenize}
%    \begin{macrocode}
\NewDocumentCommand\tud@if@markup{s m}{%
  \begingroup%
    \@tud@res@swafalse%
    \tud@if@strblank{#2}{}{%
      \Markup@Gobble%
      \tud@if@strblank{#2}{\@tud@res@swatrue}{}%
    }%
    \if@tud@res@swa%
      \aftergroup\@firstoftwo%
    \else%
      \IfBooleanF{#1}{%
        \protected@edef\tud@res@a{#2}%
        \ClassWarning{tudscrmanual}{%
          `\detokenize\expandafter{\tud@res@a}' is not a markup command%
        }%
      }%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% In eingen Fällen ist es beim Aufruf eines Markup-Befehls nicht erwünscht, 
% dass dieser auch tatsächlich ausgegeben wird. Für diesen Fall wird gleich zu
% Beginn der Befehl \cs{Markup@Gobble} definiert, der dies ermöglicht.
%    \begin{macrocode}
\newcommand*\Markup@Gobble{%
  \begingroup%
    \def\tud@res@a{\endgroup}%
    \def\do##1{\appto\tud@res@a{\csletcs{##1}{##1@Gobble}}}%
    \dolistloop{\tud@markup@list}%
  \tud@res@a%
}
\newcommand*\Markup@Gobble@Extra{}
\def\Markup@Gobble@Extra#1|#2\relax{#1}
\newcommand*\tud@markup@detokenize[2]{%
  \detokenize\expandafter{\@backslashchar#1{#2}}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@markup@detokenize
% \end{macro}^^A \Markup@Gobble@Extra
% \end{macro}^^A \Markup@Gobble
% \end{macro}^^A \tud@if@markup
% \ToDo{\cs{GetDocumentCommandArgSpec}\cs{Process@Markup} raus}[v2.06]
% \ToDo{Markup@[Inner/Outer/Main]@Get hier hin}[v2.06]
% \begin{macro}{\Distribution}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\TeXLive}
% \begin{macro}{\MacTeX}
% \begin{macro}{\MiKTeX}
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Distribution. Für die 
% gebräuchlisten Varianten werden spezifische Befehle definiert. Diese erzeugen 
% zusätzlich einen Untereintrag im Index.
%    \begin{macrocode}
\NewMarkupCommand\Distribution[%
  lvl=0,idx=true:\DistributionGeneral@@IndexEntry%
](\textsbn){Distribution}
\NewDocumentCommand\TeXLive{!t' !d|| !d''}{%
  \Distribution|#2|'#3'{\Logo{TeXLive}\IfBooleanT{#1}{\nobreakspace Portable}}%
  \DistributionGeneral@IndexEntry{#2}\xspace%
}
\NewDocumentCommand\MacTeX{!t' !d|| !d''}{%
  \Distribution|#2|'#3'{\Logo{MacTeX}\IfBooleanT{#1}{\nobreakspace Portable}}%
  \DistributionGeneral@IndexEntry{#2}\xspace%
}
\NewDocumentCommand\MiKTeX{!t' !d|| !d''}{%
  \Distribution|#2|'#3'{\Logo{MiKTeX}\IfBooleanT{#1}{\nobreakspace Portable}}%
  \DistributionGeneral@IndexEntry{#2}\xspace%
}
%    \end{macrocode}
% \end{macro}^^A \MiKTeX
% \end{macro}^^A \MacTeX
% \end{macro}^^A \TeXLive
% \end{macro}^^A \Distribution
% \begin{macro}{\DistributionGeneral}
% \begin{macro}{\@DistributionGeneral}
% \begin{macro}{\DistributionGeneral@IndexEntry}
% \begin{macro}{\DistributionGeneral@@IndexEntry}
% Die Befehle für die Beschreibung einer allgemeinen \Logo{LaTeX}-Distribution.
%    \begin{macrocode}
\NewDocumentCommand\DistributionGeneral{!s !d||}{%
  \Logo{LaTeX}\mbox{-}Distribution\IfBooleanT{#1}{en}%
  \DistributionGeneral@IndexEntry{#2}\xspace%
}
\newcommand*\@DistributionGeneral{LaTeX-Distribution}%
\NewDocumentCommand\DistributionGeneral@IndexEntry{m}{%
  \begingroup%
    \tud@idx@attribute@get\tud@res@a{#1}%
    \ifx\tud@res@a\relax\else%
      \ifx\tud@res@a\@empty\else%
        \preto\tud@res@a{|}%
      \fi%
      \epreto\tud@res@a{\DistributionGeneral@@IndexEntry}%
      \expandafter\index\expandafter{\tud@res@a}%
    \fi%
  \endgroup%
}
\newcommand*\DistributionGeneral@@IndexEntry{}
\edef\DistributionGeneral@@IndexEntry{%
  \detokenize\expandafter{\@DistributionGeneral @{\DistributionGeneral}}%
}
%    \end{macrocode}
% \end{macro}^^A \DistributionGeneral@@IndexEntry
% \end{macro}^^A \DistributionGeneral@IndexEntry
% \end{macro}^^A \@DistributionGeneral
% \end{macro}^^A \DistributionGeneral
% \begin{macro}{\Format}
% \changes{v2.05}{2015/11/04}{neu}^^A
% Die Auszeichnung und der Indexeintrag für ein bestimmtes Textsatzsystem.
%    \begin{macrocode}
\NewMarkupCommand\Format[lvl=1](\sbnfont\Logo){Textsatzsystem}
%    \end{macrocode}
% \end{macro}^^A \Format
% \begin{macro}{\Bundle}
% Die Auszeichnung und der Indexeintrag einer Klasse. Das optionale Argument 
% zwischen Apostrophen kann für die Formatierung eines Querverweises im Text
% genutzt werden, das optionale Argument zwischen senkrechten Strichen dient
% der Formatierung des Indexeintrages.
%    \begin{macrocode}
\NewMarkupCommand\Bundle[lvl=1,idx=false](\textsbn){Bundle}
%    \end{macrocode}
% \end{macro}^^A \Bundle
% \begin{macro}{\Class}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer Klasse. Das optionale Argument 
% zwischen Apostrophen kann für die Formatierung eines Querverweises im Text
% genutzt werden, das optionale Argument zwischen senkrechten Strichen dient
% der Formatierung des Indexeintrages.
%    \begin{macrocode}
\NewMarkupCommand\Class[lvl=2,idx=files](\textsbn){Klasse}
%    \end{macrocode}
% \end{macro}^^A \Class
% \begin{macro}{\Package}
% \changes{v2.02}{2014/07/10}{Ausgabe für Änderungsliste hinzugefügt}^^A
% Für die Auszeichnungen von Paketen gelten vorherigen Aussagen äquivalent. 
% Für Pakete wird ergänzend ein Hyperlink auf CTAN erzeugt, wenn für dieses 
% kein Label im Dokument besteht. Genaueres ist der Beschreibung und Definition 
% von \cs{Process@Markup} zu entnehmen. Das optionale Argument in einfachen
% Guillemets dient zum Anpassen des CTAN-Links, welcher normalerweise aus
% obligatorischen Argument generiert wird.
%    \begin{macrocode}
\NewMarkupCommand\Package[lvl=2,idx=files](\textsbn){Paket}
%    \end{macrocode}
% \end{macro}^^A \Package
% \begin{macro}{\Option}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Im Gegensatz zu den vorherigen Befehlen, kann im Hauptargument ein spezieller 
% Wert für eine Option optional durch ein |=| getrennt angegeben werden. Durch
% den Argumentprozessor \cs{Processor@KeyVal} wird dieses vom eigentlichen
% Schlüssel getrennt. Dabei wird der gegebene Schlüssel immer in der Form
% \marg{Schlüssel} ausgegeben. Sollte ein optionaler Wert gegeben worden sein, 
% wird dieser in der Form |=|\meta{Wert}|=| einfach angehängt und als optionales
% Argument von \cs{Option@Value} weiter verarbeitet. Mit dem optionalen Argument
% in runden Klammern kann ggf. auf eine Option aus einem  \TUDScript-Paket
% verwiesen werden.
% \ToDo{
%   Eigentlich sollte der Wert hier formatiert werden. Wünschenswert wäre die 
%   Angabe von \val{Option=Wert} und \val{Option=<Spezialwert>}, damit das 
%   Gezerre mit der Spezialbehandlung von \cs{PSet} etc. wegfallen könnte,
%   siehe \cs{tud@declare@start}
% }[v2.??]
%    \begin{macrocode}
\NewMarkupCommand\Option[idx=options,type=value]'c'{Option}
%    \end{macrocode}
% \end{macro}^^A \Option
% \begin{macro}{\Environment}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Bei diesem Makro dient das optionale Argument für die Ausgabe der möglichen 
% Umgebungsargumente bzw. -parameter \emph{bei der Deklaration}. 
%
% Außerdem wird für den Fall, dass der \cs{Environment}-Befehl innerhalb der
% Umgebung \env{Declaration} verwendet wird, eine spezielle Ausgabe erzeugt. 
% Nur hier kommt das optionale Argument von \cs{Markup@Format@Set} nach dem
% Hauptargument zum Tragen. Die resultierende Ausgabe hat die Gesatlt:
%
% \begin{tabular}{l}
%   \cs{begin}\marg{Umgebung}\tabularnewline
%   \dots\tabularnewline
%   \cs{end}\marg{Umgebung}\tabularnewline
% \end{tabular}
%    \begin{macrocode}
\Markup@InlineDeclare@Format@Set{Environment}{%
  \texttt{%
    \bsc{}begin\textbraceleft#1\textbraceright\IfValueT{#3}{#3}%
    \dots%
    \bsc{}end\textbraceleft#1\textbraceright%
  }%
}
\Markup@Declare@Format@Set{Environment}{%
  \begin{tabular}[t]{@{}l@{}}%
  \texttt{\bsc{}begin\textbraceleft#1\textbraceright\IfValueT{#3}{#3}}%
  \tabularnewline\texttt{\quad\raisebox{-.3\dp\@arstrutbox}[0pt][0pt]{\vdots}}%
  \tabularnewline\texttt{\bsc{}end\textbraceleft#1\textbraceright}%
  \end{tabular}%
}
\NewMarkupCommand\Environment[idx=macros,type=param]{Umgebung}
%    \end{macrocode}
% \end{macro}^^A \Environment
% \begin{macro}{\Macro}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag eines Befehls. Das ordinäre optionale 
% Argument ist für das Anhängen von Parametern o.\,ä. nach dem eigentlichen 
% Makro zu verwenden. Das optionale Argument in runden Klammern dient dem
% Hyperlink zu einem Befehl aus einem anderen Paket oder einer anderen Klasse
% aus dem \TUDScript-Bundle.
%    \begin{macrocode}
\NewMarkupCommand*\Macro[idx=macros,type=param]'c'{Befehl}
%    \end{macrocode}
% \end{macro}^^A \Macro
% \begin{macro}{\KeyVal@Parameter}
% \changes{v2.05}{2015/11/02}{neu}^^A
% Die Auszeichnung und der Indexeintrag eines Parameters für Umgebungen und 
% Befehle. Das erste Argument ist die Umgebung oder der Befehl, wofür der 
% Parameter gültig ist. Das zweite Argument ist der Parameter selbst. Die 
% optionale Zuweisung eines Wertes kann äquivalent zu \cs{Option} mit dem
% Trennzeichen~|=| im Hauptargument erfolgen.
% \ToDo{
%   Eigentlich sollte der Wert hier formatiert werden. Die Angabe von
%   \val{Parameter=Wert} und \val{Parameter=<Spezialwert>} wäre gut, damit
%   das Gezerre mit der Spezialbehandlung von \cs{PSet} etc. wegfallen könnte,
%   siehe \cs{tud@declare@start}
% }[v2.??]
% \ToDo{undef \cs{KeyVal@Parameter} damit nicht direkt verwendbar}[v2.06]
% \ToDo{wie idx, ety, lvl setzen?}[v2.06]
%    \begin{macrocode}
\NewMarkupCommand\KeyVal@Parameter[idx=macros](\textttit)<\quad>''{Parameter}
%    \end{macrocode}
% \end{macro}^^A \KeyVal@Parameter
% \begin{macro}{\Length}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Länge.
%    \begin{macrocode}
\NewMarkupCommand*\Length[idx=misc]'dic'{L\"ange}
%    \end{macrocode}
% \end{macro}^^A \Length
% \begin{macro}{\Counter}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer \LaTeX-Zählers.
%    \begin{macrocode}
\NewMarkupCommand\Counter[idx=misc]'dic'{Z\"ahler}
% \end{macro}^^A \Counter
% \begin{macro}{\Term}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag eines sprachabhängigen Bezeichners.
%    \begin{macrocode}
\NewMarkupCommand*\Term[idx=terms]'dc'{Bezeichner}
%    \end{macrocode}
% \end{macro}^^A \Term
% \begin{macro}{\PageStyle}
% \changes{v2.02}{2014/07/25}{neu}^^A
% Die Auszeichnung und der Indexeintrag eines Seitenstils.
%    \begin{macrocode}
\NewMarkupCommand\PageStyle[idx=elements]'dic'{Seitenstil}
%    \end{macrocode}
% \end{macro}^^A \PageStyle
% \begin{macro}{\Font}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag eines Schriftelementes.
%    \begin{macrocode}
\NewMarkupCommand\Font[idx=elements]'dic'{Schriftelement}
%    \end{macrocode}
% \end{macro}^^A \Font
% \begin{macro}{\Color}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer Farbe des \CDs. Das optionale 
% Argument kann sowohl bei der Deklaration als auch im Fließtext für das 
% Anhängen eines Suffix verwendet werden. Alle mit \cs{Color} ausgezeichneten 
% Farben referenzieren standardmäßig auf das Paket \pkg{tudscrcolor}.
%    \begin{macrocode}
\NewMarkupCommand\Color[idx=elements]'dic'{Farbe}
%    \end{macrocode}
% \end{macro}^^A \Color
% \begin{macro}{\Application}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer Anwendungssoftware.
%    \begin{macrocode}
\NewMarkupCommand\Application[lvl=0](\textsbi){Anwendungssoftware}
%    \end{macrocode}
% \end{macro}^^A \Application
% \begin{macro}{\Tutorial}
% Die Auszeichnung und der Indexeintrag eines Tutorials.
%    \begin{macrocode}
\NewMarkupCommand\Tutorial[lvl=-2>0..1,idx=files](\textsbn){Tutorial}
%    \end{macrocode}
% \end{macro}^^A \Tutorial
% \begin{macro}{\File}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% Die Auszeichnung und der Indexeintrag einer Datei.
%    \begin{macrocode}
\NewMarkupCommand\File[lvl=-2>0..1,idx=files](\texttt)'c'{Datei}
%    \end{macrocode}
% \end{macro}^^A \File
% \begin{macro}{\Path}
\NewDocumentCommand\Path{>{\AP@Underscore}m}{\mbox{\texttt{#1}}}
% \end{macro}^^A \Path
%
% \subsection{Namensraum für unterschiedliche Entitäten}
%
% Um eventuell identisch benannte Befehle und die dazu passenden Indexeinträge 
% für unterschiedliche Bundle, Pakete oder Klassen zu ermöglichen, wird ein
% Namensraum für diese eingeführt.
%
% \begin{environment}{Entity}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@ety@crnt}
% \changes{v2.05}{2015/08/04}{neu}^^A
% \begin{macro}{\tud@ety@dflt}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@ety@gnrl}
% \changes{v2.05}{2015/08/04}{neu}^^A
% Diese Makros werden für das Definieren eines Entitätelements und ggf. das 
% Prüfen des selbigen benötigt.
% \ToDo{Suffixe wie Klasse, Paket etc. lokalisieren (locale)}[v2.??]
%    \begin{macrocode}
\newcommand*\tud@ety@crnt{}
\newcommand*\tud@ety@dflt{\Bundle{tudscr}}
\newcommand*\tud@ety@gnrl{+general+}
%    \end{macrocode}
% Die Umgebung \env{Entity} kann nicht verschachtelt werden und prüft zuerst 
% dementsprechend die Verwendung. Anschließend wird lediglich das Makro 
% \cs{tud@ety@crnt} auf das übergebene Argument gesetzt, um innerhalb der 
% Umgebung erstellte Label und Indexeinträge zu beeinflussen.
% \ToDo{Pflicht in Paket \pkg{tudscrmanual}?}[v2.07]
% \ToDo{automatische Links ins handbuch aus treatise?}[v2.07]
%    \begin{macrocode}
\NewDocumentEnvironment{Entity}{m}{%
  \Entity@Level@@Validate{1}{2}{#1}{\Markup@Main@Get\tud@ety@crnt{#1}}%
  \ignorespaces%
}{%
  \aftergroup\ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \tud@ety@gnrl
% \end{macro}^^A \tud@ety@dflt
% \end{macro}^^A \tud@ety@crnt
% \end{environment}^^A Entity
% \begin{macro}{\Entity@Level@Get}
% \begin{macro}{\If@Entity@Level@Valid@TF}
% \begin{macro}{\Entity@Level@Validate}
% \begin{macro}{\Entity@Level@@Validate}
% \begin{macro}{\Entity@Level@@@Validate}
%    \begin{macrocode}
\newcommand*\Entity@Level@Get[2]{%
  \begingroup%
    \edef\tud@res@a{\csuse{Entity@@Level@@#2}}%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\expandafter\@firstoftwo\tud@res@a}%
    }%
  \tud@res@a%
}
\newcommand*\Entity@Level@Validate[2]{%
  \begingroup%
    \edef\tud@res@a{\csuse{Entity@@Level@@#1}}%
    \edef\tud@res@a{\expandafter\@secondoftwo\tud@res@a}%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\Entity@Level@@Validate\tud@res@a%
    }%
  \tud@res@a{#2}%
}
\newcommand*\Entity@Level@@Validate[3]{%
  \begingroup%
    \tud@if@markup{#3}{%
      \Markup@Split@Get*\tud@res@a{#3}%
      \edef\tud@res@b{\csuse{Entity@@Level@@\expandafter\@firstoftwo\tud@res@a}}%
      \edef\tud@res@b{%
        \noexpand\If@Entity@Level@Valid@TF{#1}{#2}{%
          \expandafter\@firstoftwo\tud@res@b%
        }%
      }%
      \tud@res@b{%
        \aftergroup\@firstofone%
      }{%
        \let\tud@res@b\@empty%
        \forlistloop{%
          \Entity@Level@@@Validate\tud@res@b{#1}{#2}%
        }{\tud@markup@list}%
        \ClassError{tudscrmanual}{Invalid entity found}{%
          The given entity `\expandafter\tud@markup@detokenize\tud@res@a'%
          \MessageBreak can not be used here, %
          \ifx\tud@res@b\@empty%
            no entities are valid.%
          \else%
            valid entities are: \tud@res@b%
          \fi%
        }%
        \aftergroup\@gobble%
      }%
    }{%
      \aftergroup\@gobble%
    }%
  \endgroup%
}
\newcommand*\Entity@Level@@@Validate[4]{%
  \begingroup%
    \edef\tud@res@a{\expandafter\expandafter\expandafter\@firstoftwo%
      \csname Entity@@Level@@#4\endcsname%
    }%
    \If@Entity@Level@Valid@TF{#2}{#3}{\tud@res@a}{%
      \def\tud@res@b{\MessageBreak\tud@markup@detokenize{#4}{...}}%
    }{%
      \let\tud@res@b\@empty%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\appto#1}{\expandonce\tud@res@b}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \ToDo{1: min 2: max 3: current level}[v2.06]
%    \begin{macrocode}
\newcommand*\If@Entity@Level@Valid@TF[3]{%
  \begingroup%
    \@tud@res@swatrue%
    \ifnum\numexpr#1\relax>\numexpr#3\relax\@tud@res@swafalse\fi%
    \ifnum\numexpr#2\relax<\numexpr#3\relax\@tud@res@swafalse\fi%
    \if@tud@res@swa%
      \aftergroup\@firstoftwo%
    \else%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \Entity@Level@@@Validate
% \end{macro}^^A \Entity@Level@@Validate
% \end{macro}^^A \Entity@Level@Validate
% \end{macro}^^A \If@Entity@Level@Valid@TF
% \end{macro}^^A \Entity@Level@Get
%
% \subsubsection{Deklaration von Entitäten}
%
% \begin{macro}{\Entity@Declare}
% \begin{macro}{\tud@ety@aux@declare}
% \begin{macro}{\tud@ety@declare@auxlist}
% \begin{macro}{\tud@ety@declare@auxlist}
%    \begin{macrocode}
\tud@auxlist@register*{tud@ety@declare}
\newrobustcmd*\Entity@Declare[3]{%
  \tud@auxlist@add{tud@ety@declare}{\noexpand\tud@ety@aux@declare{#1}{#2}{#3}}%
}
\newrobustcmd*\tud@ety@aux@declare[3]{%
  \begingroup%
    \tud@if@strequal{\tud@ety@gnrl}{#3}{%
      \def\tud@res@a{\tud@ety@gnrl}%
    }{%
      \def\tud@res@a{#3}%
    }%
    \ifcsundef{Entity@@Declared@@#1@#2}{%
      \csxdef{Entity@@Declared@@#1@#2}{\expandonce\tud@res@a}%
    }{%
      \csxappto{Entity@@Declared@@#1@#2}{,\expandonce\tud@res@a}%
    }%
  \endgroup%
}
\@onlypreamble\tud@ety@aux@declare
%    \end{macrocode}
% \end{macro}^^A \tud@ety@declare@auxlist
% \end{macro}^^A \tud@ety@declare@auxlist
% \end{macro}^^A \tud@ety@aux@declare
% \end{macro}^^A \Entity@Declare
% \begin{macro}{\DefaultEntity}
% \begin{macro}{\Default@Entity}
% \begin{macro}{\DefaultEntityLink}
% \begin{macro}{\Default@Entity@Parent}
% \ToDo{\cs{Default@Entity@Parent} kryptisch}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\DefaultEntity{m d'' m}{%
  \begingroup%
    \ifundef\Default@Entity@Parent{\let\Default@Entity@Parent\@empty}{}%
    \tud@if@markup{#1}{%
      \Markup@Main@Get\tud@res@a{#1}%
      \protected@edef\tud@res@b{#2}%
      \IfValueF{#2}{%
        \Markup@Split@Get\tud@res@c{\tud@res@a}%
        \def\tud@res@d##1##2{%
          \tud@if@strequal{Bundle}{##1}{\def\tud@res@b{CTAN:##2}}{}%
        }%
        \expandafter\tud@res@d\tud@res@c%
      }%
      \edef\tud@res@a{%
        \noexpand\Default@Entity{\expandonce\tud@res@a}'\expandonce\tud@res@b'%
      }%
      \tud@res@a{#3}%
    }{}%
  \endgroup%
}
\@onlypreamble\DefaultEntity
%    \end{macrocode}
% \ToDo{Definition der Gobble-Version notwendig? Ggf. in Gruppe?}[v2.06]
%    \begin{macrocode}
\GetDocumentCommandArgSpec\DefaultEntity
\expandafter\NewExpandableDocumentCommand\expandafter%
    \Default@@Entity\expandafter{%
  \ArgumentSpecification%
}{}
\NewDocumentCommand\Default@Entity{m r'' m}{%
  \tud@toks@{}%
  \protected@edef\tud@res@a{#3}%
  \@for\tud@res@a:=\tud@res@a\do{%
    \trim@spaces@in\tud@res@a%
    \ifx\tud@res@a\@empty\else%
      \begingroup%
        \let\DefaultEntity\Default@@Entity%
%% \GetDocumentCommandArgSpec\DefaultEntity
%% \expandafter\DeclareExpandableDocumentCommand\expandafter\DefaultEntity%
%%  \expandafter{\ArgumentSpecification}{}
        \protected@edef\tud@res@b{\tud@res@a}%
        \trim@spaces@in\tud@res@b%
        \def\tud@res@c##1##2##3\@nil{##2}%
        \protected@edef\tud@res@d{%
          \endgroup%
          \ifx\tud@res@b\@empty%
            \unexpanded{\addto@hook\tud@toks@}{%
              \begingroup%
                \unexpanded{\def\Default@Entity@Parent}{#1}%
                \expandonce\tud@res@a%
              \endgroup%
            }%
            \unexpanded{\def\tud@res@a}{%
              \expandafter\tud@res@c\tud@res@a\@nil%
            }%
          \fi%
        }%
      \tud@res@d%
      \tud@if@markup{\tud@res@a}{%
        \Markup@Main@Get\tud@res@a{\tud@res@a}%
        \Markup@Split@@Get\tud@res@b{\tud@res@a}%
        \edef\tud@res@c{\expandafter\@firstoftwo\tud@res@b}%
        \expandafter\Entity@Level@Validate\expandafter{\tud@res@c}{#1}{%
          \def\tud@res@d##1##2{##1@##2}%
          \edef\tud@res@d{Entity@@Default@@\expandafter\tud@res@d\tud@res@b}%
          \ifcsdef{\tud@res@d}{%
            \Entity@Level@Get\tud@res@c{\tud@res@c}%
            \ifnum\tud@res@c<\thr@@\relax%
              \ClassWarning{tudscrmanual}{%
                The default entity `\csuse{\tud@res@d}'\MessageBreak%
                for `\tud@res@a' is overwritten\MessageBreak%
                with `\detokenize{#1}'%
              }%
              \csgdef{\tud@res@d}{#1}%
            \else%
              \csgappto{\tud@res@d}{,#1}%
            \fi%
          }{%
            \csgdef{\tud@res@d}{#1}%
          }%
        }%
      }{}%
    \fi%
  }%
  \IfValueT{#2}{\DefaultEntityLink{#1}(\Default@Entity@Parent)'#2'}%
  \the\tud@toks@%
}
%    \end{macrocode}
% \ToDo{\cs{DefaultEntityLink} nur als interne Variante?}[v2.06]
% \ToDo{wozu ist d() optional? \cs{Entity@Get} notwendig?}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\DefaultEntityLink{m d() r''}{%
  \begingroup%
    \tud@if@markup{#1}{%
      \tud@specialurl@validate{#3}{%
        \begingroup%
          \Markup@Split@Get\tud@res@a{#1}%
          \protected@edef\tud@res@b{\IfValueTF{#2}{#2}{}}%
          \edef\tud@res@b{%
            \unexpanded{\Entity@Get\tud@res@b}%
            \ifx\tud@res@b\@empty\else(\expandonce\tud@res@b)\fi%
            \expandonce\tud@res@a%
          }%
          \tud@res@b%
          \edef\tud@res@b{%
            \unexpanded{\tud@lbl@@get\tud@lbl@tmp}{%
              \expandonce\tud@res@a(\expandonce\tud@res@b)%
            }%
          }%
          \tud@res@b%
          \edef\tud@res@a{Entity@@Link@@\tud@lbl@tmp}%
          \ifcsdef{\tud@res@a}{%
            \ClassWarning{tudscrmanual}{%
              The default URL '\csuse{\tud@res@a}'\MessageBreak%
              for `\detokenize{#1}' is overwritten\MessageBreak%
              with '#3'%
            }%
          }{}%
          \csxdef{\tud@res@a}{#3}%
        \endgroup%
      }%
    }{}%
  \endgroup%
}
\@onlypreamble\DefaultEntityLink
%    \end{macrocode}
% \end{macro}^^A \Default@Entity@Parent
% \end{macro}^^A \DefaultEntityLink
% \end{macro}^^A \Default@Entity
% \end{macro}^^A \DefaultEntity
%
% \subsubsection{Verwendung von Entitäten}
%
% \begin{macro}{\Entity@Get}
%    \begin{macrocode}
\NewDocumentCommand\Entity@Get{s m d() m m}{%
  \begingroup%
    \Parameter@Expandable%
    \Misc@Expandable%
    \letcs\tud@res@b{Entity@@Declared@@#4@#5}%
    \letcs\tud@res@c{Entity@@Default@@#4@#5}%
%    \end{macrocode}
% \ToDo{doc: \cs{@tud@res@swa} als Schalter für gültiges Argument 3}[v2.06]
%    \begin{macrocode}
    \@tud@res@swafalse%
    \let\tud@res@a\@empty%
    \IfValueT{#3}{%
      \@tud@res@swatrue%
      \protected@edef\tud@res@d{#3}%
      \@for\tud@res@d:=\tud@res@d\do{%
        \trim@spaces@in\tud@res@d%
        \ifx\tud@res@d\@empty\else%
          \tud@if@strequal{!}{\tud@res@d}{%
            \let\tud@res@d\tud@ety@crnt%
          }{%
            \tud@if@strequal{*}{\tud@res@d}{%
              \ifundef\tud@res@c{%
                \let\tud@res@d\@empty%
                \ClassWarning{tudscrmanual}{%
                  There is no default entity for\MessageBreak%
                  `\tud@markup@detokenize{#4}{#5}'%
                }%
              }{%
                \let\tud@res@d\tud@res@c%
              }%
            }{}%
          }%
          \eappto\tud@res@a{%
            \ifx\tud@res@a\@empty\else,\fi\expandonce\tud@res@d%
          }%
        \fi%
      }%
    }%
    \ifx\tud@res@a\@empty%
      \if@tud@res@swa%
        \ClassWarning{tudscrmanual}{Setting an empty entity is not possible}%
        \@tud@res@swafalse%
      \fi%
      \let\tud@res@a\tud@ety@crnt%
    \fi%
    \let\tud@ety@found\@empty%
    \let\tud@ety@fallback\@empty%
    \ifnum\tud@declare@mode@num=\z@\relax%
      \let\tud@ety@valid\@empty%
      \ifundef\tud@res@b{}{\let\tud@ety@valid\tud@res@b}%
      \ifundef\tud@res@c{}{\eappto\tud@ety@valid{,\expandonce\tud@res@c}}%
      \@for\tud@res@d:=\tud@res@a\do{%
        \trim@spaces@in\tud@res@d%
        \ifx\tud@res@d\@empty\else%
          \protected@expandtwoargs\in@%
              {,\detokenize\expandafter{\tud@res@d},}%
              {,\detokenize\expandafter{\tud@ety@valid},}%
          \ifin@%
            \eappto\tud@ety@found{%
              \ifx\tud@ety@found\@empty\else,\fi\expandonce\tud@res@d%
            }%
          \else%
            \if@tud@res@swa%
              \ClassWarning{tudscrmanual}{%
                The entity `\detokenize\expandafter{\tud@res@d}'\MessageBreak%
                for `\tud@markup@detokenize{#4}{#5}' was never set%
              }%
              \eappto\tud@ety@fallback{%
                \ifx\tud@ety@fallback\@empty\else,\fi\expandonce\tud@res@d%
              }%
            \fi%
          \fi%
        \fi%
      }%
      \ifx\tud@ety@found\@empty%
        \ifundef\tud@res@b{%
          \ifundef\tud@res@c{}{\let\tud@ety@found\tud@res@c}%
        }{\let\tud@ety@found\tud@res@b}%
      \fi%
    \else%
      \let\tud@ety@found\tud@res@a%
      \if@tud@res@swa\else%
        \ifundef\tud@res@c{}{%
%    \end{macrocode}
% \ToDo{doc: \cs{tud@res@a} ggf. leer, wenn \cs{tud@ety@crnt} leer}[v2.06]
%    \begin{macrocode}
          \ifx\tud@ety@found\@empty%
            \let\tud@ety@found\tud@res@c%
          \fi%
          \ifx\tud@ety@found\tud@res@c\else%
            \ifnum\tud@declare@mode@num>\z@\relax%
              \ClassWarning{tudscrmanual}{%
                The entity for `\tud@markup@detokenize{#4}{#5}'\MessageBreak%
                should be given explicitly or by value:\MessageBreak%
                (*) for \tud@res@c\MessageBreak%
                (!) for \tud@ety@crnt%
              }%
            \fi%
          \fi%
        }%
      \fi%
    \fi%
    \let\tud@ety@valid\@empty%
    \@for\tud@res@d:=\tud@ety@found\do{%
      \trim@spaces@in\tud@res@d%
      \ifx\tud@res@d\@empty\else%
        \@tud@res@swafalse%
        \tud@if@strequal{\tud@ety@gnrl}{\tud@res@d}{%
          \@tud@res@swatrue%
          \def\tud@res@d{\tud@ety@gnrl}%
        }{%
          \Entity@Level@Validate{#4}{\tud@res@d}{%
            \@tud@res@swatrue%
            \Markup@Main@Get\tud@res@d{\tud@res@d}%
          }%
        }%
        \if@tud@res@swa%
          \protected@expandtwoargs\in@%
              {,\detokenize\expandafter{\tud@res@d},}%
              {,\detokenize\expandafter{\tud@ety@valid},}%
          \ifin@\else%
            \eappto\tud@ety@valid{%
              \ifx\tud@ety@valid\@empty\else,\fi\expandonce\tud@res@d%
            }%
          \fi%
        \fi%
      \fi%
    }%
    \ifx\tud@ety@fallback\@empty%
      \ifx\tud@ety@valid\@empty%
        \IfBooleanF{#1}{%
          \ifnum\tud@declare@mode@num>\m@ne\relax%
            \Entity@Level@Get\tud@res@a{#4}%
            \ifnum\tud@res@a>\@ne\relax%
              \ClassWarning{tudscrmanual}{%
                No entity could be found for\MessageBreak%
                `\tud@markup@detokenize{#4}{#5}'%
              }%
            \fi%
          \fi%
        }%
        \def\tud@ety@valid{\tud@ety@gnrl}%
      \fi%
    \else%
      \ifx\tud@ety@valid\@empty%
        \ClassWarning{tudscrmanual}{%
          No entity could be validated for\MessageBreak%
          `\tud@markup@detokenize{#4}{#5}', so using given\MessageBreak%
          `\expandonce\tud@ety@fallback' instead%
        }%
        \let\tud@ety@valid\tud@ety@fallback%
      \else%
        \ClassWarning{tudscrmanual}{%
          Valid entity `\expandonce\tud@ety@valid'\MessageBreak%
          found for `\tud@markup@detokenize{#4}{#5}', dropping\MessageBreak%
          `\expandonce\tud@ety@fallback'%
        }%
      \fi%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#2}{\expandonce\tud@ety@valid}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Entity@Get
% \begin{macro}{\Entity@Seek}
% \begin{macro}{\Entity@@Seek}
% \begin{macro}{\if@tud@ety@seek}
% \begin{macro}{\tud@ety@encountered}
%    \begin{macrocode}
\tud@newif\if@tud@ety@seek
\newcommand*\tud@ety@encountered{}
\NewDocumentCommand\Entity@Seek{d() m m m}{%
  \@tud@ety@seektrue%
  \let\tud@ety@encountered\@empty%
  \@whilesw\if@tud@ety@seek\fi{%
    \Entity@@Seek(#1){#2}{#3}{#4}%
  }%
}
\NewDocumentCommand\Entity@@Seek{d() m m m}{%
  \begingroup%
    \tud@declare@mode@num=\z@\relax%
    \if@tud@ety@seek%
      \IfValueTF{#1}{%
        \protected@edef\tud@res@a{#1}%
      }{%
        \Entity@Get*\tud@res@a{#2}{#3}%
      }%
      \tud@if@strequal{\tud@ety@gnrl}{\tud@res@a}{\let\tud@res@a\@empty}{}%
      \ifx\tud@res@a\@empty\else%
        \protected@expandtwoargs\in@{,}{\tud@res@a}%
        \ifin@%
          \ClassWarning{tudscrmanual}{%
            Multiple entities for `\tud@markup@detokenize{#2}{#3}'\MessageBreak%
            (\tud@res@a),\MessageBreak%
            resolution was not successful%
          }%
          \let\tud@res@a\@empty%
        \else%
          \Markup@Split@Get\tud@res@b{\tud@res@a}%
        \fi%
      \fi%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \if@tud@ety@seek%
        \ifx\tud@res@a\@empty%
          \noexpand\@tud@ety@seekfalse%
        \else%
          \unexpanded{\def\tud@ety@encountered}{\expandonce\tud@res@a}%
          \unexpanded{#4}%
          \noexpand\Entity@@Seek\expandonce\tud@res@b{\unexpanded{#4}}%
        \fi%
      \fi%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@ety@encountered
% \end{macro}^^A \if@tud@ety@seek
% \end{macro}^^A \Entity@@Seek
% \end{macro}^^A \Entity@Seek
% \begin{macro}{\Entity@Link@Get}
% \begin{macro}{\Entity@Link@Seek}
% \begin{macro}{\Entity@Link@@Seek}
% \ToDo{wozu \cs{tud@lbl@get}?}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Entity@Link@Get{m m}{%
  \tud@truncate@value#1{#2}%
  \letcs#1{Entity@@Link@@#1}%
  \ifundef#1{\let#1\@empty}{}%
}
\NewDocumentCommand\Entity@Link@Seek{m d'' d<> d() m m}{%
  \begingroup%
    \let\tud@res@a\@empty%
    \@tud@res@swatrue%
%    \end{macrocode}
% \ToDo{doc: Suche für lvl>2 nur, wenn '' gegeben}[v2.06]
%    \begin{macrocode}
    \Entity@Level@Get\tud@res@d{#5}%
    \ifnum\tud@res@d>\tw@\relax%
      \IfValueF{#2}{\@tud@res@swafalse}%
    \fi%
    \if@tud@res@swa%
      \IfValueT{#3}{\Entity@Link@Get\tud@res@a{#3}}%
      \ifx\tud@res@a\@empty%
        \def\tud@res@b{{#5}{#6}}%
        \Entity@Seek(#4){#5}{#6}{%
          \Entity@Link@@Seek\tud@res@a{\tud@res@b}{\tud@ety@encountered}%
          \Markup@Split@@Get\tud@res@b{\tud@ety@encountered}%
        }%
        \ifx\tud@res@a\@empty%
          \Entity@Link@@Seek\tud@res@a{\tud@res@b}{\tud@ety@gnrl}%
        \fi%
      \fi%
      \IfValueT{#2}{%
        \tud@if@strequal{*}{#2}{%
          \ifx\tud@res@a\@empty%
            \ClassWarning{tudscrmanual}{%
              There is no default link for\MessageBreak%
              `\tud@markup@detokenize{#5}{#6}'%
            }%
          \fi%
        }{%
          \ifx\tud@res@a\@empty%
            \tud@specialurl@validate{#2}{\edef\tud@res@a{#2}}%
          \else%
            \ClassWarning{tudscrmanual}{%
              The special link '#2' was not used as\MessageBreak%
              a default one '\tud@res@a'\MessageBreak exists%
            }%
          \fi%
        }%
      }%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@res@a}%
    }%
  \tud@res@a%
}
\newcommand*\Entity@Link@@Seek[3]{%
  \expandafter\tud@lbl@@get\expandafter#1\expandafter{#2(#3)}%
  \Entity@Link@Get#1{#1}%
  \ifx#1\@empty\else\@tud@ety@seekfalse\fi%
}
%    \end{macrocode}
% \end{macro}^^A \Entity@Link@@Seek
% \end{macro}^^A \Entity@Link@Seek
% \end{macro}^^A \Entity@Link@Get
%
% \subsection{Erstellung und Validierung von Labeln}
%
% \begin{macro}{\tud@lbl@get}
% \changes{v2.05}{2015/11/03}{neu}^^A
% \begin{macro}{\tud@lbl@@get}
% \begin{macro}{\tud@lbl@@@get}
% \begin{macro}{\tud@lbl@tmp}
% \changes{v2.05}{2015/11/03}{neu}^^A
% Für \cs{tud@lbl@get} wird das zweite obligatorische Argument für gewöhnlich
% in der Form |\Class/\Package/\Bundle|\marg{\dots}|:\Markup|\marg{Element}
% gegeben und mit dem Argumentprozessor \cs{Processor@CreateLabel} in die Form
% \meta{Entitätpräfix}|:|\meta{Labelpräfix}|:|\meta{Element} gewandelt.
%    \begin{macrocode}
\newcommand*\tud@lbl@tmp{}
\NewDocumentCommand\tud@lbl@get{m m}{%
  \begingroup%
    \Markup@Inner@Get\tud@res@a{#2}%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\tud@lbl@@get#1}{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@lbl@@get{m m}{%
  \begingroup%
    \tud@lbl@@@get#2%
    \protected@edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@lbl@tmp}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@lbl@@@get{o m m d// d== o d|| d'' r()}{%
  \begingroup%
    \protected@edef\tud@res@a{#9}%
    \ifx\tud@res@a\tud@ety@gnrl\else%
      \let\tud@res@b\@empty%
      \def\tud@res@c##1##2\@nil{%
        \ifx\tud@res@b\@empty\else%
          \appto\tud@res@b{+}%
        \fi%
        \appto\tud@res@b{##1(##2)}%
      }%
      \@for\tud@res@d:=\tud@res@a\do{%
        \trim@spaces@in\tud@res@d%
        \ifx\tud@res@d\@empty\else%
          \Markup@Split@Get\tud@res@d{\tud@res@d}%
          \expandafter\tud@res@c\tud@res@d\@nil%
        \fi%
      }%
      \ifx\tud@res@b\@empty%
        \let\tud@res@a\tud@ety@gnrl%
      \else%
        \let\tud@res@a\tud@res@b%
      \fi%
    \fi%
%    \end{macrocode}
% \ToDo{expandierbare Definitionen in Makro oder \cs{Misc@Expandable}?}[v2.06]
%    \begin{macrocode}
    \let\Logo\@firstofone%
    \def~{\space}%
    \def\nobreakspace{\space}%
    \def\dots{...}%
    \def\_{_}%
    \Parameter@Expandable%
    \protected@edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\tud@lbl@tmp}{%
        \tud@res@a:#2:#3\IfValueT{#4}{/#4}\IfValueT{#5}{=#5}%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@lbl@tmp
% \end{macro}^^A \tud@lbl@@@get
% \end{macro}^^A \tud@lbl@@get
% \end{macro}^^A \tud@lbl@get
% \begin{macro}{\tud@if@lbl@exists}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit dem Befehl \cs{tud@if@lbl@exists} wird die Existenz eines Labels in der 
% Form \meta{Entitätpräfix}|:|\meta{Labelpräfix}|:|\meta{Element} geprüft. 
% Je nachdem, ob ein existierendes Label gefunden wird oder nicht, wird das
% zweite oder das dritte obligatorische Argument ausgeführt.
%    \begin{macrocode}
\newcommand*\tud@if@lbl@exists[3]{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\ifcsundef{r@#1}%
    }%
  \tud@res@a{#3}{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@if@lbl@exists
% \begin{macro}{\tud@lbl@declare}
% \begin{macro}{\tud@lbl@alias@values}
% \begin{macro}{\tud@lbl@alias@auxlist}
% Die Verwendung von \cs{detokenize} ist notwendig, damit mögliche Unterschiede 
% bei den catcodes von Labeln ignoriert und nur die Strings selbst verglichen
% werden.
%    \begin{macrocode}
\newcommand*\tud@lbl@alias@values{}
\tud@auxlist@register(\detokenize\expandafter){tud@lbl@alias}
\NewDocumentCommand\tud@lbl@declare{s d'' d== m}{%
  \begingroup%
    \protected@edef\tud@res@a{#4}%
    \tud@truncate@value\tud@res@c{\tud@res@a}%
    \IfValueTF{#3}{%
      \protected@edef\tud@res@b{#3}%
      \tud@if@strequal{\PBoolean}{\tud@res@b}{%
        \preto\tud@lbl@alias@values{true,false,}%
      }{}%
      \ifnum\tud@declare@label@mode@num=\tw@\relax\else%
        \tud@if@param@special{\tud@res@b}{%
          \let\tud@res@a\tud@res@c%
          \protected@epreto\tud@lbl@alias@values{\tud@res@b,}%
        }{}%
      \fi%
    }{%
      \ifx\tud@lbl@alias@values\@empty\else%
        \ClassWarning{tudscrmanual}{%
          As no default value was given, alias values\MessageBreak%
          can not be used either%
        }%
        \let\tud@lbl@alias@values\@empty%
      \fi%
    }%
    \let\tud@res@b\@empty%
    \begingroup%
      \@for\tud@res@a:=\tud@lbl@alias@values\do{%
        \trim@spaces@in\tud@res@a%
        \ifx\tud@res@a\@empty\else%
          \begingroup%
            \PValue@Enfold\tud@res@a%
            \Parameter@Expandable%
            \protected@edef\tud@res@a{%
              \endgroup%
              \unexpanded{\def\tud@res@a}{\tud@res@c=\tud@res@a}%
            }%
          \tud@res@a%
%    \end{macrocode}
% Nicht verwirren lassen! Das Aliaslabel wird zunächst der Exportliste 
% hinzugefügt. Anschließend wird geprüft, ob es in der importierten Liste 
% enthalten ist.
%    \begin{macrocode}
          \tud@auxlist@add{tud@lbl@alias}{\tud@res@a}%
          \tud@auxlist@ifin{\tud@res@a}{tud@lbl@alias}{%
            \tud@unique@eadd\tud@res@b{\expandonce\tud@res@a}%
          }{}%
        \fi%
      }%
      \edef\tud@res@a{%
        \endgroup%
        \unexpanded{\def\tud@res@b}{\expandonce\tud@res@b}%
      }%
    \tud@res@a%
%    \end{macrocode}
% Bei der Definition des eigentlichen Labels werden noch mögliche Aliaslabel 
% via \cs{tud@res@b} definiert. Das aktuell erstellte Label ist kein Alias und
% wird dementsprechend aus der Liste zu erstellender Aliaslabel entfernt.
% \ToDo{Woher kommen die nächsten zwei Codezeilen? Notwendig für Paket?}[v2.06]
%    \begin{macrocode}
%%    \def\tud@res@a##1:##2:##3\@nil{\tud@hypertarget{##3:##2:##3}}%
%%    \expandafter\tud@res@a\tud@lbl@tmp\@nil%
    \tud@auxlist@remove{tud@lbl@alias}{\tud@res@a}%
    \tud@hypertarget{#1}'#2'<\tud@res@b>{\tud@res@a}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@lbl@alias@auxlist
% \end{macro}^^A \tud@lbl@alias@values
% \end{macro}^^A \tud@lbl@declare
% \begin{macro}{\tudmarkuplabel}
%    \begin{macrocode}
\NewDocumentCommand\tudmarkuplabel{o m}{%
  \if@tud@sec%
    \begingroup%
      \def\tud@res@a{\endgroup}%
      \let\tud@res@b\@empty%
      \def\tud@res@c{#2}%
      \IfValueT{#1}{%
        \eappto\tud@res@a{\noexpand\label{#1}}%
        \edef\tud@res@b{#1}%
      }%
      \@for\tud@res@c:=\tud@res@c\do{%
        \trim@spaces@in\tud@res@c%
        \tud@if@markup{\tud@res@c}{%
          \tud@lbl@get\tud@lbl@tmp{\tud@res@c}%
          \ifx\tud@res@b\@empty%
            \edef\tud@res@b{\tud@lbl@tmp}%
          \else%
            \eappto\tud@res@a{%
              \noexpand\HyperDestRename{\tud@lbl@tmp}{\tud@res@b}%
            }%
          \fi%
          \eappto\tud@res@a{\noexpand\tud@lbl@declare*{\tud@lbl@tmp}}%
        }{}%
      }%
    \tud@res@a%
  \else%
    \ClassWarning{tudscrmanual}{%
      The command `\string\tudmarkuplabel' can only be used\MessageBreak%
      in headings%
    }%
  \fi%
}
\NewExpandableDocumentCommand\@tudmarkuplabel{o m}{}
\tud@addtocontents@special*{\let\tudmarkuplabel\@tudmarkuplabel}
%    \end{macrocode}
% \end{macro}^^A \tudmarkuplabel
%
% \subsubsection{Abarbeitung der Markup-Befehle}
%
% \begin{macro}{\tud@idx@robustify}
% \ToDo{umbenennen in \cs{tud@markup@robustify} und verschieben?}[v2.06]
% \ToDo{was davon ist notwendig?}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@idx@robustify{%
  \robustify\nobreakspace%
  \robustify{\dots}%
  \robustify{\_}%
  \robustify\texttt%
  \robustify\emph%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@robustify
%
% Die Festlegung des individuellen Markups der einzelnen Elemente erfolgt bei 
% der Definition mit \cs{Markup@Format@Set}. Bei der Nutztung der Markup-Befehle
% im Fließtext wird das mit \cs{NewMarkupCommand} individuell definierte
% Markup umgesetzt und dabei gleich automatisch ein Eintrag für das Element im
% Index erzeugt.
%
% \begin{macro}{\Process@Markup}
% \changes{v2.02}{2014/10/08}{Markup für Index und Fließtext getrennt}^^A
% \changes{v2.02}{2014/10/09}{Anpassung für Umgebung \env{DeclareEntity*}}^^A
% \changes{v2.05}{2015/11/05}{Neuimplementierung}^^A
% \begin{macro}{\Process@@Markup}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Process@Output}
% \begin{macro}{\Process@Invalid@Arg}
% Der Befehl \cs{Process@Markup} ist das Herzstück der Auszeichnungen aller
% Elemente. Das obligatorische Argument ist das auszuzeichnende Element selbst,
% welches im weiteren Verlauf der Abarbeitung expandiert wird. Darauf folgen 
% mehrere optionale Argumente. Mit |=|\meta{Wert}|=| kann ein Wert für einen
% Schlüssel angegeben werden, was aktuell von \cs{Option} und \cs{Key} genutzt
% wird. Darauf folgend kann in einem ordinären optionalen Argument ein Suffix
% für die Fließtextausgabe angegeben werden, was von \cs{Distribution}  sowie
% \cs{Environment}, \cs{Macro} und \cs{Color} verwendet wird.
%
% Mit dem optionalen Argument in runden Klammern kann eine Klasse oder ein 
% Paket aus dem \TUDScript-Bundle angegeben werden, auf welche sich das
% aktuelle auszuzeichnende Element bezieht und ggf. das Label und der
% Indexeintrag dementsprechend erzeugt werden sollen. Verwendet wird es mit: 
% |(\Class|\marg{Klasse}|)| oder |(\Package|\marg{Paket}|)| 
%
% Das optionale Argument in Guillemets wird von \cs{Package} benötigt, um ggf.
% die automatisch generierten Links auf CTAN anzupassen. Zuletzt kann mit 
% |'|\meta{Referenzvariante}|'| der automatisch erzeugte Querverweis in
% verschiedenen Varianten formatiert werden. Der vollständige Funktionsaufruf:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@Markup}\marg{Element}|=|\meta{Wert}|=|^^A
%   \oarg{Ausgabesuffix}\parg{Entität}^^A
%   |<|\meta{CTAN-Paket}|>||'|\meta{Referenzvariante}|'|^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%
%    \begin{macrocode}
\newcommand\Process@Output[1]{#1}
\NewDocumentCommand\Process@Invalid@Arg{m m}{%
  \ClassWarning{tudscrmanual}%
    {Using #1 with #2\MessageBreak is not possible}%
}
\NewDocumentCommand\Process@Markup{o m m d// d== o r|| r'' r()}{%
  \begingroup%
    \tud@idx@robustify%
    \tud@toks@{\Process@@Markup[#1]{#2}{#3}/#4/=#5=[{#6}]|#7|'#8'}%
    \def\tud@res@b{\Entity@Get}%
    \IfBooleanT{#1}{%
      \IfValueT{#7}{\Process@Invalid@Arg{starred markup}{|#7|}}%
      \IfValueT{#8}{\Process@Invalid@Arg{starred markup}{'#8'}}%
      \ifnum\tud@declare@mode@num=\z@\relax%
        \appto\tud@res@b{*}%
      \fi%
    }%
    \tud@res@b\tud@res@a(#9){#2}{#3}%
    \addto@hook@expandafter\tud@toks@{\expandafter(\tud@res@a)}%
    \edef\tud@res@a{%
      \endgroup%
      \the\tud@toks@%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Process@@Markup{o m m r// r== r[] r|| r'' r()}{%
%    \end{macrocode}
% Zu Beginn wird mit dem Schalter \cs{if@tud@declare} geprüft, ob die der 
% Markup-Befehl in einer der Deklarationsumgebungen oder anderweitig genutzt 
% wird. Für den ersten Fall erfolgt die Weiterverarbeitung der Argumente mit
% \cs{Process@@@Markup@Declare}, andernfalls kommt \cs{Markup@Inline@Wrapper} 
% zum Einsatz. Da beide Makros die gleiche Reihenfolge der Argumente verlangen,
% wird der jeweilige Befehlsaufruf über ein Token-Register realisiert, womit
% das Zusammensetzen der notwendigen Übergabewerte erleichtert wird. 
%
%    \begin{macrocode}
  \begingroup%
    \tud@idx@robustify%
    \def\tud@res@a{#9}%
    \let\tud@res@b\@empty%
    \def\tud@res@c##1##2{\listadd\tud@res@b{<##1>(##2)}}%
    \ifnum\tud@declare@mode@num>\m@ne\relax%
      \protected@expandtwoargs\in@{,}{#9}%
      \ifin@%
        \tud@lbl@@get\tud@lbl@tmp{{#2}{#3}/#4/=#5=(#9)}%
        \expandafter\tud@res@c\expandafter{\tud@lbl@tmp}{#9}%
      \fi%
    \fi%
    \@for\tud@res@d:=\tud@res@a\do{%
      \tud@lbl@@get\tud@lbl@tmp{{#2}{#3}/#4/=#5=(\tud@res@d)}%
      \protected@edef\tud@res@d{%
        \unexpanded{\Process@Index[{#1}]{#2}{#3}/#4/=#5=[{#6}]|#7|}%
            (\expandonce\tud@res@d)<\tud@lbl@tmp>%
        \noexpand\tud@res@c{\tud@lbl@tmp}{\expandonce\tud@res@d}%
      }%
      \tud@res@d%
    }%
%    \end{macrocode}
% Die Fallunterscheidung betrifft des Weiteren die Erzeugung des Labels. Für 
% eine Deklaration wird die Sternversion von \cs{tud@lbl@get} verwendet, welche
% ein Label aus den gegebenen Argumenten zusammensetzt. Ist keine Deklaration
% aktiv, versucht \cs{tud@lbl@get} ein gültiges, schon vorhandenes Label zu 
% verwenden. Das generierte Label wird anschließend als erstes Argument für das
% weiterverabeitende Makro genutzt.
%    \begin{macrocode}
    \let\tud@res@a\@empty%
%<*class>
    \ifnum\tud@declare@mode@num>\m@ne\relax
      \def\tud@res@a{\@firstofone}%
      \let\tud@res@c\@empty%
      \ifnum\tud@declare@mode@num=\z@\relax%
%</class>
        \def\tud@res@d{output}%
        \IfBooleanF{#1}{%
          \if@tud@sec%
            \IfValueT{#8}{\Process@Invalid@Arg{a heading}{'#8'}}%
          \else%
            \Markup@Inline@Wrapper\tud@res@a{#2}{#3}'#8'{\tud@res@b}%
          \fi%
        }%
%<*class>
      \else%
        \def\tud@res@d{declare}%
        \IfValueT{#7}{\Process@Invalid@Arg{a declaration}{|#7|}}%
        \ifnum\tud@declare@mode@num=\@ne\relax%
          \IfValueT{#8}{\Process@Invalid@Arg{a declaration environment}{'#8'}}%
        \else%
          \if@tud@markup@output%
            \tud@res@cnt=\@ne%
            \IfValueT{#8}{\tud@reference@num@get\tud@res@cnt{#8}}%
            \ifnum\tud@res@cnt>\z@\relax%
              \ifnum\tud@res@cnt>\tw@\relax%
                \Process@Invalid@Arg{an inline declaration}{'#8'}%
              \else%
                \Entity@Link@Seek\tud@res@c'#8'{#2}{#3}%
                \tud@specialurl@wrapper\tud@res@a{\tud@res@c}%
              \fi%
            \fi%
          \fi%
        \fi%
        \edef\tud@res@c{%
          \noexpand\Process@@@Markup@Declare{\expandonce\tud@res@b}%
          \ifx\tud@res@c\@empty\else'\tud@res@c'\fi%
        }%
        \tud@res@c{#2}{#3}/#4/=#5=[{#6}]|#7|'#8'%
      \fi%
%</class>
%    \end{macrocode}
% Nun erfolgt mit \cs{Process@@@Markup@Declare} bzw. \cs{Markup@Inline@Wrapper} 
% die Ausführung der eigentlichen Auszeichnung.
%    \begin{macrocode}
      \Markup@Output@Get\tud@res@b{#2}{#3}/#4/=#5=[{#6}]%
      \eappto\tud@res@a{{\expandonce\tud@res@b}}%
      \tud@trace@markup@add{\tud@res@d}{\expandonce\tud@res@a}%
%<*class>
    \fi%
%</class>
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\Process@Output{\if@tud@markup@output\expandonce\tud@res@a\fi}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Process@Invalid@Arg
% \end{macro}^^A \Process@Output
% \end{macro}^^A \Process@@Markup
% \end{macro}^^A \Process@Markup
% \begin{macro}{\Process@@@Markup@Declare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{Process@@MarkupDeclare} wird die formatierte Ausgabe der Deklaration 
% realisiert. Wie diese genau gestaltet ist, wird durch \cs{tud@declare@num}
% bestimmt. Folgende Werte sind möglich:
% \ToDo{\val{-1/-2} dokumentieren}[v2.07]
% \begin{description}
%   \item[\val{0}:] Ausgabe von Markup, Erzeugen eines Labels
%   \item[\val{1}:] Ausgabe von Markup, kein Label
%   \item[\val{2}:] keine Ausgabe, aber Erzeugen eines Labels
%   \item[\val{3}:] keine Ausgabe, Erzeugen eines nach oben verschobenen Labels
% \end{description}
% Normalerweise kommt die erste Variante zum Einsatz. Die zweite Variante wird 
% genutzt, wenn mit mit der Umgebung \env{Cessation} zwar eine Ausgabe aber 
% kein Label erstellt werden soll. Dies wird verwendet, um bei der Beschreibung 
% veralteter Werte oder Parameter diese im Kontext ihrer Option oder Umgebung
% bzw. ihres Befehls anzugeben.
%
% Die dritte Version kommt bei Erklärungen mit der Umgebung \env{DeclareEntity*}
% zum Einsatz, welche im Fließtext verwendet wird und kein Markup, wohl aber
% eine Label für das beschriebene Element erzeugt werden soll. Für die vierte
% Variante, welche die Umgebung \env{DeclareEntity} betrifft, gilt dies im 
% Prinzip gleichermaßen. Allerdings wird diese Umgebung zu Beginn der
% Deklarationen einer Entität direkt nach einer Überschrift verwendet. Hier 
% soll der erzeugte Link direkt auf der Höhe der Überschrift platziert werden.
%
% Das erste Argument enthält das zu definierende Label, gefolgt vom Element, 
% welches ausgezeichnet werden soll. Die tatsächliche Ausgabe erfolgt mit dem 
% Makro \cs{Markup@Output}. An dieses werden die beiden optionalen Argumente 
% |=|\meta{Wert}|=| und \oarg{Ausgabesuffix} direkt weitergereicht.
%    \begin{macrocode}
%<*class>
\NewDocumentCommand\Process@@@Markup@Declare{m d'' m m r// r== r[] r|| r''}{%
  \begingroup%
    \def\do##1{\tud@res@d##1\@nil}%
    \def\tud@res@d<##1>(##2)\@nil{%
      \ifnum\tud@declare@label@mode@num>\z@\relax%
        \tud@lbl@declare'#2'=#6={##1}%
      \fi%
      \protected@expandtwoargs\in@{,}{##2}%
      \ifin@%
        \listgadd\tud@declare@result@list{{}{##1}}%
      \else%
        \Entity@Declare{#3}{#4}{##2}%
        \listgadd\tud@declare@result@list{%
          {{#3}{#4}/#5/=#6=[{#7}]|#8|'#9'(##2)}%
          {##1}%
        }%
      \fi%
    }%
    \dolistloop{#1}%
  \endgroup%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \Process@@@Markup@Declare
% \begin{macro}{\tud@reference@num@get}
%    \begin{macrocode}  
\newcommand*\tud@reference@num@get[2]{%
  \begingroup%
    \TUD@set@numkey{}{tud@res@a}{%
      \TUD@bool@numkey,{}{0},{simple}{1},{plain}{1},{basic}{1},{*}{2},
      {auto}{3},{ref}{3},{autoref}{3},{auto*}{4},{ref*}{4},{autoref*}{4},%
      {full}{5},{fullref}{5},{full*}{6},{fullref*}{6},%
      {page}{7},{pageref}{7},{vpage}{7},{vpageref}{7},%
    }{#2}%
    \ifx\FamilyKeyState\FamilyKeyStateProcessed\else%
      \tud@specialurl@validate{#2}{%
        \def\tud@res@a{2}%
        \FamilyKeyStateProcessed%
      }%
    \fi%
    \ifx\FamilyKeyState\FamilyKeyStateProcessed\else%
      \ClassWarning{tudscrmanual}{%
        The cross-reference '#2'\MessageBreak%
        is unknown. Only '[auto]ref' or 'full[ref]' and\MessageBreak%
        '[v]page[ref]' as well as '' or booleans are\MessageBreak%
        valid. Besides, 'CTAN[info]:<pkg>' or 'GH:<repo>'\MessageBreak%
        and 'URL:<url>' can be used%
      }%
      \def\tud@res@a{0}%
      \FamilyKeyStateProcessed%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{#1=}\tud@res@a\relax%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@reference@num@get
% \begin{macro}{\Markup@Inline@Wrapper}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@Inline@@Wrapper}
% Mit \cs{Markup@Inline@Wrapper} wird die formatierte Ausgabe außerhalb der 
% Deklarationsumgebungen umgesetzt. Die ersten vier Argument entsprechen denen
% des Befehls \cs{Process@@MarkupDeclare} und werden bis auf das Label ebenso an
% \cs{Markup@Output} übergeben, nachdem mit dem Befehl \cs{Markup@CheckFormat} 
% auf eine existierende Markup-Definition geprüft wurde.
% \ToDo{
%   Hyperlinks auf erläuterte Element innerhalb der Umgenung \env{Declaration}
%   unterbinden? Könnte \cs{tud@declaration@list} genutzt werden?
% }[v2.07]
% \ToDo{\cs{suffix}{Bundle} anhängen, wenn nicht ety@[crn/dflt]?!}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Markup@Inline@Wrapper{m m m r'' m}{%
  \begingroup%
    \let\tud@output@wrapper\relax%
    \tud@res@cnt=\@ne%
    \IfValueT{#4}{%
      \tud@reference@num@get\tud@res@cnt{#4}%
      \ifnum\tud@res@cnt=\z@\relax%
        \def\tud@output@wrapper{\@firstofone}%
      \fi%
    }%
    \protected@edef\tud@res@c{\noexpand\dolistloop{\expandonce#5}}%
    \let\tud@lbl@found\relax%
    \let\tud@res@a\@empty%
    \let\tud@res@b\@empty%
    \def\do##1{\tud@res@d##1\@nil}%
    \def\tud@res@d<##1>(##2)\@nil{%
      \ifnum\tud@res@cnt=\z@\relax%
        \tud@trace@lbl@add{ignored}{##1}%
      \else%
        \protected@edef\tud@lbl@tmp{##1}%
        \tud@if@lbl@exists{\tud@lbl@tmp}{}{%
          \tud@truncate@value\tud@lbl@tmp{\tud@lbl@tmp}%
          \tud@if@lbl@exists{\tud@lbl@tmp}{}{%
            \let\tud@lbl@tmp\@empty%
          }%
        }%
        \ifx\tud@lbl@found\relax%
%    \end{macrocode}
% \ToDo{doc: \cs{tud@lbl@tmp} erster Eintrag, ggf. kombiniertes Label}[v2.06]
% \ToDo{doc: \cs{tud@res@a} enthält bundle und label für hyperlink}[v2.06]
%    \begin{macrocode}
          \let\tud@lbl@found\tud@lbl@tmp%
          \def\tud@res@a{<##1>(##2)}%
        \else%
          \ifx\tud@lbl@tmp\@empty\else%
            \tud@trace@lbl@add{ignored}{\tud@lbl@tmp}%
            \appto\tud@res@b{\MessageBreak\@spaces{##2}}%
          \fi%
        \fi%
      \fi%
    }%
    \tud@res@c%
    \ifx\tud@lbl@found\@empty%
      \ifx\tud@res@b\@empty\else%
        \def\tud@output@wrapper{\@firstofone}%
        \ClassWarning{tudscrmanual}{%
          A specific entity (single or valid combination) is\MessageBreak% 
          needed for `\tud@markup@detokenize{#2}{#3}'%
          \tud@res@b%
        }%
      \fi%
    \fi%
    \ifx\tud@output@wrapper\relax%
      \edef\tud@res@c{%
        \noexpand\Markup@Inline@@Wrapper<\expandonce\tud@lbl@found>%
          {\the\tud@res@cnt}%
          \ifnum\tud@res@cnt>\@ne'#4'\fi%
          \expandonce\tud@res@a%
          \unexpanded{{#2}{#3}}%
      }%
      \tud@res@c%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\expandonce\tud@output@wrapper}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \ToDo{doc: Argumente -- found cnt ref input ety markup value}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Markup@Inline@@Wrapper{r<> m d'' r<> d() m m}{%
  \begingroup%
    \def\tud@lbl@found{#1}%
    \ifx\tud@lbl@found\@empty%
      \let\tud@res@a\@empty%
      \ifnum\tud@res@cnt>\tw@\relax%
        \ClassWarning{tudscrmanual}{%
          A cross-reference was not created as label\MessageBreak%
          `#4' does not exist%
        }%
      \else%
        \Entity@Link@Seek\tud@res@a'#3'<#4>(#5){#6}{#7}%
      \fi%
      \tud@specialurl@wrapper\tud@output@wrapper{\tud@res@a}%
      \ifx\tud@res@a\@empty%
        \tud@trace@lbl@add{missing}{#4}%
      \else%
        \tud@trace@lbl@add{missing}[{\tud@res@a}]{#4}%
      \fi%
    \else%
      \let\tud@res@a\@empty% simple/link
      \ifcase#2\relax\or\or% link
        \ClassWarning{tudscrmanual}{%
          As label `#4'\MessageBreak%
          exists, link '#3' is ignored%
        }%
      \or% autoref
        \def\tud@res@a{in \autoref}%
      \or% autoref*
        \def\tud@res@a{aus \autoref}%
      \or% fullref
        \def\tud@res@a{in \fullref}%
      \or% fullref*
        \def\tud@res@a{aus \fullref}%
      \or% page
        \def\tud@res@a{\vpageref}%
      \fi%
%    \end{macrocode}
% \ToDo{
%   doc: nur Hyperlinks auf Elemente, die nicht gerade deklariert werden
% }[v2.06]
%    \begin{macrocode}
      \tud@truncate@value\tud@lbl@tmp{\tud@lbl@found}%
      \xifinlist{\tud@lbl@tmp}{\tud@declaration@label@list}{%
%    \end{macrocode}
% \ToDo{
%   doc: \cs{tud@hyperlink} liest im zweiten argument zusätzlichen text
% }[v2.06]
%    \begin{macrocode}
        \def\tud@res@b{\@swaptwoargs}%
      }{%
        \edef\tud@res@b{\noexpand\tud@hyperlink{\tud@lbl@found}}%
      }%
      \edef\tud@output@wrapper{%
        \expandonce\tud@res@b{%
          \ifx\tud@res@a\@empty\else%
            \space\expandonce\tud@res@a{\tud@lbl@found}%
          \fi%
        }%
      }%
      \tud@if@strequal{\tud@lbl@found}{#4}{%
        \tud@trace@lbl@add{matched}{\tud@lbl@found}%
      }{%
        \tud@trace@lbl@add{matched}[{#4}]{\tud@lbl@found}%
      }%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\tud@output@wrapper}{\expandonce\tud@output@wrapper}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Inline@@Wrapper
% \end{macro}^^A \Markup@Inline@Wrapper
% \begin{macro}{\Markup@Output@Get}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{Markup@Output} wird für die formatierte Markup-Ausgabe von den
% beiden Makros \cs{Process@@@Markup@Declare} sowie \cs{Markup@Inline@Wrapper}
% aufgerufen. Das erste Argument enthält dabei das auszuzeichnende Element.
% Dabei ist die Besonderheit des Makros \cs{Key}\marg{Makro}\marg{Parameter} zu
% beachten, dessen beiden Argumente hier in der Form \marg{Makro!Parameter} 
% übergeben werden. Deshalb wird das erste Argument mit dem Argumentprozessor 
% \cs{SplitArgument}|{1}{!}| getrennt und dann weiter verarbeitet.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Output@Get{m m >{\AP@Underscore}m r// r== r[]}{%
  \begingroup%
%    \end{macrocode}
% Ist das aktuelle Element \cs{Key} wird nur das zweite Argument ausgegeben. 
% Das erste wird lediglich für Label und Indexeintrag benötigt.
%    \begin{macrocode}
    \IfValueTF{#4}{%
      \def\tud@res@a{KeyVal@Parameter}%
      \def\tud@res@c{#4}%
    }{%
      \def\tud@res@a{#2}%
      \def\tud@res@c{#3}%
    }%
%    \end{macrocode}
% Anschließend wird entweder \cs{Markup@Declare} oder \cs{Markup@Inline}
% aufgerufen~-- abermals abhängig vom Schalter \cs{if@tud@declare}. Auch hier 
% wird für den Befehlsaufruf mit dem dazugehörigen Argument zur Vereinfachung
% ein Token-Register verwendet.
%    \begin{macrocode}
%<*class>
    \ifcase\tud@absnum\tud@declare@mode@num\relax%
%</class>
      \edef\tud@res@b{Markup@Format@@Inline@@\tud@res@a}%
%<*class>
    \or%
      \edef\tud@res@b{Markup@Format@@Declare@@\tud@res@a}%
    \or%
      \edef\tud@res@b{Markup@Format@@InlineDeclare@@\tud@res@a}%
    \fi%
%</class>
%    \end{macrocode}
% Die beiden optionalen Argumente werden ggf. in der gleichen Formatierung 
% ausgegeben. 
%    \begin{macrocode}
    \ifcsundef{\tud@res@b}{%
      \ClassError{tudscrmanual}{Internal error}{%
        `\@backslashchar\tud@res@b' was never defined.%
      }%
      \let\tud@res@a\@empty%
    }{%
      \edef\tud@res@a{%
        \expandafter\noexpand\csname\tud@res@b\endcsname%
          {\tud@res@c}\unexpanded{=#5=[{#6}]}%
      }%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Output@Get
% \begin{macro}{\Process@Simple@Markup}
%    \begin{macrocode}
\GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
\expandafter\NewDocumentCommand\expandafter\Process@Simple@Markup\expandafter{%
  \ArgumentSpecification%
}{%
  \begingroup%
    \tud@declare@mode@num=\z@%
    \Markup@Output@Get\tud@res@a{#2}{#3}/#4/=#5=[{#6}]%
    \edef\tud@res@a{%
      \endgroup%
      \expandonce\tud@res@a%
    }%
  \tud@res@a%
}
\tud@outputpage@special{\let\Process@Markup\Process@Simple@Markup}
\BeforeStartingTOC{\let\Process@Markup\Process@Simple@Markup}
%    \end{macrocode}
% \end{macro}^^A \Process@Simple@Markup
%
% \subsubsection{Extraktion von Argumentent der Markup-Befehle}
%
% \ToDo{\cs{GetDocumentCommandArgSpec} entfernen}[v2.06]
%
% \begin{macro}{\Markup@Inner@Get}
% \begin{macro}{\Markup@Inner@@Get}
% \begin{macro}{\Markup@Outer@Get}
% \begin{macro}{\Markup@Outer@@Get}
%    \begin{macrocode}
\NewDocumentCommand\Markup@Inner@Get{s m m}{%
  \begingroup%
    \IfBooleanTF{#1}{%
      \let\Process@Markup\Markup@Inner@@Get%
    }{%
      \let\Process@@Markup\Markup@Inner@@Get%
    }%
    \tud@if@markup*{#3}{%
      #3%
    }{%
      \ClassError{tudscrmanual}{Internal error}{%
        `\detokenize{#3}' is no markup command!%
      }%
      \Bundle{unknown}%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#2}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
\expandafter\NewDocumentCommand\expandafter\Markup@Inner@@Get\expandafter{%
  \ArgumentSpecification%
}{%
  \tud@toks@{[{#1}]{#2}{#3}/#4/=#5=[{#6}]|#7|'#8'(#9)}%
}
\NewDocumentCommand\Markup@Outer@Get{m m}{%
  \begingroup%
    \protected@edef\tud@res@a{\noexpand\Markup@Outer@@Get\expandonce{#2}}%
    \tud@res@a%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
\expandafter\NewDocumentCommand\expandafter\Markup@Outer@@Get\expandafter{%
  \ArgumentSpecification%
}{%
  \edef\tud@res@a{\expandafter\noexpand\csname#2\endcsname}%
  \@tud@res@swafalse%
  \IfValueT{#1}{\IfBooleanT{#1}{\@tud@res@swatrue}}%
  \if@tud@res@swa%
    \appto\tud@res@a{*}%
  \else%
    \tud@if@nil{#7}{}{\IfValueT{#7}{\appto\tud@res@a{|#7|}}}%
    \tud@if@nil{#8}{}{\IfValueT{#8}{\appto\tud@res@a{'#8'}}}%
  \fi%
  \tud@if@nil{#9}{}{\IfValueT{#9}{%
    \tud@if@strequal{\tud@ety@gnrl}{#9}{}{\appto\tud@res@a{(#9)}}%
  }}%
  \tud@toks@\expandafter{\tud@res@a}%
  \def\tud@res@b{#3}%
  \IfValueT{#4}{\appto\tud@res@b{/#4}}%
  \IfValueT{#5}{\appto\tud@res@b{=#5}}%
  \IfValueT{#6}{\appto\tud@res@b{|#6}}%
  \addto@hook@expandafter\tud@toks@{\expandafter{\tud@res@b}}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Outer@@Get
% \end{macro}^^A \Markup@Outer@Get
% \end{macro}^^A \Markup@Inner@@Get
% \end{macro}^^A \Markup@Inner@Get
% \begin{macro}{\Markup@Main@Get}
% \begin{macro}{\Markup@Main@@Get}
% \begin{macro}{\Markup@Main@Ignore}
%    \begin{macrocode}
\NewDocumentCommand\Markup@Main@Get{s m m}{%
  \begingroup%
    \Markup@Inner@Get*\tud@res@a{#3}%
    \IfBooleanTF{#1}{\@tud@res@swatrue}{\@tud@res@swafalse}%
    \expandafter\Markup@Main@@Get\tud@res@a%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#2}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
\expandafter\NewDocumentCommand\expandafter\Markup@Main@@Get\expandafter{%
  \ArgumentSpecification%
}{%
  \edef\tud@res@a{\expandafter\noexpand\csname#2\endcsname}%
  \IfValueT{#1}{\IfBooleanT{#1}{\appto\tud@res@a{*}}}%
  \tud@toks@\expandafter{\tud@res@a}%
  \def\tud@res@b{#3}%
  \if@tud@res@swa%
    \IfValueT{#4}{\appto\tud@res@b{/#4}}%
    \IfValueT{#5}{\appto\tud@res@b{=#5}}%
    \IfValueT{#6}{\appto\tud@res@b{|#6}}%
  \else%
    \Markup@Main@Ignore{#4}{//}{#2}{#3}%
    \Markup@Main@Ignore{#5}{==}{#2}{#3}%
    \Markup@Main@Ignore{#6}{[]}{#2}{#3}%
  \fi%
  \addto@hook@expandafter\tud@toks@{\expandafter{\tud@res@b}}%
  \tud@if@nil{#7}{}{\Markup@Main@Ignore{#7}{||}}{#2}{#3}%
  \tud@if@nil{#8}{}{\Markup@Main@Ignore{#8}{''}}{#2}{#3}%
  \tud@if@nil{#9}{}{\Markup@Main@Ignore{#9}{()}}{#2}{#3}%
}
\newcommand*\Markup@Main@Ignore[4]{%
  \IfValueT{#1}{%
    \ClassWarning{tudscrmanual}{%
      \tud@markup@detokenize{#3}{#4} ignoring argument\MessageBreak%
      \@firstoftwo#2#1\@secondoftwo#2%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Main@Ignore
% \end{macro}^^A \Markup@Main@@Get
% \end{macro}^^A \Markup@Main@Get
% \begin{macro}{\Markup@Split@Get}
% \begin{macro}{\Markup@Split@@Get}
%    \begin{macrocode}
\NewDocumentCommand\Markup@Split@Get{s m m}{%
  \begingroup%
    \IfBooleanT{#1}{\let\Markup@Main@Ignore\@gobblefour}%
    \Markup@Main@Get\tud@res@a{#3}%
    \Markup@Split@@Get\tud@res@a{\tud@res@a}%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#2}{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Markup@Split@@Get{m m}{%
  \begingroup%
    \def\Markup@Split@@Get##1##2\@nil{%
      \edef\Markup@Split@@Get{\expandafter\@gobble\string##1}%
      \edef\tud@res@a{%
        \endgroup%
        \unexpanded{\def#1}{{\Markup@Split@@Get}{\unexpanded{##2}}}%
      }%
    }%
    \expandafter\Markup@Split@@Get#2\@nil%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Split@@Get
% \end{macro}^^A \Markup@Split@Get
% \begin{macro}{\If@Markup@Key@TF}
% \begin{macro}{\If@Markup@Value@TF}
% \begin{macro}{\@Markup@Check}
% \begin{macro}{\@Markup@@Check}
% \begin{macro}{\tud@chk@key}
% \begin{macro}{\tud@chk@val}
%    \begin{macrocode}
\NewDocumentCommand\If@Markup@Key@TF{o m}{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \expandafter\@Markup@Check\tud@res@a%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\@Markup@@Check{\expandonce\tud@chk@key}{#1}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\If@Markup@Value@TF{o m}{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \IfValueTF{#1}{%
      \let\tud@res@b\@empty%
      \def\do##1{%
        \def\tud@res@c{##1}%
        \PValue@Enfold\tud@res@c%
        \eappto\tud@res@b{\expandonce\tud@res@c,}%
        \def\tud@res@c{##1}%
        \PValue@Enfold*\tud@res@c%
        \eappto\tud@res@b{\expandonce\tud@res@c,}%
      }%
      \docsvlist{#1}%
    }{%
      \def\tud@res@b{#1}%
    }%
    \expandafter\@Markup@Check\tud@res@a%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\@Markup@@Check{\expandonce\tud@chk@val}{\expandonce\tud@res@b}%
    }%
  \tud@res@a%
}
\newcommand*\tud@chk@key{}
\newcommand*\tud@chk@val{}
\GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
\expandafter\NewDocumentCommand\expandafter\@Markup@Check\expandafter{%
  \ArgumentSpecification%
}{%
  \def\tud@chk@key{#4}%
  \def\tud@chk@val{#5}%
}
\NewDocumentCommand\@Markup@@Check{m m}{%
  \begingroup%
    \@tud@res@swafalse%
    \IfValueTF{#1}{%
      \IfValueTF{#2}{%
        \def\do##1{%
          \tud@if@strequal{#1}{\trim@spaces{##1}}{%
            \@tud@res@swatrue%
            \listbreak%
          }{}%
        }%
        \docsvlist{#2}%
      }{%
        \@tud@res@swatrue%
      }%
    }{}%
    \if@tud@res@swa%
      \aftergroup\@firstoftwo%
    \else%
      \aftergroup\@secondoftwo%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@chk@val
% \end{macro}^^A \tud@chk@key
% \end{macro}^^A \@Markup@@Check
% \end{macro}^^A \@Markup@Check
% \end{macro}^^A \If@Markup@Value@TF
% \end{macro}^^A \If@Markup@Key@TF
% \begin{macro}{\Markup@Replace}
% \begin{macro}{\Markup@@Replace}
% \ToDo{doc: Sternversion ersetzt nur \val{-No-Value-}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Markup@Replace{s m d== o d|| d'' m}{%
  \begingroup%
    \protected@edef\tud@res@a{#7}%
    \GetDocumentCommandArgSpec\Process@Markup% o m m d// d== o r|| r'' r()
    \expandafter\DeclareDocumentCommand\expandafter\tud@res@b\expandafter{%
      \ArgumentSpecification%
    }{%
      \tud@toks@{[{##1}]{##2}{##3}/##4/}%
      \Markup@@Replace{#1}{==}{#3}{##5}%
      \Markup@@Replace{#1}{[]}{#4}{##6}%
      \Markup@@Replace{#1}{||}{#5}{##7}%
      \Markup@@Replace{#1}{''}{#6}{##8}%
      \addto@hook\tud@toks@{(##9)}%
    }%
    \expandafter\tud@res@b\tud@res@a%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#2}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Markup@@Replace{m m m m}{%
  \begingroup%
    \tud@if@nil{#3}{%
      \def\tud@res@a{\@nil}%
    }{%
      \def\tud@res@a{#4}%
      \IfValueT{#3}{%
        \IfBooleanTF{#1}{%
          \IfValueF{#4}{\def\tud@res@a{#3}}%
        }{%
          \def\tud@res@a{#3}%
        }%
      }%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\addto@hook\tud@toks@}{%
        \@firstoftwo#2\expandonce\tud@res@a\@secondoftwo#2%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@@Replace
% \end{macro}^^A \Markup@Replace
%
% \iffalse
%<*class>
% \fi
%
% \subsection{Deklarationsumgebungen für die Klasse \cls{tudscrmanual}}
%
% Die Umgebungen \env{Declaration} und \env{Declaration*} sowie \env{Cessation}
% und \env{Entity} werden für die Beschreibung von Optionen, Umgebungen,
% Befehlen etc. verwendet, welche von \TUDScript oder einer anderen Entität dem
% Anwender zur Verfügung gestellt werden.
%
% \begin{environment}{Declaration}
% \begin{environment}{Declaration*}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die \env{Declaration}-Umgebung dient zur Deklaration von Optionen, Umgebungen,
% Befehlen, Parametern, Bezeichnern, Längen, Schriftelementen und Farben. Diese 
% werden mit den entsprechenden Auszeichnungsbefehlen als obligatorisches 
% Argument übergeben. Zuvor kann noch vorher im ersten optionalen Argument eine
% Beschreibung für die Änderungsliste in der Form \oarg{Verison!Beschreibung}
% angegeben werden. Danach kann im dritten Argument~-- das zweite optionale~-- 
% die Voreinstellung für eine Option oder dergleichen angegeben werden. Das
% nächste optionale Argument erlaubt die Angabe einer bedingten Voreinstellung, 
% also einer anderen Voreinstellung als der zuerst angegeben unter bestimmten
% Voraussetzungen. Diese wird in der Form \oarg{Bedingung:Voreinstellung}
% angegeben. Das letzte Argument ist ebenfalls optional, wird aber in der Form
% \marg{Zusatz} angegeben und enthält ggf. zusätzliche Informationen.
%
% Die Umgebung \env{Cessation} hat eine ganz ähnliche Funktion, wird allerdings
% für die Deklaration veralteter Befehle, Umgebungen, Optionen etc. verwendet.
% Da sich beide Umgebungen stark ähneln, werden zum Start bzw. zum Abschluss
% die Makros \cs{tud@declare@start} bzw. \cs{tud@declare@end} aufgerufen. Zu 
% Beginn wird nichts weiter ausgegeben sondern lediglich alle übergebenen
% Argumente in jeweiligen Listen gesammelt. Die eigentliche Ausgabe der 
% Deklaration erfolgt mit dem Befehl \cs{printdeclarationlist} bezieungsweise 
% \cs{printobsoletelist}. 
%    \begin{macrocode}
\NewDocumentEnvironment{Declaration}{m d== d() d<> o}{%
  \tud@declare@start[{#5}]{#1}=#2=[track](#3)<#4>%
}{%
  \tud@declare@end{#1}[]%
}
\NewDocumentEnvironment{Declaration*}{m d() d<>}{%
  \tud@declare@start{#1}[index=false,label=false](#2)<#3>%
}{%
  \tud@declare@end{#1}[index=false]%
}
%    \end{macrocode}
% \end{environment}^^A Declaration*
% \end{environment}^^A Declaration
% \begin{environment}{Cessations}
% \begin{environment}{Cessation}
% \begin{macro}{\tud@cessations@version}
%    \begin{macrocode}
\newcommand*\tud@cessations@version{}
\AtBeginDocument{\undef\tud@cessations@version}
\NewDocumentEnvironment{Cessations}{m !o}{%
  \ifundef\tud@cessations@version{%
    \def\tud@cessations@version{#1}%
    \tud@v@validate{\tud@cessations@version}%
  }{%
    \ClassError{tudscrmanual}{Nested environment `Cessations'}{%
      The environment `Cessations' must not be nested!%
    }%
    \undef\tud@cessations@version%
  }%
  \ifundef\tud@cessations@version{}{%
    \begingroup%
      \edef\tud@res@a{%
        \unexpanded{Anpassungen f\"ur \TUDScript}\tud@cessations@version%
      }%
      \edef\tud@lbl@tmp{sec:cessations:\tud@cessations@version}%
      \edef\tud@res@b{%
        \noexpand\index[{changes-\tud@cessations@version}]{%
          ""@Allgemein:\space\noexpand\hyperref[\tud@lbl@tmp]{%
            \unexpanded{Anpassungen gegen\"uber der vorhergehenden Version}%
          }%
        }%
      }%
      \let\tud@res@c\@empty%
      \IfValueT{#2}{%
        \def\tud@res@d##1{%
          \eappto\tud@res@c{\tud@cessations@version:}%
          \appto\tud@res@c{##1;}%
        }%
        \forssvlist{\tud@res@d}{#2}%
        \edef\tud@res@c{\noexpand\ChangedAt*{\expandonce\tud@res@c}}%
      }%
      \edef\tud@res@d{%
        \endgroup%
        \noexpand\subsection[nonumber=true]%[tocentry=\expandonce\tud@res@a]
        {%
          \expandonce\tud@res@a%
          \noexpand\label{\tud@lbl@tmp}%
          \expandonce\tud@res@b%
          \expandonce\tud@res@c%
        }%
      }%
    \tud@res@d%
  }%
}{}
%    \end{macrocode}
% Für die Umgebung \env{Cessation} sieht die Eingabe etwas anders aus. Das 
% erste obligatorische Argument sollte eine Versionsnummer enthalten, ab wann
% die Deklaration veraltet ist. Das erste optionale Argument wird genutzt, wenn 
% für eine weiterhin gültige Deklaration lediglich ein bestimmter Wert 
% entfällt. Wird das erste Argument leer gelassen, erfolgt lediglich die 
% Ausgabe der Deklaration ohne einen Eintrag in die Änderungsliste. Dies ist 
% für Umgebungen und Befehle gedacht, bei denen lediglich ein oder mehrere 
% Parameter geändert wurden bzw. entfallen.
%    \begin{macrocode}
\NewDocumentEnvironment{Cessation}{m d() D<>{}}{%
  \ifx\tud@cessations@version\relax%
    \ClassError{tudscrmanual}{Missing environment `Cessations'}{%
      The environment `Cessation' must be used\MessageBreak%
      within environment `Cessations'!%
    }%
    \edef\tud@cessations@version{\vTUDScript}%
  \fi%
  \begingroup%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\tud@declare@start*[{\tud@cessations@version}]%
    }%
  \tud@res@a{#1}[track,index=false](#2)<#3>%
}{%
  \tud@declare@end{#1}[index=false]%
}
%    \end{macrocode}
% \end{macro}^^A \tud@cessations@version
% \end{environment}^^A Cessation
% \end{environment}^^A Cessations
% \begin{macro}{\tud@declare@open}
% \begin{macro}{\tud@declare@close}
% \begin{macro}{\tud@declare@process@list}
% \begin{macro}{\tud@declare@result@list}
% \begin{macro}{\tud@@declare}
% \begin{parameter}{inline}
% \begin{parameter}{index}
% \begin{parameter}{label}
% \begin{parameter}{output}
% \begin{parameter}{track}
% \begin{macro}{\tud@declare@mode@num}
% \begin{macro}{\tud@declare@label@mode@num}
% \begin{macro}{\if@tud@markup@output}
% \begin{macro}{\if@tud@declare@track}
% Dies sin ein paar Hilfsmakros zur Steuerung des Markup sowie der Ausgabe von
% Deklarationen, Index und Änderungsliste, welche bei den nächsten Befehlen und 
% Umgebungen genutzt werden. Mit \cs{if@tud@declare} wird festgelegt, ob die
% Befehle für das Markup in der Ausgabe als Deklaration oder anderweitig
% erfolgt. Zusätzlich wird mit \cs{tud@declare@num} definiert, wie genau das 
% Markup sich darstellen soll. Die möglichen Werte sind bei der Beschreibung
% von \cs{Process@@MarkupDeclare} zu finden. Der Schalter \cs{if@tud@openindex} 
% wird zu Beginn einer Deklaration auf \val{true} gesetzt und vor dem Beenden
% auf \val{false}. Damit wird bestimmt, ob ein öffnender oder ein schließender
% Indexeintrag erzeugt werden soll.
%    \begin{macrocode}
\tud@newcount\tud@declare@mode@num
\TUD@key[.declare]{inline}[true]{%
  \TUD@set@ifkey{inline}{@tempswa}{#1}%
  \if@tempswa%
    \tud@declare@mode@num=\tw@%
  \else%
    \tud@declare@mode@num=\@ne%
  \fi%
}
\TUD@key[.declare]{index}[true]{%
  \TUD@set@ifkey{index}{@tempswa}{#1}%
  \if@tempswa%
    \tud@index@mode@num=\@ne\relax%
  \else%
    \tud@index@mode@num=\m@ne\relax%
  \fi%
}
\tud@newcount\tud@declare@label@mode@num
\TUD@key[.declare]{label}[true]{%
  \TUD@set@numkey{label}{@tempa}{%
    \TUD@bool@numkey,{alias}{1},{noalias}{2}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \tud@declare@label@mode@num=\@tempa\relax%
  \fi%
}
\tud@newif\if@tud@markup@output\@tud@markup@outputtrue
\TUD@key[.declare]{output}[true]{%
  \TUD@set@ifkey{output}{@tud@markup@output}{#1}%
}
\tud@newif\if@tud@declare@track
\TUD@key[.declare]{track}[true]{%
  \TUD@set@ifkey{track}{@tud@declare@track}{#1}%
}
%    \end{macrocode}
% \ToDo{doc: {Deklaration}{Voreinstellungen}{Querverw.}{Änderungsliste}}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@declare@process@list{}
%    \end{macrocode}
% \ToDo{doc: {internal markup}{label}}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@declare@result@list{}
\NewDocumentCommand\tud@@declare{s m}{%
  \TUDExecuteOptions[.declare]{output,label,index,track=false,inline=false}%
  \begingroup%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\TUDExecuteOptions[.declare]{#2}%
    }%
  \tud@res@a%
  \IfBooleanT{#1}{%
    \TUDExecuteOptions[.declare]{output=false,label=false}%
    \tud@declare@mode@num=-\tud@declare@mode@num\relax%
  }%
}
\NewDocumentCommand\tud@declare@open{m D=={} r[]}{%
  \let\tud@declare@result@list\@empty%
  \begingroup%
    \tud@@declare{#3}%
    \protected@edef\tud@lbl@alias@values{#2}%
    #1%
    \if@tud@declare@track%
      \aftergroup\@tud@declare@tracktrue%
    \else%
      \aftergroup\@tud@declare@trackfalse%
    \fi%
  \endgroup%
}
\NewDocumentCommand\tud@declare@close{m r[]}{%
  \begingroup%
    \tud@@declare*{#2}%
    #1%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \if@tud@declare@track
% \end{macro}^^A \if@tud@markup@output
% \end{macro}^^A \tud@declare@label@mode@num
% \end{macro}^^A \tud@declare@mode@num
% \end{parameter}^^A track
% \end{parameter}^^A output
% \end{parameter}^^A label
% \end{parameter}^^A index
% \end{parameter}^^A inline
% \end{macro}^^A \tud@@declare
% \end{macro}^^A \tud@declare@result@list
% \end{macro}^^A \tud@declare@process@list
% \end{macro}^^A \tud@declare@close
% \end{macro}^^A \tud@declare@open
% \begin{macro}{\tud@declare@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dies sind die Makros für die eigentliche Abarbeitung der Deklarationsbefehle 
% zu Beginn und Ende der Umgebungen \env{Declaration} und \env{Cessation}.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@start{%
  s o m d== r[] >{\AP@PresetParser}r() r<>%
}{%
  \begingroup%
    \tud@toks@{}%
    \def\tud@res@c{\endgroup}%
    \Entity@Level@@Validate{3}{3}{#3}{%
      \IfValueT{#2}{%
        \tud@ref@get\tud@res@a{\IfBooleanTF{#1}{discontinued}{new}}%
          {\IfValueTF{#7}{#7}{}}{|\@nil|'\@nil'}%
        \edef\tud@res@a{[{#1}]:\expandonce\tud@res@a:{\unexpanded{#2}}}%
        \addto@hook@expandafter\tud@toks@{\expandafter[\tud@res@a]}%
      }%
      \IfValueT{#6}{\addto@hook\tud@toks@{(#6)}}%
      \IfValueT{#7}{%
        \tud@ref@get\tud@res@a{\IfBooleanTF{#1}{discontinued}{see}}%
          {#7}{||'page'}%
        \addto@hook@expandafter\tud@toks@{\expandafter<\tud@res@a>}%
      }%
      \addto@hook\tud@toks@{{\tud@declare@open{#3}=#4=[{#5}]}}%
      \eappto\tud@res@c{%
        \unexpanded{\listadd\tud@declare@process@list}{{\the\tud@toks@}}%
      }%
    }%
  \tud@res@c%
  \let\printdeclarationlist\tud@print@declarationlist%
}
%    \end{macrocode}
% Am Ende der Umgebungen wird das übergebenen Hauptargument erneut ausgeführt,
% was zum Beenden der Indexeinträge für die jeweilige Deklaration führt
% (\cs{@tud@openindexfalse}, siehe \cs{Process@Index}). Dafür werden die Makros 
% für die Angabe obligatorischer und optionaler Parameter lokal umdefiniert.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@end{m r[]}{%
  \ifvmode\else\@killglue\fi%
  \tud@declare@check%
  \tud@declare@close{#1}[{#2}]%
  \par%
}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@end
% \end{macro}^^A \tud@declare@start
% \begin{macro}{\AP@PresetParser}
%    \begin{macrocode}
\newcommand*\AP@PresetParser[1]{%
  \begingroup%
    \protected@edef\tud@res@b{\noexpand\tud@res@c#1\noexpand\@nil}%
    \protected@expandtwoargs\in@{|}{#1}%
    \ifin@%
      \def\tud@res@c##1|##2\@nil{%
        \def\tud@res@a{##1}%
        \protected@expandtwoargs\in@{:}{##2}%
        \ifin@%
          \def\tud@res@b####1:####2\@nil{%
            \let\tud@res@b\@empty%
            \protected@edef\tud@res@c{####2}%
            \@for\tud@res@c:=\tud@res@c\do{%
              \trim@spaces@in\tud@res@c%
              \eappto\tud@res@b{%
                \ifx\tud@res@b\@empty\else,\space\fi%
                \unexpanded{\PValue@Enfold*'}{\expandonce\tud@res@c}%
              }%
            }%
            \preto\tud@res@b{\txb####1:\space}%
          }%
          \tud@res@b##2\@nil%
        \else%
          \let\tud@res@b\relax%
        \fi%
      }%
    \else%
      \def\tud@res@c##1\@nil{%
        \def\tud@res@a{#1}%
        \let\tud@res@b\@empty%
      }%
    \fi%
    \tud@res@b%
    \protected@expandtwoargs\in@{:}{\tud@res@a}%
    \ifin@\else%
      \preto\tud@res@a{Voreinstellung:}%
    \fi%
    \def\tud@res@c##1:##2\@nil{%
      \let\tud@res@a\@empty%
      \protected@edef\tud@res@c{##2}%
      \@for\tud@res@c:=\tud@res@c\do{%
        \trim@spaces@in\tud@res@c%
        \eappto\tud@res@a{%
          \ifx\tud@res@a\@empty\else,\space\fi%
          \ifin@%
            \expandafter\@firstofone%
          \else%
            \unexpanded{\PValue@Enfold*'}%
          \fi%
          {\expandonce\tud@res@c}%
        }%
      }%
      \ifx\tud@res@a\@empty%
        \def\tud@res@a{##1}%
      \else%
        \preto\tud@res@a{##1:\space}%
      \fi%
    }%
    \expandafter\tud@res@c\tud@res@a\@nil%
    \ifx\tud@res@b\relax%
      \ClassError{tudscrmanual}{Wrong format for (conditional) preset}{%
        The format `[(text:)preset|condition:preset]' is needed,\MessageBreak%
        but `[#1]' was given.%
      }%
      \let\tud@res@b\@empty%
    \fi%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\def\ProcessedArgument}{%
        \expandonce\tud@res@a\expandonce\tud@res@b%
      }%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \AP@PresetParser
% \begin{macro}{\printdeclarationlist}
% \begin{macro}{\tud@print@declarationlist}
% \begin{macro}{\tud@declaration@inner@list}
% \begin{macro}{\tud@declaration@label@list}
% \begin{macro}{\tud@declare@check}
% \begin{macro}{\tud@declare@process@eval}
% \begin{macro}{\tud@declare@result@eval}
% \begin{macro}{\tud@chg@appto}
% \begin{macro}{\Process@@Output}
% Mit dem Befehl \cs{printdeclarationlist} erfolgt die eingentliche Ausgabe 
% aller Deklarationen. Zweck ist es, mehrere \env{Declaration}-Umgebungen 
% ineinander verschachteln zu können und eine Ausgabe aller auf einmal zu 
% erzeugen. Die durch die ggf. nacheinander folgenden Deklarationen wurden in 
% entsprechenden Listen gesammelt und werden hier jetzt formatiert ausgegben.
% \ToDo{\cs{Process@@Output} notwendig? Falls ja, umbenennen}[v2.06]
% \ToDo{\cs{tud@declaration@} in \cs{tud@declare@} und verschieben}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@declaration@inner@list{}
\newcommand*\tud@declaration@label@list{}
\newcommand*\printdeclarationlist{}
\AtBeginDocument{\undef\printdeclarationlist}
\newcommand*\tud@declare@check{%
  \ifundef\printdeclarationlist{}{%
    \ClassError{tudscrmanual}{\string\printdeclarationlist\space missing}{%
      The command \string\printdeclarationlist\space must\MessageBreak%
      be used right after the last declaration environment.%
    }%
    \gundef\printdeclarationlist%
    \global\let\tud@declaration@inner@list\@empty%
  }%
}
\newcommand\Process@@Output{}
\NewDocumentCommand\tud@print@declarationlist{!o !+d()}{%
  \tud@setglue\tud@res@glue{\medskipamount*3/2}%
  \ifhmode%
    \vskip\tud@res@glue%
  \else%
    \addpenalty{\@beginparpenalty}%
    \addvspace{\tud@res@glue}%
  \fi%
  \noindent\null%
%    \end{macrocode}
% Die deklarierten Optionen, Umgebungen, Befehle etc. werden umrahmt. Dabei
% erfolgt die Ausgabe mithilfe einer Box, um die Größe des Deklarationsrahmens
% zu speichern und die Änderungsmarkierung am Seitenrand auf die richtige Höhe
% zu platzieren. Da innerhalb von Tabellen der Wert von \cs{baselineskip} auf
% \val{0pt}~gesetzt wird, muss für einen richtig platzierten Link dieser in 
% \cs{HyperRaiseLinkDefault} gesichert werden. Die Größe der Tabelle wird 
% später noch benötigt, deshalb wird diese in einer Box gesetzt.
% \ToDo{Größe der Box direkt annschließend in tud@res@... sichern}[v2.06]
% \ToDo{\cs{tud@res@a} für internen Teil der Tabelle}[v2.06]
% \ToDo{\cs{tud@res@b} für alles nach \cs{printdeclarationlist}}[v2.06]
%    \begin{macrocode}
  \begingroup%
    \let\tud@res@a\@empty%
    \let\tud@res@b\@empty%
    \def\do##1{\tud@declare@process@eval\tud@res@a\tud@res@b##1}%
    \dolistloop{\tud@declare@process@list}%
    \sbox\z@{%
      \begin{tabular}[t]{|l|@{}l@{}l@{}}%
        \cline{1-1}\noalign{\vskip\arrayrulewidth}%
        \tud@res@a%
        \cline{1-1}\noalign{\vskip\arrayrulewidth}%
      \end{tabular}%
      \IfValueT{#1}{\zap@space#1 \@empty}%
    }%
    \raisebox{\dimexpr\ht\strutbox\relax}{%
      \usebox\z@%
%    \end{macrocode}
% Danach werden ggf. die Voreinstellungen und Zusatzinformationen in etwas 
% kleinerer Schrift gesetzt.
%    \begin{macrocode}
      \IfValueT{#2}{%
        \hskip.75em%
        \begin{minipage}%
            [t][\dimexpr\ht\z@+\dp\z@-2\arrayrulewidth\relax][c]%
            {\the\dimexpr\textwidth-\wd\z@-.75em\relax}%
          #2%
        \end{minipage}%
      }%
    }%
%    \end{macrocode}
% Die Einträge in der Änderungsliste sowie die dazugehörige Randnotiz werden
% innerhalb der Deklaration mit \cs{printchangedatlist} erzeugt. Das optionale 
% Argument sorgt für die Verschiebung der Randnotiz auf die richtige Höhe, um 
% den Höhenversatz zwischen Randnotiz und Deklarationsrahmen auszugleichen.
%    \begin{macrocode}
    \edef\tud@res@c{%
      \endgroup%
%    \end{macrocode}
% Zum Schluss wird das optionale Argument (in runden Klammern) neben der
% Deklarationsbox ausgegeben.
%    \begin{macrocode}
      \expandonce\tud@res@b%
      \noexpand\tud@print@changedatlist[-\arrayrulewidth]%
    }%
  \tud@res@c%
  \gundef\printdeclarationlist%
  \par\nobreak%
  \vskip\glueexpr\medskipamount\relax%
  \@afterindentfalse\@afterheading%
}
%    \end{macrocode}
% \ToDo{
%   doc: Verarbeitung Argumente \cs{tud@declare@process@list}, siehe 
%   \cs{tud@declare@start}; 3: Änderungseintrag [...]:...:{...};
%   4: preset; 5: reference; 6: \cs{tud@declare@open}{...}=...=[...]
% }[v2.06]
% \ToDo{wozu \cs{gdef}\cs{Process@@Output}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@process@eval{m m o d() d<> m}{%
  \begingroup%
    \let\tud@res@a\@empty%
    \def\Process@Output##1{\gdef\Process@@Output{##1}}%
    #6%
    \ifx\Process@@Output\@empty\else%
      \edef\tud@res@a{\expandonce\Process@@Output&}%
      \global\let\Process@@Output\@empty%
      \IfValueT{#4}{%
        \appto\tud@res@a{\hskip.75em\relax\small\ignorespaces#4}%
      }%
      \appto\tud@res@a{&}%
      \IfValueT{#5}{%
        \appto\tud@res@a{\hskip.75em\relax\small\ignorespaces#5}%
      }%
      \appto\tud@res@a{\tabularnewline}%
    \fi%
    \let\tud@res@b\@empty%
%    \end{macrocode}
% \ToDo{doc: \cs{tud@declare@result@list} {inner markup}{label}}[v2.06]
%    \begin{macrocode}
    \def\do##1{\tud@declare@result@eval\tud@res@b[{#3}]##1}%
    \dolistloop{\tud@declare@result@list}%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\appto#1}{\expandonce\tud@res@a}%
      \unexpanded{\appto#2}{\expandonce\tud@res@b}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \ToDo{
%   doc: Verarbeitung Argumente, siehe \cs{tud@declare@result@list};
%   2: Änderungseintrag [...]:...:{...}
% }[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@result@eval{m o m m}{%
  \IfValueT{#2}{\tud@chg@appto#1#2{#3}{#4}}%
  \if@tud@declare@track%
    \tud@truncate@value\tud@lbl@tmp{#4}%
    \eappto#1{%
      \unexpanded{\listadd\tud@declaration@label@list}{\tud@lbl@tmp}%
    }%
    \appto#1{\listadd\tud@declaration@inner@list{#3}}%
  \fi%
}
%    \end{macrocode}
% \ToDo{\cs{tud@chg@appto} in \cs{tud@declare@changes@eval} umbenennen}[v2.06]
% \ToDo{
%   split von 3: \cs{tud@declare@process@eval} und 
%   \cs{tud@declare@result@list}
% }[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\tud@chg@appto{m o d:: m m m}{%
  \IfArgIsEmpty{#5}{}{%
    \appto#1{\Changed@At@Process[{#2}]<{#5}{#6}>:#3:{#4}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \Process@@Output
% \end{macro}^^A \tud@chg@appto
% \end{macro}^^A \tud@declare@result@eval
% \end{macro}^^A \tud@declare@process@eval
% \end{macro}^^A \tud@declare@check
% \end{macro}^^A \tud@declaration@label@list
% \end{macro}^^A \tud@declaration@inner@list
% \end{macro}^^A \tud@print@declarationlist
% \end{macro}^^A \printdeclarationlist
% \begin{macro}{\InlineDeclaration}
% \changes{v2.07}{2019/09/22}{neu}^^A
% \begin{macro}{\Inline@Declaration}
% \changes{v2.07}{2019/09/22}{neu}^^A
% Mit dem Befehl \cs{InlineDeclaration} kann eine Deklaration auch im Fließtext 
% erfolgen, ohne das hierfür die tabellarische Darstellung gewählt wird. 
% Vielmehr erscheint der Markup-Befehl in seiner gewöhnlichen Fließtextform, 
% allerdings werden zusätzlich ein Anker und ein Deklarationsindexeintrag 
% erstellt.
%    \begin{macrocode}
\NewDocumentCommand\InlineDeclaration{s m}{%
  \IfBooleanT{#1}{%
    \ClassWarning{tudscrmanual}{%
      There is no starred variant for \string\InlineDeclaration%
    }%
  }%
  \Inline@Declaration{#2}%
}
\NewDocumentCommand\Inline@Declaration{s t' o d== m}{%
  \begingroup%
    \tud@declare@special@start[{#3}]{#5}=#4=%
      [inline\IfBooleanT{#1}{,output=false}\IfBooleanT{#2}{,label=noalias}]%
    \tud@declare@special@end{#5}[inline]%
  \endgroup%
  \null%
}
%    \end{macrocode}
% \end{macro}^^A \Inline@Declaration
% \end{macro}^^A \InlineDeclaration
% \begin{environment}{DeclareEntity}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die Umgebung \env{DeclareEntity} wird verwendet, wenn ein zusätzliches 
% Paket oder eine weitere Klasse in Ergänzung zu den Hauptklassen dokumentiert
% wird. Hierfür wird die Umgebung \env{Entity} erst geöffnet, nachdem mit dem
% Makro \cs{tud@declare@special@start} das obligatorische Argument~-- sprich
% die Klasse oder das Paket~-- deklariert wird. Die hier definierte Umgebung 
% \env{DeclareEntity} sollte dabei direkt nach einer Gliederungsüberschrift
% genutzt werden, in welcher das zu deklarierende Element (Klasse, Paket etc.)
% genannt wird, da der Anker des erzeugten Labels weiter nach oben auf die Höhe
% der Überschirft verschoben wird. Zum Abschluss der Deklaration wird 
%\cs{tud@declare@special@end} nach dem Schließen der Umgebung \env{Entity} 
% genutzt. 
%    \begin{macrocode}
\NewDocumentEnvironment{DeclareEntity}{m !o}{%
  \tud@declare@special@start*[{#2}]{#1}[output=false]%
  \begin{Entity}{#1}%
}{%
  \end{Entity}%
  \tud@declare@special@end{#1}[]%
}
%    \end{macrocode}
% \end{environment}^^A DeclareEntity
% \begin{environment}{DeclareEntity*}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \changes{v2.05}{2015/08/04}{Indexaufteilung/-markup für Klassen und Pakete}^^A
% Die Sternversion der Umgebung \env{DeclareEntity*} ist für die vereinfachte 
% Deklaration von Klassen, Paketen etc. gedacht, bei denen keine Ausgabe 
% sondern lediglich Hyperlink, Indexeintrag und Änderungsnotiz erzeugt werden 
% sollen. Hierbei werden die beiden Befehle \cs{tud@declare@special@start} und 
% \cs{tud@declare@special@end} genutzt, wobei der Anker des erzeugten Labels
% nicht erhöht sondern auf der aktuellen Grundlinie erzeugt wird.
%    \begin{macrocode}
\NewDocumentEnvironment{DeclareEntity*}{m !o}{%
  \tud@declare@special@start*[{#2}]{#1}[output=false]%
}{%
  \tud@declare@special@end{#1}[]%
}
%    \end{macrocode}
% \end{environment}^^A DeclareEntity*
% \begin{macro}{\tud@declare@special@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@special@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die beiden Befehle dienen zur vereinfachten Deklaration. Sollte eine Ausgabe 
% erfolgen, so erfolgt diese im Fließtext und nicht tabelarisch. In jedem Fall 
% werden Hyperlink, Indexeintrag und Änderungsnotiz erzeugt. Das optionale
% Argument dient einem Änderungseintrag, das erste obligaotrische gilt der
% eigentlichen Deklaration, das zweite zur Anpassung von \cs{tud@declare@num}, 
% mit welchem das Verhalten für das Erzeugen von Ausgabe und Label gesteuert 
% wird. Die Sternvariante wird von der Umgebung \env{DeclareEntity} 
% genutzt, um Einträge in der Änderungsliste in den allgemeinen Teil zu
% schreiben.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@special@start{s o m d== r[]}{%
  \tud@declare@open{#3}=#4=[{#5}]%
  \IfValueT{#2}{%
    \IfBooleanTF{#1}{%
      \Changed@At@Process(#3):neuer Bestandteil von \TUDScript:{#2}%
    }{%
      \begingroup%
        \let\tud@res@a\@empty%
        \def\tud@res@b##1##2{%
          \appto\tud@res@a{\Changed@At@Process<##2>:##1:{#2}}%
        }%
        \tud@ref@get\tud@res@c{new}{}{|\@nil|'\@nil'}%
        \edef\tud@res@c{%
          \noexpand\forlistloop{\noexpand\tud@res@b{\expandonce\tud@res@c}}%
        }%
        \tud@res@c{\tud@declare@result@list}%
        \edef\tud@res@a{%
          \endgroup%
          \expandonce\tud@res@a%
        }%
      \tud@res@a%
    }%
    \tud@print@changedatlist%
  }%
  \tud@lbl@get\tud@lbl@tmp{#3}%
  \listeadd\tud@declaration@label@list{\tud@lbl@tmp}%
  \ignorespaces%
}
\NewDocumentCommand\tud@declare@special@end{m r[]}{%
  \tud@declare@close{#1}[{#2}]%
  \ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@special@end
% \end{macro}^^A \tud@declare@special@start
% \begin{macro}{\seeplain}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\@seeplain}
% Der Befehl \cs{seeplain} kann anstelle von \cs{see} bzw. in der Sternversion
% statt \cs{alsosee} genutzt werden. 
%    \begin{macrocode}
\NewDocumentCommand\seeplain{s m}{%
  \mbox{\emph{\IfBooleanTF{#1}{\alsoname}{\seename}}}\nobreakspace#2%
}
\NewExpandableDocumentCommand\@seeplain{s m}{%
  \IfBooleanTF{#1}{\alsoname}{\seename}\space#2%
}
%    \end{macrocode}
% \end{macro}^^A \@seeplain
% \end{macro}^^A \seeplain
% \begin{macro}{\tud@ref@get}
%    \begin{macrocode}
\newcommand*\tud@ref@get[4]{%
  \begingroup%
    \def\tud@res@d{#3}%
    \protected@edef\tud@res@a{#3}%
    \let\tud@res@b\@empty%
%    \end{macrocode}
% \ToDo{doc: !<ref>!:... als marker}[v2.06]
%    \begin{macrocode}
    \in@{:}{#3}%
    \ifin@%
      \def\tud@res@c##1:##2\@nil{%
        \def\tud@res@c####1!####2!####3\@nil{%
          \IfArgIsEmpty{####1}{%
            \def\tud@res@a{##2}%
            \def\tud@res@b{####2}%
          }{}%
        }%
        \tud@res@c##1!!\@nil%
      }%
      \tud@res@c#3\@nil%
    \fi%
    \trim@spaces@in\tud@res@a%
    \trim@spaces@in\tud@res@b%
    \begingroup%
      \@tud@res@swatrue%
      \let\tud@res@c\@empty%
      \@for\tud@res@a:=\tud@res@a\do{%
        \if@tud@res@swa%
          \trim@spaces@in\tud@res@a%
          \tud@if@markup*{\tud@res@a}{%
            \Markup@Inner@Get\tud@res@a{\tud@res@a}%
            \Markup@Replace*\tud@res@a#4{\tud@res@a}%
            \Markup@Outer@Get\tud@res@a{\tud@res@a}%
            \eappto\tud@res@c{%
              \ifx\tud@res@c\@empty\else,\space\fi%
              \expandonce\tud@res@a%
            }%
          }{%
            \@tud@res@swafalse%
          }%
        \fi%
      }%
      \edef\tud@res@c{%
        \endgroup%
        \if@tud@res@swa%
          \unexpanded{\def\tud@res@a}{\expandonce\tud@res@c}%
          \unexpanded{\ifx\tud@res@b\@empty\def\tud@res@b{#2}\fi}%
        \fi%
      }%
    \tud@res@c%
    \ifx\tud@res@b\@empty\else%
      \TUD@set@numkey{}{tud@res@c}{%
        {see}{0},{seealso}{1},%
        {equal}{2},{gobble}{3},%
        {not}{4},{discontinued}{5},{new}{6}%
      }{\tud@res@b}%
      \ifx\FamilyKeyState\FamilyKeyStateProcessed%
        \ifcase\tud@res@c\relax% see
          \let\tud@res@b\@empty%
          \def\tud@res@c##1{\seeplain{##1}}%
        \or% seealso
          \let\tud@res@b\@empty%
          \def\tud@res@c##1{\seeplain*{##1}}%
        \or% equal
          \let\tud@res@b\@empty%
          \def\tud@res@c##1{identisch zu ##1}%
        \or% gobble
          \def\tud@res@b{keine Funktionalit\"at}%
          \def\tud@res@c##1{, \seeplain{##1}}%
        \or% not
          \def\tud@res@b{nicht definiert}%
          \def\tud@res@c##1{ f\"ur ##1}%
        \or% discontinued
          \def\tud@res@b{entf\"allt}%
          \def\tud@res@c##1{, \seeplain{##1}}%
        \or% new
          \def\tud@res@b{neu}%
          \def\tud@res@c##1{, \seeplain*{##1}}%
        \fi%
        \edef\tud@res@d{%
          \expandonce\tud@res@b%
          \ifx\tud@res@a\@empty\else%
            \expandafter\expandonce\expandafter{%
              \expandafter\tud@res@c\expandafter{\tud@res@a}%
            }%
          \fi%
        }%
      \else%
        \ClassWarning{tudscrmanual}{`\tud@res@b:' is unknown as ref format}%
      \fi%
    \fi%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\def#1}{\expandonce\tud@res@d}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \tud@ref@get
%
% \subsection{Auflistung gültiger Werte von Optionen und Parametern}
%
% \begin{environment}{DeclareValues}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@main}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@addon}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@alias}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@declaration@list}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@match}
% \changes{v2.07}{2021/06/16}{neu}^^A
% Die Umgebung \env{DeclareValues} dient zur Beschreibung gültiger Werte für 
% aktuelle Deklarationen von Optionen aber auch Befehls- und Optionsparametern.
%
% Ohne optionales Argument werden in \cs{tud@declaration@inner@list} alle 
% Einträge gesucht, welche zuvor mit den Werten \cs{PMisc} oder \cs{PBoolean} 
% definiert worden und damit potenziell unterschiedliche gültige Werte annehmen 
% können. Ein optionales Argument wird dahingehend geprüft, ob es gerade in der 
% aktuellen Deklaration (\cs{tud@declaration@inner@list}) enthalten ist.
%
% Die eigentliche Listenumgebung \env{Declare@Values} für die Werte wird nach 
% der Initialisierung aufgerufen.
%    \begin{macrocode}
\newcommand*\tud@val@main{}
\newcommand*\tud@val@addon{}
\newcommand*\tud@val@alias{}
\newcommand*\tud@val@declaration@list{}
\NewDocumentEnvironment{DeclareValues}{!o +b}{%
  \tud@declare@check%
  \ifx\tud@declaration@inner@list\@empty%
    \ClassError{tudscrmanual}{Wrong usage of `DeclareValues'}{%
      The environment `DeclareValues' can only be used\MessageBreak%
      within declarations.%
    }%
  \fi%
  \begingroup%
%    \end{macrocode}
% In \cs{tud@res@a} werden alle passenden Deklarationen als Liste gespeichert. 
% Dabei sind nur solche gültig, die \cs{PMisc} oder \cs{PBoolean} verwenden. 
% Diese werden zunächst temporär in \cs{tud@val@declaration@list} gesichert.
% Der Schalter \cs{if@tud@res@swa} wird zu \val{false} gesetzt, falls keine 
% gültigen Treffer erzielt werden konnten.
%    \begin{macrocode}
    \@tud@res@swatrue%
    \let\tud@res@a\@empty%
    \let\tud@val@declaration@list\@empty%
    \def\do##1{%
      \If@Markup@Value@TF[\PMisc,\PBoolean]{##1}{%
%    \end{macrocode}
% Ohne optionales Argument wird bei mehreren Treffern eine Warnung ausgegeben.
%    \begin{macrocode}
        \IfValueF{#1}{%
          \ifx\tud@val@declaration@list\@empty\else\@tud@res@swafalse\fi%
        }%
        \listadd\tud@val@declaration@list{##1}%
      }{}%
    }%
    \dolistloop{\tud@declaration@inner@list}%
%    \end{macrocode}
% Die im optionalen Argument angegebenen Markup-Befehle werden überprüft, ob 
% diese aktuell auch tatsächlich deklariert werden. In \cs{tud@res@a} werden 
% gültige Einträge aus \cs{tud@declaration@inner@list} abgelegt, \cs{tud@res@b}
% enthält die nicht zuzuordnende Markup-Befehle, welche lediglich benötigt 
% werden, um ungültige Angaben zu melden.
%    \begin{macrocode}
    \IfValueTF{#1}{%
      \let\tud@res@b\@empty%
      \def\do##1{%
%    \end{macrocode}
% Der aktuelle Markup-Befehl wird \cs{tud@res@b} hinzugefügt und bei einem 
% Treffer durch \cs{tud@val@match} wieder entfernt.
%    \begin{macrocode}
        \listeadd\tud@res@b{\detokenize{##1}}%
        \forlistloop%
          {\tud@val@match\tud@res@a{\tud@res@b}{##1}}%
          {\tud@val@declaration@list}%
      }%
      \docsvlist{#1}%
%    \end{macrocode}
% Alle in \cs{tud@res@b} abgelegten Markup-Befehle aus dem optionalen Argument 
% konnten nicht zugeordnet werden.
%    \begin{macrocode}
      \def\do##1{%
        \ClassWarning{tudscrmanual}{%
          Argument `\detokenize{##1}' did not match\MessageBreak%
          any current declaration%
        }%
      }%
      \dolistloop{\tud@res@b}%
    }{%
%    \end{macrocode}
% Ohne optionales Argument werden alle potentiellen Einträge verwendet.
%    \begin{macrocode}
      \let\tud@res@a\tud@val@declaration@list%
    }%
%    \end{macrocode}
% Eine leere Liste ist in jedem Fall nicht akzeptabel. Ohne gültige Treffer 
% wird eine Warnung über gar keine oder zu viele, nicht spezifizerte Kandidaten
% ausgegeben.
%    \begin{macrocode}
    \ifx\tud@res@a\@empty%
      \@tud@res@swafalse%
    \fi%
    \if@tud@res@swa\else%
      \let\tud@res@c\@empty%
      \def\do##1{%
        \def\tud@res@d{##1}%
        \Markup@Outer@Get\tud@res@d{\tud@res@d}%
        \eappto\tud@res@c{%
          \detokenize\expandafter{\tud@res@d}\noexpand\MessageBreak%
        }%
      }%
      \ifx\tud@res@a\@empty%
        \let\tud@res@a\tud@declaration@inner@list%
        \@tud@res@swafalse%
      \else%
        \@tud@res@swatrue%
      \fi%
      \dolistloop{\tud@res@a}%
      \if@tud@res@swa%
        \ClassWarning{tudscrmanual}{%
          Multiple matching declarations, one or more of\MessageBreak%
           \tud@res@c should be specified with the\MessageBreak%
           optional argument of `DeclareValues'%
        }%
      \else%
        \ClassWarning{tudscrmanual}{%
          None of the given declarations:\MessageBreak%
          \tud@res@c\IfValueT{#1}{was matched or }holds a special value%
        }%
      \fi%
      \let\tud@res@a\@empty%
    \fi%
%    \end{macrocode}
% Am Ende der Initialisierung enthält \cs{tud@val@declaration@list} alle 
% Einträge aus \cs{tud@declaration@inner@list}, die für die nachfolgende 
% Deklaration der Werte verwendet werden.
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\tud@val@declaration@list}{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
  \begin{Declare@Values}#2\end{Declare@Values}%
}{}
\NoIndentAfterEnv{DeclareValues}
%    \end{macrocode}
% Hiermit wird geprüft, ob der explizit angegebenen Markupbefehl im dritten 
% Argument mit dem einzelnen Eintrag aus \cs{tud@declaration@inner@list} im
% vierten Argument korreliert.
%    \begin{macrocode}
\newcommand*\tud@val@match[4]{%
%    \end{macrocode}
% Der Vergleich selbst erfolgt auf Basis der zugehörigen Labels.
%    \begin{macrocode}
  \begingroup%
    \@tud@res@swafalse%
    \tud@lbl@get\tud@res@a{#3}%
    \tud@lbl@@get\tud@res@b{#4}%
    \ifx\tud@res@a\tud@res@b%
      \@tud@res@swatrue%
    \else%
      \tud@truncate@value\tud@res@b{\tud@res@b}%
      \ifx\tud@res@a\tud@res@b%
        \@tud@res@swatrue%
      \fi%
    \fi%
%    \end{macrocode}
% Korrelieren die Angaben wird der Eintrag aus \cs{tud@declaration@inner@list} 
% in die Liste im ersten Argument geschrieben und der Markup-Befehl aus der 
% Liste des zweiten Arguments entfernt.
%    \begin{macrocode}
    \edef\tud@res@c{%
      \endgroup%
      \if@tud@res@swa%
        \unexpanded{\listadd#1{#4}}%
        \unexpanded{\listeremove#2{\detokenize{#3}}}%
      \fi%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \tud@val@match
% \end{macro}^^A \tud@val@declaration@list
% \end{macro}^^A \tud@val@alias
% \end{macro}^^A \tud@val@addon
% \end{macro}^^A \tud@val@main
% \end{environment}^^A DeclareValues
%
% \begin{environment}{Declare@Values}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\itemval}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@item@val}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@item@@val}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@val@format}
% \changes{v2.07}{2021/06/16}{neu}^^A
%    \begin{macrocode}
\AtBeginDocument{%
  \newcommand*\itemval{}%
  \undef\itemval%
}
%    \end{macrocode}
% Der Befehl \cs{itemval} ist nur innerhalb von \env{Declare@Values} gültig.
%    \begin{macrocode}
\newcommand*\tud@item@@val{%
  \let\itemval\tud@item@val%
}
\tud@list@create[before=\tud@item@@val]{Declare@Values}{description}{1}
%    \end{macrocode}
% Innerhalb von \env{DeclareValues} kann mit \cs{itemval} das resultierende 
% Verhalten für die Wertzuweisung an eine Option respektive einen Parameter 
% beschrieben werden. Mit der Sternversion lässt sich dabei die Einstellung 
% für den Säumniswert hervorheben. 
%
% Im obligatorischen Argument |=|\meta{Wert}|=| können die möglichen Werte 
% einer Option oder eines Parameters angegeben werden. Sind mehrere Werte
% gleichbedeutend verwendbar, so sind diese mit Komma zu trennen, wobei der 
% erste angegebene Wert für den Untereintrag in den Index verwendet wird. Das 
% erste optionale Argument kann genutzt werden, falls sich der Säumniswert
% beispielsweise für eine Klasse unterscheidet. Das optionale Argument in 
% Guillemets lässt sich für einen Querverweis auf eine weitere Deklaration 
% nutzen. Das letzte optionale Argument fügt einen Änderungseintrag hinzu.
%    \begin{macrocode}
\NewDocumentCommand\tud@item@val{s r== d() d<> o}{%
  \begingroup%
%    \end{macrocode}
% Zunächst werden die Werte aus dem obligatorischen Argument formatiert, wobei 
% für zusätzliche Werte die unformatierten Einträge in \cs{tud@val@alias} zum 
% erzeugen von Labeln, die formatierte Ausgabe in \cs{tud@val@addon} abgelegt 
% wird. Der (formatierte) Haupteintrag wird in \cs{tud@val@main} gesichert.
%    \begin{macrocode}
    \tud@val@format\tud@val@main\tud@val@addon\tud@val@alias{#1}{#2}%
%    \end{macrocode}
% Erstellen des Säumniswertes aus optionalen Argumenten.
%    \begin{macrocode}
    \let\tud@res@d\@empty%
    \IfValueTF{#3}{%
      \appto\tud@res@d{\suffix{S\"aumniswert f\"ur #3}}%
    }{%
      \IfBooleanT{#1}{\appto\tud@res@d{\suffix{S\"aumniswert}}}%
    }%
%    \end{macrocode}
% Erstellen des optionalen Querverweises mithilfe des Markup-Befehls, wobei 
% kein Indexeintrag erzeugt (\verb+||+) und die Seitenzahl der Deklaration 
% referenziert (|'page'|) wird.
%    \begin{macrocode}
    \IfValueT{#4}{%
      \tud@ref@get\tud@res@a{see}{#4}{||'page'}%
      \eappto\tud@res@d{%
        {\unexpanded{\hfill\suffixsize}\expandonce\tud@res@a}%
      }%
    }%
%    \end{macrocode}
% Die in \cs{tud@val@declaration@list} gespeicherten Basis-Deklarationen werden 
% genutzt, um die spezifischen Werte zu deklarieren. Dabei wird lediglich der 
% erste Eintrag inlusive der möglichen Werte ausgegeben. Alle nachfolgenden 
% Einträge aus der Liste werden ohne Ausgabe deklariert (Label, Index).
%    \begin{macrocode}
    \let\tud@res@a\@empty%
    \def\do##1{%
      \begingroup%
%    \end{macrocode}
% Der in der Basis-Deklaration gegebene Wert wird durch den spezifischen mit 
% \cs{Markup@Replace} ersetzt.
%    \begin{macrocode}
        \edef\tud@res@b{%
          \unexpanded{\Markup@Replace\tud@res@b}%
            =\expandonce\tud@val@main=%
            \ifx\tud@val@addon\@empty\else[{\expandonce\tud@val@addon}]\fi%
        }%
        \tud@res@b{##1}%
        \Markup@Outer@Get\tud@res@b{\tud@res@b}%
        \edef\tud@res@c{%
          \endgroup%
%    \end{macrocode}
% In \cs{tud@res@a} werden alle Werte-Deklarationen abgelegt, wobei auch 
% Änderungseinträge sowie mögliche Alias-Label beachtet werden. Sobald ein 
% Eintrag exisitiert, werden alle folgenden Deklarationen mit der Sternversion 
% von \cs{Inline@Declaration} zur Unterdrückung der Ausgabe.
%    \begin{macrocode}
          \unexpanded{\appto\tud@res@a}{%
            \noexpand\Inline@Declaration\ifx\tud@res@a\@empty\else*\fi'%
              \unexpanded{[{#5}]}%
              =\expandonce\tud@val@alias=%
              {\expandonce\tud@res@b}%
          }%
        }%
      \tud@res@c%
    }%
    \dolistloop{\tud@val@declaration@list}%
%    \end{macrocode}
% Abschließend erfolgt die Ausgabe des generierten Eintrags mit \cs{item}. 
% Aufgrund der ggf. mehrmaligen Verwendung von \cs{Inline@Declaration} im 
% optionalen Argument von \cs{item}, würde auch \cs{tud@print@changedatlist} 
% mehrmalig ausgeführt werden, was zu Problemen bei der Ausgabe führt. Deshalb 
% wird \cs{tud@print@changedatlist} zunächst unschädlich gemacht und direkt 
% nach dem Label von \cs{item} aufgerufen.
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\item[{%
        \unexpanded{\let\tud@print@changedatlist\relax}%
        \ifx\tud@res@a\@empty%
          \PValue{???=#2}%
        \else%
          \expandonce\tud@res@a\expandonce\tud@res@d%
        \fi%
      }]%
    }%
  \tud@res@a%
  \tud@print@changedatlist[-1\baselineskip]%
}
%    \end{macrocode}
% Mit diesem Makro wird die kommaseparierte Liste möglicher Werte im letzten 
% Argument formatiert.
%    \begin{macrocode}
\newcommand*\tud@val@format[5]{%
  \begingroup%
    \protected@edef\tud@res@a{#5}%
    \let\tud@res@b\@empty%
    \let\tud@res@c\@empty%
    \let\tud@res@d\@empty%
    \@for\tud@res@a:=\tud@res@a\do{%
      \trim@spaces@in\tud@res@a%
      \ifx\tud@res@a\@empty\else%
%    \end{macrocode}
% Die kommaseparierte Liste wird nach boolschen Werten durchsucht. Diese werden 
% bei der Ausgabe immer als erstes gesetzt, wobei bei mehreren boolschen Werten 
% nur der zuerst aufgetretene akzeptiert wird.
%    \begin{macrocode}
        \TUD@set@ifkey{}{@tempswa}{\tud@res@a}%
        \ifx\FamilyKeyState\FamilyKeyStateProcessed%
          \ifx\tud@res@b\@empty%
            \let\tud@res@b\tud@res@a%
            \if@tempswa%
              \preto\tud@res@d{true,on,yes,}%
            \else%
              \preto\tud@res@d{false,off,no,}%
            \fi%
          \else%
            \ClassWarning{tudscrmanual}{%
              \string\itemval\space already read boolean value\MessageBreak%
              `\tud@res@b' so `\tud@res@a' is ignored%
            }%
          \fi%
        \else%
%    \end{macrocode}
% Für nicht-boolsche Werte wird im Nachgang geprüft (\cs{tud@res@c}), ob die 
% aktuellen Deklarationen auf entsprechend angegeben wurden.
%    \begin{macrocode}
          \eappto\tud@res@c{%
            \ifx\tud@res@c\@empty\else,\fi\expandonce\tud@res@a%
          }%
          \eappto\tud@res@d{,\expandonce\tud@res@a}%
        \fi%
      \fi%
    }%
%    \end{macrocode}
% Sollte mindestens ein nicht-boolscher Wert angegeben worden sein, wird hier 
% geprüft, ob die aktuellen Deklarationen nicht mit |\PBoolean| erfolgt sind.
%    \begin{macrocode}
    \ifx\tud@res@c\@empty\else%
      \def\do##1{%
        \If@Markup@Value@TF[\PBoolean]{##1}{%
          \def\tud@res@a{##1}%
          \Markup@Outer@Get\tud@res@a{\tud@res@a}%
          \ClassWarning{tudscrmanual}{%
            \string\itemval\space read a non-boolean value(s)\MessageBreak%
            `\tud@res@c' so the declaration of\MessageBreak%
            `\tud@res@a'\MessageBreak%
            should be done with `\string\PMisc'%
          }%
        }{}%
      }%
      \dolistloop{\tud@val@declaration@list}%
    \fi%
%    \end{macrocode}
% Die kommaseparierte Liste \cs{tud@res@d} möglicher Werte wird verarbeitet und 
% die Werte werden formatiert, wobei die Sternversion von \cs{itemval} für die 
% Formatierung als Säumniswert genutzt wird. Der erste Wert wird insbesondere 
% für den Indexeintrag benötigt und in \cs{tud@res@a} gesichert, alle weiteren
% Einträge werden in \cs{tud@res@b} gespeichert und lediglich bei der Ausgabe
% aufgelistet. In \cs{tud@res@c} werden die weiteren Einträge unformatiert 
% abgelegt.
%    \begin{macrocode}
    \let\tud@res@a\@empty%
    \let\tud@res@b\@empty%
    \let\tud@res@c\@empty%
    \def\do##1{%
      \def\tud@res@d{##1}%
      \IfBooleanTF{#4}{%
        \PValue@Enfold*{\tud@res@d}%
      }{%
        \PValue@Enfold{\tud@res@d}%
      }%
      \ifx\tud@res@a\@empty%
        \let\tud@res@a\tud@res@d%
      \else%
        \eappto\tud@res@b{\PValue{/}\expandonce\tud@res@d}%
        \eappto\tud@res@c{\ifx\tud@res@c\@empty\else,\fi\expandonce\tud@res@d}%
      \fi%
    }%
    \expandafter\docsvlist\expandafter{\tud@res@d}%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\expandonce\tud@res@a}%
      \unexpanded{\def#2}{\expandonce\tud@res@b}%
      \unexpanded{\def#3}{\expandonce\tud@res@c}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@val@format
% \end{macro}^^A \tud@item@@val
% \end{macro}^^A \tud@item@val
% \end{macro}^^A \itemval
% \end{environment}^^A Declare@Values
%
% \subsection{Tabelle für mehrsprachigen Bezeichner}
%
% \begin{macro}{\TermTable}
% \begin{macro}{\Term@Table}
% \begin{macro}{\Term@@Table}
% \begin{macro}{\Term@@@Table}
% Für sprachabhängige Bezeichner wird zusätzlich der Befehl \cs{TermTable} 
% definiert. Dieser kann innerhalb von \env{Declaration} verwendet werden, um 
% alle mit \cs{Term} definierten Bezeichner für die Sprachen Deutsch und
% English in einer Tabelle auszugeben. Wird im optionalen Argument eine Länge 
% angegeben, wird diese für die Breite einer \env{tabularx}-Umgebung genutzt.
% \ToDo{replace \cs{selectlanguage} with \env{otherlanguage}}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\TermTable{!o}{%
  \ifhmode\par\fi%
  \vskip\smallskipamount%
  \@afterindentfalse\@afterheading%
  \begingroup%
%    \end{macrocode}
% Mit \cs{Term@Table} wird \cs{tud@declaration@inner@list} nach Einträgen von 
% \cs{Term} durchsucht und die deklarierten Werte in einer kommaseparierten
% Liste gespeichert.
%    \begin{macrocode}
    \let\tud@res@a\@empty%
    \def\do##1{\Term@Table\tud@res@a\@nil##1\@nil}%
    \dolistloop{\tud@declaration@inner@list}%
    \ifx\tud@res@a\@empty%
      \ClassWarning{tudscrmanual}{No declaration for Terms found}%
    \else%
%    \end{macrocode}
% Die extrahierten Werte werden für die Ausgabe der Tabelle verwendet.
%    \begin{macrocode}
      \IfValueTF{#1}{%
        \begin{tabularx}{\dimexpr\glueexpr#1\relax\relax}[b]{lXX}%
          \expandafter\Term@@Table\expandafter{\tud@res@a}%
        \end{tabularx}%
      }{%
        \begin{tabular}[b]{lll}%
          \expandafter\Term@@Table\expandafter{\tud@res@a}%
        \end{tabular}%
      }%
    \fi%
  \endgroup%
}
\newcommand*\Term@Table{}
\def\Term@Table#1\@nil#2#3#4\@nil{\tud@if@strequal{Term}{#2}{\appto#1{#3,}}{}}%
%    \end{macrocode}
% Das Setzen der eigentlichen Tabelle.
%    \begin{macrocode}
\newcommand*\Term@@Table[1]{%
  \toprule%
  \textbf{Bezeichner} & \textbf{Deutsch} & \textbf{Englisch}\tabularnewline%
  \midrule%
  \forcsvlist{\Term@@@Table}{#1}%
  \bottomrule%
}
\newcommand*\Term@@@Table[1]{%
  \Term*{#1} & %
  \tud@if@strempty{\csuse{#1}}{\PName{leer}}{\csuse{#1}} & %
  \strut\selectlanguage{english}%
  \tud@if@strempty{\csuse{#1}}{\PName{empty}}{\csuse{#1}}\tabularnewline%
}
%    \end{macrocode}
% \end{macro}^^A \Term@@@Table
% \end{macro}^^A \Term@@Table
% \end{macro}^^A \Term@Table
% \end{macro}^^A \TermTable
%
% \iffalse
%</class>
%</body>
%<*option>
% \fi
%
% \subsection{Index}
%
% Hier erscheint alles, was für Erstellen und Ausgabe der einzelnen Indexe 
% notwendig ist. Diese werden via \app {splitindex} aus |\jobname.idx| 
% extrahiert und anschließend mit \app{texindy} prozessiert.
%
% \begin{macro}{\tud@index@make}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@index@list}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@name}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@title}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@ref}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@toc}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@cols}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% Mit \cs{tud@index@make} werden die Einstellungen für das Erstellen der 
% einzelnen Indexe gespeichert, wobei mit dem ersten optionalen Argument die 
% Spezifizierung erfolgt, welche im Nachgang durch \app{splitindex} genutzt 
% wird. Das zweite optionale Argument enthält die Bezeichnung des Indexes, 
% welche bei der Referenzierung auf diesen genutzt wird. Wird dieses nicht 
% angegeben, wird der Indextitel des obligatorischen Argumentes verwendet. Alle 
% vorgenommenen Einstellungen werden in |\tud@index@set@@|\meta{name} gesichert 
% und später durch \cs{tud@index@print} 
%    \begin{macrocode}
\newcommand*\tud@index@name{\jobname}
\newcommand*\tud@index@title{\indexname}
\newcommand*\tud@index@ref{\tud@index@title}
\newcommand*\tud@index@toc{\tud@index@title}
\newcommand*\tud@index@cols{2}
\newcommand*\tud@index@list{}
\NewDocumentCommand\tud@index@make{O{\jobname} d() m}{%
  \begingroup%
    \edef\tud@index@name{#1}%
    \IfValueTF{#2}{%
      \def\tud@index@ref{#2}%
    }{%
      \def\tud@index@ref{Index der #3}%
    }%
    \def\tud@index@title{#3}%
    \tud@toks@{}%
    \def\tud@res@a##1{%
      \addto@hook@expandafter\tud@toks@{%
        \expandafter\def\expandafter##1\expandafter{##1}%
      }%
    }%
    \tud@res@a\tud@index@name%
    \tud@res@a\tud@index@ref%
    \tud@res@a\tud@index@title%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\tud@unique@add\noexpand\tud@index@list{\tud@index@name}%
      \noexpand\csdef{tud@index@set@@#1}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\tud@index@make(Allgemeiner Index){Allgemeines}
\tud@index@make[options]{Klassen- und Paketoptionen}
\tud@index@make[macros](Index der Befehle und Umgebungen)
  {Befehle und Umgebungen mit zugeh\"origen Parametern}
%<*class>
\tud@index@make[terms](Index der Bezeichner){Sprachabh\"angige Bezeichner}
\tud@index@make[elements]{Seitenstile, Schriftelemente und Farben}
%</class>
\tud@index@make[misc]{L\"angen und Z\"ahler}
\tud@index@make[files]{Klassen, Pakete und Dateien}
%    \end{macrocode}
% \end{macro}^^A \tud@index@cols
% \end{macro}^^A \tud@index@toc
% \end{macro}^^A \tud@index@ref
% \end{macro}^^A \tud@index@title
% \end{macro}^^A \tud@index@name
% \end{macro}^^A \tud@index@list
% \end{macro}^^A \tud@index@make
% \begin{macro}{\tud@changes@make}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@changes@list}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% Die Änderungsliste wird anhand aller mmöglichen Versionen von \TUDScript 
% (\cs{tud@v@list}) erzeugt.
%    \begin{macrocode}
%<*class>
\newcommand*\tud@changes@list{}
\NewDocumentCommand\tud@changes@make{m}{%
  \tud@unique@add\tud@changes@list{changes-v#1}%
}
\AfterClass{\TUD@Class@Parent}{\forlistloop\tud@changes@make{\tud@v@list}}
%</class>
%    \end{macrocode}
% \end{macro}^^A \tud@changes@list
% \end{macro}^^A \tud@changes@make
% \begin{macro}{\tud@xdy@settings}
% \changes{v2.05}{2019/10/30}{neu}^^A
% \begin{macro}{\tud@xdy@mdfive}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@xdy@log}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% Die notwendigen Einstellungen für den Aufruf von \app{texindy} werden in 
% \cs{tud@xdy@settings} definiert. Dabei werden sowohl die Eingabekodierung als 
% auch die Dokumentsprache beachtet. Diese werden erst am Ende des Dokumentes 
% ausgewertet, da diese an diesem Punkt in jedem Fall definiert sind und der 
% Aufruf von \app{texindy} ohnehin erst nach dem Ende des Dokumentes erfolgt.
%    \begin{macrocode}
\newcommand*\tud@xdy@settings{}
\edef\tud@xdy@settings{texindy -M \@currname.\@currext-ind.xdy}
\AtEndDocument{%
  \tud@if@language@main{german}{%
    \appto\tud@xdy@settings{ -L german-din}%
  }{}%
  \eappto\tud@xdy@settings{%
    \space-C \ifundef\inputencodingname{utf8}{\inputencodingname}%
  }%
}
%    \end{macrocode}
% Das Erstellen der Indexdatei \file{\string\jobname.idx} wird hier definiert.
% Damit nicht bei jedem Aufruf mit \file{-{}-shell-escape} die Indexe neu 
% erstellt werden, wird mit \cs{pdf@filemdfivesum} geprüft, ob sich die Datei 
% \file{\string\jobname.idx} überhaupt seit dem letzten Aufruf geändert hat. 
% Hierfür wird die Prüfsumme der Datei \file{\string\jobname.idx} in die 
% aux"~Datei geschrieben. Lediglich bei einer detektierten Änderung der
% Indexdatei \file{\string\jobname.idx} wird \app{splitindex} aufgerufen.
%    \begin{macrocode}
\newcommand*\tud@xdy@mdfive{}
\newcommand*\tud@xdy@log{}
\edef\tud@xdy@log{\jobname.xlg}
\if@filesw
  \tud@newwrite\@indexfile%
  \immediate\openout\@indexfile=\jobname.idx%
  \typeout{Writing index file \jobname.idx}%
  \BeforeClosingMainAux{%
    \immediate\closeout\@indexfile%
%    \end{macrocode}
% Die Prüfsumme der Indexdatei wird temporär in \cs{tud@res@a} gesichert. 
% Zusätzlich wird die Prüfsumme der Logdatei |\jobname.xlg| nach dem Aufruf 
% verglichen, um zu detektieren, ob der Aufruf von \app{splitindex} gefolgt von 
% \app{texindy} auch erfolgreich war. Hierfür wird \cs{tud@res@b} genutzt.
%    \begin{macrocode}
    \@tud@res@swafalse%
    \edef\tud@res@a{\pdf@filemdfivesum{\jobname.idx}}%
    \edef\tud@res@b{\pdf@filemdfivesum{\tud@xdy@log}}%
    \edef\tud@res@c{%
      splitindex%
        \space-m\space'\tud@xdy@settings\space2>\string&1'%
        \space\jobname.idx%
    }%
    \ifnum\pdf@strcmp{\tud@res@a}{\tud@xdy@mdfive}=\z@\else%
      \ifnum\pdf@shellescape=\@ne\relax%
%<*class>
        \ClassInfo{tudscrmanual}%
%</class>
%<*package>
        \PackageInfo{tudscrmanual}%
%</package>
          {invoking: \tud@res@c}%
        \begingroup%
          \everyeof{\noexpand}%
          \endlinechar=\m@ne%
          \edef\tud@res@c{%
            \noexpand\@@input\string|%
              \string"\tud@res@c\space>\tud@xdy@log\string"\space%
          }%
          \tud@res@c%
        \endgroup%
%    \end{macrocode}
% Wurde keine (neue) Logdatei erstellt, war der Aufruf nicht erfolgreich.
%    \begin{macrocode}
        \ifnum\pdf@strcmp{\pdf@filemdfivesum{\tud@xdy@log}}{\tud@res@b}=\z@%
%<*class>
          \ClassWarningNoLine{tudscrmanual}%
%</class>
%<*package>
          \PackageWarningNoLine{tudscrmanual}%
%</package>
          {%
            \tud@res@c\MessageBreak%
            was called but there is no result%
          }%
%    \end{macrocode}
% Bei einem erfolgreichen Aufruf wird die Prüfsumme auf den neuen Wert gesetzt.
%    \begin{macrocode}
        \else%
          \let\tud@xdy@mdfive\tud@res@a%
        \fi%
      \else%
%<*class>
        \ClassWarningNoLine{tudscrmanual}%
%</class>
%<*package>
        \PackageWarningNoLine{tudscrmanual}%
%</package>
        {%
          The index file `\jobname.idx' has changed. Run again\MessageBreak%
          with --shell-escape flag enabled or just call\MessageBreak%
          \tud@res@c%
        }%
      \fi%
    \fi%
%    \end{macrocode}
% Die Prüfsumme muss \emph{immer} in die aux"~Datei geschrieben werden.
%    \begin{macrocode}
    \immediate\write\@mainaux{%
      \string\gdef\string\tud@xdy@mdfive{\tud@xdy@mdfive}%
    }%
  }%
\fi
%    \end{macrocode}
% \end{macro}^^A \tud@xdy@log
% \end{macro}^^A \tud@xdy@mdfive
% \end{macro}^^A \tud@xdy@settings
%
% \iffalse
%</option>
%<*body>
% \fi
%
%
% \subsubsection{Definition von Indexeinträgen}
%
% \begin{macro}{\makeindex}
% \begin{macro}{\@wrindex}
% \begin{macro}{\index}
% \begin{macro}{\@index}
% \begin{macro}{\@gobbleopt@one}
% \changes{v2.07}{2021/06/15}{neu}^^A
% Die Befehle für das Erzeugen von Indexeinträgen werden neu definiert, um via 
% \cs{index}\oarg{Index}\marg{Eintrag} mit einem optionalen Argument einen 
% spezifischen Index angegeben zu können.
%    \begin{macrocode}
\let\makeindex\@empty
\@onlypreamble\makeindex
\undef\@wrindex
\newcommand*\@wrindex[2][\jobname]{%
  \protected@write\@indexfile{\@sanitize}{%
    \string\indexentry[#1]{#2}{\thepage}%
  }%
}
\def\index{%
  \@bsphack\begingroup%
  \@sanitize%
  \@ifnextchar[%]
    {\@index}%
    {\@index[\jobname]}%
}
\def\@index[#1]#2{%
  \xifinlist{#1}{\tud@index@list}{}{%
    \xifinlist{#1}{\tud@changes@list}{}{%
      \ClassWarning{tudscrmanual}{Index `#1' was never defined}%
    }%
  }%
  \tud@if@strequal{\jobname}{#1}{%
    \tud@idx@parse{#1}{#2}%
  }{%
    \@wrindex[{#1}]{#2}%
  }%
  \endgroup\@esphack%
}
\NewExpandableDocumentCommand\@gobbleopt@one{o m}{}
\tud@addtocontents@special*{\let\index\@gobbleopt@one}
%    \end{macrocode}
% \end{macro}^^A \@gobbleopt@one
% \end{macro}^^A \@index
% \end{macro}^^A \index
% \end{macro}^^A \@wrindex
% \end{macro}^^A \makeindex
% \begin{macro}{\tud@idx@parse}
% \begin{macro}{\tud@idx@@parse}
% \begin{macro}{\tud@idx@@@parse}
% \begin{macro}{\tud@idx@@@@parse}
% \begin{macro}{\tud@idx@@@@@parse}
% Mit diesen Makros wird ein Eintrag für den allgemeinen Index in der Form 
% \meta{Eintrag}|!|\meta{Untereintrag}|@|\meta{Markup}\verb+|+\meta{Attribut}
% evaluiert, um für diesen einen passenden Anker für einen Hyperlink zu setzen.
%    \begin{macrocode}
\newcommand*\tud@idx@parse[2]{%
  \in@{|}{#2}%
  \ifin@%
    \tud@idx@@parse#2\@nil{#1}%
  \else%
    \tud@idx@@parse#2|\@nil{#1}%
  \fi%
}
\newcommand*\tud@idx@@parse{}
\def\tud@idx@@parse#1|#2\@nil#3{%
  \tud@idx@@@parse{#1}{#2}{#3}%
}
\newcommand*\tud@idx@@@parse[3]{%
  \begingroup%
    \let\tud@res@a\@empty%
    \let\tud@res@b\@empty%
    \expandafter\tud@idx@@@@parse\detokenize{#1}!\@nil%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\@wrindex[{#3}]{%
        \tud@res@a\IfArgIsEmpty{#2}{}{\unexpanded{|#2}}%
      }%
    }%
  \tud@res@a%
}
\newcommand*\tud@idx@@@@parse{}
\def\tud@idx@@@@parse#1!#2\@nil{%
  \@expandtwoargs\in@{\detokenize{@}}{\detokenize{#1}}%
  \ifin@%
    \tud@idx@split\tud@res@c{#1}%
    \expandafter\tud@idx@@@@@parse\tud@res@c%
  \else%
    \tud@idx@@@@@parse{#1}{#1}%
  \fi%
  \IfArgIsEmpty{#2}{}{%
    \appto\tud@res@a{!}%
    \appto\tud@res@b{"!}%
    \tud@idx@@@@parse#2\@nil%
  }%
}
\newcommand*\tud@idx@@@@@parse[2]{%
  \appto\tud@res@b{#1}%
  \eappto\tud@res@a{%
    \unexpanded{#1}\detokenize{@}%
    \unexpanded{\string\hypertargetraised}{indexentry:\expandonce\tud@res@b}%
    \unexpanded{#2}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@@@@@parse
% \end{macro}^^A \tud@idx@@@@parse
% \end{macro}^^A \tud@idx@@@parse
% \end{macro}^^A \tud@idx@@parse
% \end{macro}^^A \tud@idx@parse
% \begin{macro}{\tud@idx@join}
% \begin{macro}{\tud@idx@split}
% \begin{macro}{\tud@idx@@split}
% Hiermit können Indexeinträge mit Sortierschlüssel und Markup zusammengesetzt 
% sowie aufgetrennt werden.
%    \begin{macrocode}
\newcommand*\tud@idx@join[3]{%
  \edef#1{\detokenize{#2}\detokenize{@}\detokenize{#3}}%
}
\newcommand*\tud@idx@split[2]{%
  \begingroup%
    \edef\tud@idx@split{#2}%
    \expandafter\tud@idx@@split\tud@idx@split\@nil%
    \edef\tud@idx@split{%
      \endgroup%
      \unexpanded{\def#1}{\tud@idx@split}%
    }%
  \tud@idx@split%
}
\newcommand*\tud@idx@@split{}
\expandafter\def\expandafter\tud@idx@@split%
    \expandafter#\expandafter1\detokenize{@}#2\@nil{%
  \def\tud@idx@split{{#1}{#2}}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@@split
% \end{macro}^^A \tud@idx@split
% \end{macro}^^A \tud@idx@join
%
% \subsubsection{Erstellen von Indexeinträgen}
%
% \begin{macro}{\Process@Index}
% \changes{v2.05}{2015/11/15}{neu}^^A
% \begin{macro}{\Process@@Index}
% \changes{v2.05}{2015/11/15}{neu}^^A
% \begin{macro}{\tud@idx@attribute@get}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@idx@write}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% Mit \cs{Process@Index} wird geprüft, ob mit dem im zweiten obligatorischen 
% Argument enthaltenen Markup-Befehl ein Indexeintrag erzeugt werden soll. 
% Ein Indexeintrag kann mit der Sternversion eines Markup-Befehls explizit 
% unterdrückt werden, wobei der boolesche Wert im ersten obligatorischen 
% Argument an \cs{Process@Index} zu Prüfung übergeben wird. Außerdem wird für
% obsolete Deklarationen ebenso wie bei aktiviertem Schalter \cs{if@tud@index} 
% kein Eintrag erstellt. In allen genannten Fällen passiert beim Aufruf von 
% \cs{Process@Index} nichts, andernfalls wird \cs{Process@@Index} ausgeführt.
%
% Die auf die zwei obligatorischen Argumente folgenden optionalen sind in der
% Nomenklatur identisch zu den bisherigen Erläuterungen, der vollständige 
% Funktionsaufruf lautet:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@Index}\marg{Stern?}\marg{Element}^^A
%   |=|\meta{Wert}|=|\oarg{Anmerkung}\parg{Entität}^^A
%   \verb+|+\meta{Indexmarkup}\verb+|+^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\Process@Index{o m m r// r== r[] r|| r() r<>}{%
  \begingroup%
    \@tud@res@swafalse%
    \ifnum\tud@index@mode@num>\m@ne\relax
      \IfBooleanF{#1}{%
        \ifcsdef{Markup@Format@@Index@@#2}{\@tud@res@swatrue}{%
          \IfValueT{#7}{%
%<*class>
            \ClassWarning{tudscrmanual}%
%</class>
%<*package>
            \PackageWarning{tudscrmanual}%
%</package>
            {%
              Markup command `\tud@markup@detokenize{#2}{...}' was\MessageBreak%
              defined without index, |#7| is useless%
            }%
          }%
        }%
      }%
    \fi%
    \let\tud@res@a\relax%
    \if@tud@res@swa%
      \ifcase\tud@absnum\tud@declare@mode@num\relax\relax% inline
        \tud@idx@attribute@get\tud@res@a{#7}%
      \or% declaration
        \ifnum\tud@declare@mode@num>\z@\relax%
          \def\tud@res@a{!(}%
        \else%
          \def\tud@res@a{!)}%
        \fi%
      \or% inline declaration
        \ifnum\tud@declare@mode@num>\z@\relax%
          \def\tud@res@a{!}%
        \fi%
      \fi%
    \fi%
    \protected@edef\tud@res@a{%
      \endgroup%
      \ifx\tud@res@a\relax\else%
        \noexpand\Process@@Index%
          {#2}{#3}/#4/=#5=[{#6}]%
          \ifx\tud@res@a\@empty\else|\tud@res@a|\fi(#8)<#9>%
      \fi%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Mit \cs{Process@@Index} erfolgt die eigentliche Erzeugung des Indexeintrages.
%    \begin{macrocode}
\NewDocumentCommand\Process@@Index{m m r// r== r[] d|| r() r<>}{%
%    \end{macrocode}
% Dabei erledigt \cs{tud@idx@get} einen Großteil der Aufgabe. Mit besagtem 
% Makro werden Schlüssel und Format für den gewünschten Indexeintrag erzeugt.
% Sollte optional ein spezieller |=|\meta{Wert}|=| für einen Schlüssel gegeben
% sein, so wird ggf. auch der passende Haupteintrag erstellt.
%    \begin{macrocode}
  \begingroup%
    \tud@idx@get\tud@res@a<#8>{{#1}{#2}/#3/=#4=[{#5}](#7)}%
    \tud@idx@write{#1}|#6|{\tud@res@a}%
%<*class>
    \ifnum\tud@declare@mode@num>\z@\relax%
      \tud@idx@aux@write{#8}{\tud@res@a}%
      \tud@if@param@special{#4}{%
        \tud@truncate@value\tud@lbl@tmp{#8}%
        \xifinlist{\tud@lbl@tmp}{\tud@declaration@label@list}{}{%
          \expandafter\tud@idx@aux@write\expandafter{\tud@lbl@tmp}{\tud@res@a}%
        }%
      }{}%
    \fi%
%</class>
  \endgroup%
}
\newcommand*\tud@idx@attribute@get[2]{%
  \begingroup%
    \ifnum\tud@index@mode@num>\z@\relax%
      \let\tud@res@b\@empty%
    \else%
      \let\tud@res@b\relax%
    \fi%
    \ifnum\tud@index@mode@num>\m@ne\relax%
      \IfValueT{#2}{%
        \TUD@set@numkey{}{tud@res@a}{%
          \TUD@bool@numkey,{}{0},{.}{1},{?}{2},{!}{3}%
        }{#2}%
        \ifx\FamilyKeyState\FamilyKeyStateProcessed%
          \ifcase\tud@res@a\relax%
            \let\tud@res@b\relax%
          \or% default
            \let\tud@res@b\@empty%
          \or% important
            \def\tud@res@b{?}%
          \or% declare
            \def\tud@res@b{!}%
          \fi%
        \else%
          \ClassWarning{tudscrmanual}{%
            The index specification |#2| is\MessageBreak%
            unknown. Only |.| or |?| and |!| as well as || or\MessageBreak%
            booleans are valid%
          }%
        \fi%
      }%
    \fi%
    \edef\tud@res@a{%
      \endgroup%
      \ifx\tud@res@b\relax%
        \unexpanded{\let#1\relax}%
      \else%
        \unexpanded{\def#1}{\tud@res@b}%
      \fi%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@idx@write{m d|| m}{%
  \begingroup%
    \protected@edef\tud@res@a{#3}%
    \edef\tud@res@c{%
      \expandafter\expandafter\expandafter\noexpand%
      \csname Markup@Format@@Index@@#1\endcsname%
    }%
    \def\tud@res@d##1:##2:##3\@nil{%
      \def\tud@res@b{##1}%
      \IfArgIsEmpty{##2}{}{\preto\tud@res@a{##2!}}%
    }%
    \expandafter\tud@res@d\tud@res@c::\@nil%
%    \end{macrocode}
% \ToDo{split an "!" und jeden Eintrag auch verwenden?}[v2.06]
% \ToDo{falls ja, nur wenn \cs{tud@declare@mode@num}>0?}[v2.06]
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\index[{\tud@res@b}]{%
        \expandonce\tud@res@a\IfValueT{#2}{\unexpanded{|#2}}%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@write
% \end{macro}^^A \tud@idx@attribute@get
% \end{macro}^^A \Process@@Index
% \end{macro}^^A \Process@Index
%
% \iffalse
%<*class>
% \fi
%
%
% \subsubsection{Indexeinträge für Deklarationen}
%
% Werden im Handbuch Optionen, Befehle etc. deklariert, wird für diese der
% formatierte Indexeintrag in die aux"~Datei geschrieben. Dies dient zum einen 
% der Kontrolle auf Duplikate und zum anderen als Shortcut, um die formatierten 
% Indexeinträge nicht permanent neu generieren zu müssen.
% \begin{macro}{\tud@idx@aux@write}
% \begin{macro}{\tud@idx@aux@declare}
% \begin{macro}{\tud@if@idx@aux@exists}
% \begin{macro}{\tud@idx@aux@read}
%    \begin{macrocode}
\newcommand*\tud@idx@aux@write[2]{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \edef\tud@res@a{\detokenize\expandafter{\tud@res@a}}%
    \protected@write\@auxout{}{\string\tud@idx@aux@declare{#1}{\tud@res@a}}%
    \csxdef{tud@idx@lbl@@#1}{\tud@res@a}%
  \endgroup%
}
\newrobustcmd*\tud@idx@aux@declare[2]{%
  \tud@if@idx@aux@exists{#1}{%
    \ClassWarningNoLine{tudscrmanual}{%
      Index entry for\MessageBreak`#1'\MessageBreak was already defined%
    }%
  }{}%
  \csxdef{tud@idx@lbl@@#1}{\detokenize{#2}}%
}
\@onlypreamble\tud@idx@aux@declare
\AtEndDocument{\let\tud@idx@aux@declare\@gobbletwo}
\newcommand*\tud@if@idx@aux@exists[1]{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\ifcsundef{tud@idx@lbl@@#1}%
    }%
  \tud@res@a{%
    \expandafter\@secondoftwo%
  }{%
    \expandafter\@firstoftwo%
  }%
}
\newcommand*\tud@idx@aux@read[2]{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \endgroup%
      \unexpanded{\letcs#1}{tud@idx@lbl@@#2}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@aux@read
% \end{macro}^^A \tud@if@idx@aux@exists
% \end{macro}^^A \tud@idx@aux@declare
% \end{macro}^^A \tud@idx@aux@write
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Formatierung von Indexeinträgen}
%
% \begin{macro}{\tud@idx@get}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@@get}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@@@get}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@key}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@fmt}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@tmp}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\AP@TruncateStar}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% Mit dem Makro \cs{tud@idx@get} wird die Formatierung eines Indexeintrags für 
% einen Markup-Befehl realisiert. Für das Sortieren der Indexeinträge kommt 
% \app{texindy} zum Einsatz. Um die Indexeinträge wie gewünscht zu Formatieren, 
% gibt es zwei Möglichkeit. 
%
% Bei der ersten Variante würde der Indexeintrag einfach direkt mit den 
% Markup-Befehlen erstellt und in der \app{texindy}-Stildatei wird für alle
% Auszeichnungsbefehle die passende |merge-rule| erstellt, um die korrekte 
% Sortierung zu gewährleisten. Tatsächlich war in einer früheren Version genau
% das der Ansatz. Allerdings können die manuell erstellten RegExp-Regeln durch 
% \hrfn{http://sourceforge.net/p/xindy/bugs/22/}{\app{texindy} nicht korrekt}
% genutzt werden, weshalb der Ansatz verworfen wurde.
%
% Damit das Sortieren verlässlich funktioniert, werden die Einträge für den 
% Index deshalb in der gewohnten Syntax von \app{makeindex} in der Form
% \meta{Schlüsselwort}|@|\meta{Markup} erstellt. Diese Syntax kann auch mit
% \app{texindy} genutzt werden. 
%
% An \cs{tud@idx@get} werden vier obligatorische gefolgt von vier optionalen 
% Argumenten übergeben. Die ersten beiden Argumente sind die Makros, in welche
% \meta{Schlüsselwort}~-- für gewöhnlich \cs{tud@idx@key}~-- sowie die 
% Formatierung \meta{Markup}~-- normalerweise \cs{tud@idx@fmt}~-- expandiert 
% werden. Mit dem Makro im dritten Argument wird es möglich, Untereinträge zu 
% einem \meta{Schlüsselwort} für beispielsweise Parameter von Umgebungen oder
% Befehlen (\cs{Key}) sowie spezielle Schlüsselwerte von Optionen zu erzeugen.
% Dabei wird vor der Erstellung des Untereintrages der direkt zuvor generierte
% Indexhaupteintrag ins dritte Argument~-- normalerweise \cs{tud@idx@val}~--
% gesichert. Das vierte und letzte obligatorische Argument enthält schließlich 
% den eigentlichen Markup-Befehl, für welchen der Indexeintrag erzeugt werden 
% soll. 
%
% Daran schließen sich vier optionale Argumente an, mit denen die Formatierung 
% des Indexeintrags differenziert werden kann. Das erste optionale Argument 
% |=|\meta{Wert}|=| kann wie bereits gewohnt für das Hinzufügen eines
% Schlüsselwertes genutzt werden. Das zweite, ordinäre optionale Argument 
% \oarg{Anmerkung} fügt dem Eintrag in den Index eine zusätzliche Anmerkung
% hinzu. Soll der Indexeintrag für ein spezifisches Paket oder eine Klasse aus
% dem \TUDScript-Bundle erstellt werden, wird das optionale Argument in runden 
% Klammern \parg{\string\Class\marg{Klasse}/\string\Package\marg{Paket}} für 
% einen Verweis auf das \parg{Entität} verwendet, der in \cs{@idxbundle} 
% gespeichert wird. Das Argument \verb+|+\meta{Indexmarkup}\verb+|+ wird bei
% Deklarationen zur Unterdrückung von Untereinträgen verwendet.
% Der vollständige Funktionsaufruf lautet:
% \newline\begingroup\scriptsize^^A
%   \cs{tud@idx@get}\cs{tud@idx@key}\cs{tud@idx@fmt}^^A
%   \cs{tud@idx@val}\marg{Elem.}|=|\meta{Wert}|=|\oarg{Anm.}^^A
%   \parg{Entität}\verb+|+\meta{Indexmark.}\verb+|+^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\newcommand*\tud@idx@tmp{}
\NewDocumentCommand\tud@idx@get{m r<> m}{%
  \begingroup%
    \tud@idx@robustify%
    \ifnum\tud@declare@mode@num>\z@\relax%
      \let\tud@res@c\@secondoftwo%
    \else%
      \def\tud@res@c{\tud@if@idx@aux@exists{#2}}%
    \fi%
    \tud@res@c{%
      \tud@idx@aux@read\tud@idx@tmp{#2}%
    }{%
      \let\tud@idx@tmp\@empty%
      \tud@idx@@get#3%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@idx@tmp}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@idx@@get{o m m d// d== o d|| d'' r()}{%
  \def\tud@res@c##1##2##3{%
    \tud@if@idx@aux@exists{##1}{##2}{%
      \ClassWarning{tudscrmanual}{%
        Index entry for\MessageBreak%
        `##1'\MessageBreak%
        is not defined%
      }%
      ##3%
    }%
  }%
  \tud@lbl@@get\tud@lbl@tmp{{#2}{#3}/#4/(#9)}%
  \xifinlist{\tud@lbl@tmp}{\tud@declaration@label@list}{%
    \tud@if@idx@aux@exists{\tud@lbl@tmp}{%
      \tud@idx@aux@read\tud@idx@tmp{\tud@lbl@tmp}%
      \appto\tud@idx@tmp{!}%
    }{}%
  }{}%
  \ifx\tud@idx@tmp\@empty%
    \IfValueT{#4}{%
      \tud@lbl@@get\tud@lbl@tmp{{#2}{#3}(#9)}%
      \tud@res@c{\tud@lbl@tmp}{%
        \tud@idx@aux@read\tud@idx@tmp{\tud@lbl@tmp}%
      }{%
        \tud@idx@@@get\tud@idx@tmp{#2}{#3}(#9)%
      }%
      \appto\tud@idx@tmp{!}%
    }%
    \IfValueT{#5}{%
      \tud@if@param@special{#5}{}{%
%    \end{macrocode}
% \ToDo{suffix parameter generell nicht in index?}[v2.06]
%    \begin{macrocode}
        \tud@lbl@@get\tud@lbl@tmp{{#2}{#3}/#4/(#9)}%
        \tud@res@c{\tud@lbl@tmp}{%
          \tud@idx@aux@read\tud@idx@tmp{\tud@lbl@tmp}%
          \let\tud@res@b\@empty%
        }{%
          \tud@idx@@@get\tud@res@b{#2}{#3}/#4/(#9)%
        }%
        \eappto\tud@idx@tmp{\expandonce\tud@res@b!}%
      }%
    }%
  \fi%
  \tud@toks@{\tud@idx@@@get}%
  \ifx\tud@idx@tmp\@empty%
    \addto@hook\tud@toks@{*}%
  \fi%
  \addto@hook\tud@toks@{\tud@res@b{#2}{#3}/#4/=#5=(#9)}%
  \the\tud@toks@%
  \ifx\tud@idx@tmp\@empty\else%
    \IfValueT{#5}{%
      \tud@if@param@special{#5}{}{%
        \begingroup%
          \tud@idx@split\tud@res@c{\tud@res@b}%
          \edef\tud@res@d{%
            \endgroup%
            \unexpanded{\tud@idx@join\tud@res@b}%
              {\expandafter\@firstoftwo\tud@res@c}%
              {\noexpand\nosuffix{\expandafter\@secondoftwo\tud@res@c}}%
          }%
        \tud@res@d%
      }%
    }%
  \fi%
  \eappto\tud@idx@tmp{\expandonce\tud@res@b}%
}
\newcommand*\tud@idx@key{}
\newcommand*\tud@idx@fmt{}
\newcommand*\AP@TruncateStar[1]{%
  \begingroup%
    \def\tud@res@a##1*##2\@nil{\def\tud@res@a{##1}}%
    \tud@res@a#1*\@nil%
    \edef\tud@res@a{%
      \endgroup%
      \def\noexpand\ProcessedArgument{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@idx@@@get{s m m >{\AP@TruncateStar}m d// d== r()}{%
  \begingroup%
    \@tud@res@swatrue%
    \IfBooleanF{#1}{%
      \IfValueT{#5}{\@tud@res@swafalse}%
      \IfValueT{#6}{\@tud@res@swafalse}%
    }%
    \protected@edef\tud@res@a{#7}%
    \ifx\tud@res@a\tud@ety@gnrl%
      \let\tud@res@a\@empty%
    \fi%
    \Markup@Suffix@@Select[\protected@edef\tud@res@b]{}{#3}%
    \begingroup%
% Nachdem ein möglicher Haupteintrag für Parameter erzeugt wurde, folgt nun 
% der formatierte Indexeintrag für das aktuelle Markup-Element. Um diesen zu
% erstellen, wird für \meta{Schlüsselwort} zunächst nur der Inhalt des
% Hauptargumentes benötigt. Dieser wird hier in das zweite Argument
% expandiert, der ggf. erzeugte Haupteintrag in das vierte. Für \cs{Key} ist
% hier nur noch das zweite Argument relevant.
%    \begin{macrocode}
      \Markup@Expandable%
      \protected@edef\tud@res@c{%
        \endgroup%
        \unexpanded{\def\tud@idx@key}{%
          \IfValueTF{#5}{#5}{#4}%
          \if@tud@res@swa\tud@res@b\fi%
          \IfValueT{#6}{\space#6}%
          \if@tud@res@swa%
            \ifx\tud@res@a\@empty\else\space(\tud@res@a)\fi%
          \fi%
        }%
      }%
    \tud@res@c%
    \def\tud@res@b{{#3}{#4}/#5/=#6=}%
    \eappto\tud@res@b{%
      \unexpanded{|\@nil|'\@nil'}%
      (\ifx\tud@res@a\@empty\noexpand\@nil\else\expandonce\tud@res@a\fi)%
    }%
    \Markup@Outer@Get\tud@idx@fmt{\tud@res@b}%
%    \end{macrocode}
% Verwenden des Suffix, wenn gewünscht.
% \ToDo{weiter nach oben?}[v2.07]
%    \begin{macrocode}
    \if@tud@res@swa%
      \@tud@res@swafalse%
      \ifx\tud@res@a\@empty\else%
        \ifx\tud@res@a\tud@ety@dflt\else%
          \Entity@Level@Get\tud@res@c{#3}%
          \ifnum\tud@res@c>\tw@\relax%
            \@tud@res@swatrue%
          \fi%
        \fi%
      \fi%
      \if@tud@res@swa%
        \eappto\tud@idx@fmt{\noexpand\idxsuffix{\expandonce\tud@res@a}}%
      \fi%
    \fi%
%    \end{macrocode}
% Die Auszeichnung für den Indexeintrag besteht in erster Linie aus dem 
% Markup-Befehl selbst. Damit ein |@|"~Zeichen beispielsweise in einem 
% Makronamen korrekt verarbeitet wird, wird dieses im Stil von \app{makeindex} 
% mit |"| maskiert.
%    \begin{macrocode}
    \tud@replace@@in\tud@idx@key{@}{"@}%
    \tud@replace@@in\tud@idx@key{!}{"!}%
    \tud@replace@@in\tud@idx@key{|}{"|}%
    \tud@replace@@in\tud@idx@fmt{@}{"@}%
    \tud@replace@@in\tud@idx@fmt{!}{"!}%
    \tud@replace@@in\tud@idx@fmt{|}{"|}%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\tud@idx@join#2}{\tud@idx@key}{\tud@idx@fmt}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \AP@TruncateStar
% \end{macro}^^A \tud@idx@tmp
% \end{macro}^^A \tud@idx@fmt
% \end{macro}^^A \tud@idx@key
% \end{macro}^^A \tud@idx@@@get
% \end{macro}^^A \tud@idx@@get
% \end{macro}^^A \tud@idx@get
%
% \subsubsection{Indexausgabe}
%
% Hier wird alles definiert, was zur Ausgabe der einzelnen, mit \app{splitindex}
% unterteilten und \app{texindy} prozessierten Indexe notwendig ist.
%
% \begin{environment}{theindex}
% \begin{macro}{\seeidx}
% \begin{macro}{\tud@index@hook}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@index@print}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\tud@index@prologue}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@index@item}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@index@vskip}
% \changes{v2.02}{2014/09/02}{neu}^^A
% Mit \cs{tud@index@print} erfolgt die Ausgabe der einzelnen Indexe, wobei im 
% ersten optionalen Argument der gewünschte, mittels \app{splitindex} erzeugte 
% Index und im zweiten optionalen Argument eine Präambel angegben werden kann.
% Ein möglicher Seitenumbruch wird vor dem Index und nicht nach der Präambel 
% bevorzugt. Vor dem Einbinden werden die mittels \cs{tud@index@make} in 
% |\tud@index@set@@|\meta{name} gesicherten Einstellungen gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@prologue{}
\NewDocumentCommand\tud@index@print{!O{\jobname} !+d()}{%
  \IfFileExists{\jobname-#1.ind}{%
    \pagebreak[3]%
    \IfValueTF{#2}{%
      \def\tud@index@prologue{\nopagebreak#2\par}%
    }{%
      \let\tud@index@prologue\nopagebreak%
    }%
    \csuse{tud@index@set@@#1}%
    \@input@{\jobname-#1.ind}%
  }{%
%<*class>
    \ClassWarning{tudscrmanual}%
%</class>
%<*package>
    \PackageWarning{tudscrmanual}%
%</package>
    {%
      No processed index file found,\MessageBreak%
      `\jobname-#1.ind' does not exist%
    }%
    \global\let\tud@xdy@mdfive\@empty%
  }%
}
%    \end{macrocode}
% Mit \cs{tud@index@item} erfolgt eine generalisierte Definition für Einträge 
% im Index in den einzelnen Ebenen. Diese wird anstelle von \cs{@idxitem} 
% genutzt, um mit \cs{penalty} Umbrüche in tieferen Ebenen zu reduzieren.
%    \begin{macrocode}
\newcommand*\tud@index@item[2][\relax]{%
  \par\penalty\numexpr#2*50-50\relax#1%
  \hspace*{\dimexpr\numexpr#2\relax em\relax}%
  \hangindent=\dimexpr\numexpr2*#2+3\relax em/2\relax%
}
%    \end{macrocode}
% Hiermit wird der zwischen den einzelnen Gruppierungen im Index eingefügte 
% Abstand definiert. Dieser wird via \cs{indexspace} gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@vskip[1][\smallskipamount]{%
  \vskip\glueexpr1#1\@plus1#1\@minus.5#1\relax%
}
%    \end{macrocode}
% Die Umgebung \env{theindex}. Die Ebenenbefehle \cs{item} etc. sowie die 
% vertikalen Abstände werden definiert. Zusätzliche Definitionen können via 
% \cs{tud@index@hook} hinzugefügt werden. Weiterhin wird ein referenzierbares
% Label erstellt und der gegebenenfalls mit \cs{tud@index@prologue} angegebene 
% Prolog gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@hook{}
\RenewDocumentEnvironment{theindex}{+b}{%
  \def\lettergroup##1{\minisec{##1}}%
  \def\item{\tud@index@item{0}}%
  \def\subitem{\tud@index@item{1}}%
  \def\subsubitem{\tud@index@item{2}}%
  \def\subsubsubitem{\tud@index@item{3}}%
  \def\indexspace{\tud@index@vskip[\bigskipamount]}%
  \tud@index@hook%
%    \end{macrocode}
% Ein Index kann gegebenenfalls in mehreren Spalten gesetzt werden, wofür die 
% Umgebung \env{multicols} aus dem gleichnamigen Paket genutzt wird.
%    \begin{macrocode}
  \def\tud@res@a{%
    \addsec[%
      reference=\tud@index@ref,%
      tocentry=\tud@index@toc%
    ]{\tud@index@title\label{idx:\tud@index@name}}%
    \markdouble{\tud@index@ref}%
    \tud@index@prologue%
  }%
  \ifnum\tud@index@cols>\@ne\relax%
    \long\def\tud@res@b##1{%
      \setlength\columnsep{\f@size\p@}%
      \setlength\columnseprule{\z@}%
      \begin{multicols}{\tud@index@cols}[\tud@res@a]%
      ##1%
      \end{multicols}%
    }%
  \else%
    \long\def\tud@res@b##1{\tud@res@a##1}%
  \fi%
  \tud@res@b{%
    \setparsizes{\z@}{\z@\@plus.1\baselineskip}{\z@\@plus1fil}%
    \par@updaterelative%
    \tud@raggedright%
    #1%
  }%
}{}
\newcommand*\seeidx[1]{\pageref{idx:#1}}
%    \end{macrocode}
% \end{macro}^^A \tud@index@vskip
% \end{macro}^^A \tud@index@item
% \end{macro}^^A \tud@index@prologue
% \end{macro}^^A \tud@index@print
% \end{macro}^^A \tud@index@hook
% \end{macro}^^A \seeidx
% \end{environment}^^A theindex
% \begin{macro}{\cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\cleverseealso}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\tud@cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \changes{v2.05k}{2017/03/20}{neu}^^A
% \begin{macro}{\seesep}
% \changes{v2.06o}{2022/08/03}{neu}^^A
% Diese Befehle dienen zum smarten Setzen von Hinweisen im Index. Existiert 
% lediglich dieser Hinweis im Index, wird dieser mit dem Präfix \cs{seename} 
% ausgegeben. Sind jedoch für einen Indexeintrag auch Seitenzahlen vorhanden, 
% so werden diese zuerst ausgegeben, danach folgt der Querverweis mit dem 
% Präfix \cs{seealsoname}. Der Befehl \cs{cleverseealso} verwendet letzteren 
% Präfix in jedem Fall.
%    \begin{macrocode}
\newrobustcmd*\seesep{\txb}%
\newrobustcmd*\cleversee{\tud@cleversee{\seename}}
\newrobustcmd*\cleverseealso{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrmanual}%
%</package>
    {You should use `|see' instead of `|seealso'}%
  \tud@cleversee{\alsoname}%
}
%    \end{macrocode}
% Diese Makro übernimmt die eigentliche Arbeit. Es ist darauf angewiesen, dass 
% die angegebene Seitenzahlen eines Indexeintrages erst \emph{nach} den
% Hinweisen ausgegeben und mit \cs{relax} abgeschlossen werden. Dies wird mit
% der später definierten Stildatei für \app{texindy} sichergestellt. So wird es 
% möglich, dass das Makro \cs{tud@cleversee} das zweite obligatorische Argument 
% bis zu \cs{relax} parsen kann und abhängig davon die Ausgabe gestaltet.
%    \begin{macrocode}
\newcommand*\tud@cleversee{}
\def\tud@cleversee#1#2\relax{%
  \begingroup%
    \let\cleversee\@empty%
    \let\cleverseealso\@empty%
    \let\tud@res@a\@empty%
    \def\tud@res@b{#2}%
%    \end{macrocode}
% Im Index erzeugte Verweise mit \verb+|+|see| werden vor Seitenzahlen angegben 
% und von diesen durch |\\| getrennt. Bei der Ausgabe soll diese Reihenfolge 
% jedoch getauscht werden.
%    \begin{macrocode}
    \def\tud@res@c##1\\##2\@nil{%
      \appto\tud@res@a{##1}%
      \def\tud@res@b{##2}%
      \trim@spaces@in\tud@res@b%
      \in@{\\}{##2}%
    }%
%    \end{macrocode}
% Es besteht die Möglichkeit, dass für einen Eintrag mit \verb+|+|see| sowie 
% \verb+|+|seealso| oder \verb+|+|seeunverified| unterschiedliche Verweise 
% existieren, die jeweils mit |\\| voneinander getrennt sind. Diese werden mit 
% dieser Schleife zusammengefasst.
%    \begin{macrocode}
    \in@true%
    \@whilesw\ifin@\fi{%
      \expandafter\tud@res@c\tud@res@b\@nil%
    }%
%    \end{macrocode}
% Falls mindestens ein Eintrag mit einer Seitenzahl exisitert, wird das 
% führende Trennzeichen |;| ans Ende angehangen.
%    \begin{macrocode}
    \ifx\tud@res@b\@empty%
      \mbox{\emph{#1}}%
    \else%
      \tud@res@b\space\linebreak[1]\mbox{\emph{\alsoname}}%
    \fi%
%    \end{macrocode}
% Die Verweise erhalten einen Link auf den entsprechenden Indexeintrag.
%    \begin{macrocode}
    \def\tud@res@b{\nobreakspace}%
    \def\do##1{%
      \def\tud@res@c{##1}%
      \trim@spaces@in\tud@res@c%
      \tud@res@b%
      \begingroup%
        \tud@if@markup*{##1}{%
          \Markup@Split@Get*\tud@res@d{##1}%
          \Markup@Suffix@@Select[\protected@edef\tud@res@d]{}{%
            \expandafter\@firstoftwo\tud@res@d%
          }%
        }{%
          \let\tud@res@d\@empty%
        }%
        \Markup@Expandable%
        \let\DistributionGeneral\@DistributionGeneral%
        \def\seesep{!}%
        \protected@edef\tud@res@d{%
          \endgroup%
          \noexpand\hyperlink{indexentry:\tud@res@c\tud@res@d}%
        }%
      \tud@res@d{\tud@res@c}%
      \def\tud@res@b{;\space}%
    }%
    \expandafter\dossvlist\expandafter{\tud@res@a}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \seesep
% \end{macro}^^A \tud@cleversee
% \end{macro}^^A \cleverseealso
% \end{macro}^^A \cleversee
% \begin{macro}{\PrintIndex}
% \changes{v2.02}{2014/08/20}{neu}^^A
% Mit \cs{PrintIndex} erfolgt die Ausgabe aller mit \app{splitindex} erzeugten 
% und \app{texindy} prozessierten Indexe.
%    \begin{macrocode}
\newcommand*\PrintIndex{%
  \begingroup%
%<*class>
    \cleardoublepage%
%</class>
    \@ifpackageloaded{bookmark}{\bookmarksetup{startatroot}}{}%
    \tud@index@mode@num=-2\relax%
%<*class>
    \setchapterpreamble{%
      \begin{abstract}%
        \noindent%
        Die Formatierung der Eintr\"age in allen aufgef\"uhrten Indexen ist %
        folgenderma\ss{}en aufzufassen: \textbf{Zahlen in fetter Schrift} %
        verweisen auf die \textbf{Erkl\"arung} zu einem Stichwort, wobei in %
        der digitalen Fassung dieses Handbuchs dieser Eintrag selbst ein %
        Hyperlink zu seiner Erl\"auterung ist. Seitenzahlen in normaler %
        Schriftst\"arke hingegen deuten auf zus\"atzliche Informationen, %
        wobei diese f\"ur \textit{kursiv hervorgehobene Zahlen} als besonders %
        \textit{wichtig} erachtet werden.\par %
        In den themenspezifischen Indexen wird f\"ur alle Eintr\"age, welche %
        nicht durch \TUDScript sondern von anderen Klassen oder Paketen zur %
        Verf\"ugung gestellt werden, dies im Suffix des entsprechenden %
        Eintrages angegeben. Existiert f\"ur einen solchen Eintrag %
        \emph{keine} direkte \textbf{Erl\"auterung} ist dementsprechend auch %
        kein Hyperlink verf\"ugbar.%
      \end{abstract}%
    }%
    \addchap{\indexname\label{idx:index}}%
%</class>
    \tud@index@print%
    (%
%<*class>
      Die im Folgenden aufgelisteten Schlagworte sollen f\"ur den Umgang mit %
      \Logo{LaTeXe} im Allgemeinen sowie dem \TUDScript-Bundle im Speziellen %
      sowohl Antworten bei generellen Fragen liefern als auch L\"osungen f\"ur %
      typische Probleme bereitstellen. Falls ein gesuchter Begriff hier nicht %
      zu finden ist oder trotz vorhandener Hinweise kein zufriedenstellendes %
      Ergebnis erzielt werden kann, sollte das \Forum erster Anlaufpunkt %
      sein, um weitere Hilfe zu erhalten.%
%</class>
%<*package>
      \let\lettergroup\@gobble%
      \let\indexspace\relax%
%</package>
    )%
%<*class>
    \clearpage%
%</class>
    \tud@index@print[options]%
%<*class>
    (%
      Dies ist der Index aller im Handbuch erl\"auterten sowie erw\"ahnten %
      Optionen, wobei bei den meisten auch Untereintr\"age mit Seitenangaben %
      f\"ur spezielle Wertzuweisungen existieren.%
    )%
%</class>
    \tud@index@print[macros]%
%<*class>
    (%
      Dies ist eine Auflistung aller zuvor erl\"auterten sowie erw\"ahnten %
      Befehle und Umgebungen. Bei einigen sind zus\"atzliche Untereintr\"age %
      f\"ur Schl\"ussel-Wert-Parameter zu finden, die im optionalen Argument %
      der jeweiligen Anweisung verwendet werden k\"onnen. Gegebenenfalls sind %
      auch explizite Wertzuweisungen an diese Parameter angegeben.%
    )%
%</class>
%<*class>
    \tud@index@print[terms]%
    (%
      Dies sind die von \TUDScript definierten respektive erw\"ahnten, %
      sprachabh\"angigen Bezeichner. Informationen zu Nutzung und %
      Anpassungsm\"oglichkeiten sind in \autoref{sec:localization} zu finden.%
    )%
    \tud@index@print[elements]%
%</class>
    \tud@index@print[misc]%
%<*package>
    (%
      \let\lettergroup\@gobble%
      \let\indexspace\relax%
    )%
%</package>
    \tud@index@print[files]%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \PrintIndex
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\CrossIndex}
% Der Befehl \cs{CrossIndex} dient zum Eintragen eines Schlagwortes, welches im 
% ersten obligatorischen Argument angegeben wird, in den allgemeinen Index und
% verweist auf den im zweiten obligatorischen Argument, zum Schlagwort gehörigen
% Spezialindex. Das ordinäre optionale Argument kann verwendet werden, um ggf.
% den Eintrag in den allgemeinen Index, der normalerweise mit dem jeweiligen
% Schlagwort erfolgt, zu überschrieben.
%
% Wird die Sternversion von \cs{CrossIndex} genutzt, so wird der Querverweis 
% als Eintrag in der obersten Ebene gesetzt, andernfalls wird ein Untereintrag
% gesetzt. Mit der normalen Variante können so zu einem Schlagwort weitere
% Verweise im allgemeinen Index erscheinen. Das zweite obligatorische Argument
% kann eine kommagetrennte Liste enthalten.
%    \begin{macrocode}
\NewDocumentCommand\CrossIndex{m o m}{%
  \begingroup%
    \def\do##1{%
      \IfValueTF{#2}{%
        \def\tud@res@b{#2}%
        \tud@replace@in\tud@res@b{*}{##1}%
        \edef\tud@res@b{\noexpand\hyperref[{idx:#1}]{\tud@res@b}}%
      }{%
        \def\tud@res@b{\nameref{idx:#1}}%
      }%
      \protected@edef\tud@res@c{##1}%
      \trim@spaces@in\tud@res@c%
      \trim@spaces@in\tud@res@b%
%    \end{macrocode}
% Der Eintrag wird nicht mit \cs{index} sondern mit \cs{@wrindex}~-- direkt in 
% die Indexdatei~-- geschrieben, um den in diesem Fall unerwünschten Aufruf von 
% \cs{tud@idx@parse} zu vermeiden.
%    \begin{macrocode}
      \@wrindex{%
        \tud@res@c!""idx:#1@\textrightarrow\kern.1em\tud@res@b|seeidx{#1}%
      }%
    }%
    \docsvlist{#3}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \CrossIndex
% \begin{macro}{\SeeIndex}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{SeeIndex} wird unter dem im ersten Argument gegebenen Schlagwort ein
% Indexuntereintrag erzeugt, der wiederum auf einen Indexeintrag des zweiten 
% Argumentes verweist. In beiden Argumenten kann eine kommaseperierte Liste 
% genutzt werden. Für ein spezielles Markup eines Begriffes ist es außerdem 
% möglich, die gebräuchliche Notation \meta{Eintrag}|@|\meta{Markup} zu nutzen.
%
% Normalerweise wird für den Verweis die Referenzklasse \verb+|see+ verwendet.
% Die Sternversion des Befehls hingegen nutzt \verb+|seeunverified+, um auf 
% eine Existenzprüfung des Refernzeintrags durch \app{texindy} zu verzichten.
%    \begin{macrocode}
\NewDocumentCommand\SeeIndex{s m m}{%
  \begingroup%
    \def\do##1{%
      \begingroup%
        \def\do####1{%
          \protected@edef\tud@res@a{####1}%
          \trim@spaces@in\tud@res@a%
          \protected@edef\tud@res@b{##1}%
          \trim@spaces@in\tud@res@b%
          \edef\tud@res@c{%
            \noexpand\index{%
              \expandonce\tud@res@a%
              |see\IfBooleanT{#1}{unverified}{\expandonce\tud@res@b}%
            }%
          }%
          \tud@res@c%
        }%
        \docsvlist{#2}%
      \endgroup%
    }%
    \docsvlist{#3}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \SeeIndex
%
% \subsection{Änderungsliste}
%
% Um dem Anwender einen schnellen Überblick zu Änderungen der aktuellen Version 
% bereitstellen zu können, werden Befehle zur automatisierten Erzeugung einer 
% solchen Liste definiert. Die Änderungsliste ist der Klasse \cls{tudscrmanual} 
% vorbehalten.
%
% Änderungsnotizen lassen sich auf zwei unterschiedlichen Wegen generieren. 
% Entweder über die Nutzung von \cs{ChangedAt} oder über das optionale Argument
% einer der Deklarationsumgebungen. Diese sind in der Form 
% \meta{Versionsnummer}|:|\meta{Änderungsnotiz} anzugeben. Die alleinige Angabe
% der Versionsnummer ohne Änderungsnotiz ist ebenso möglich.
%
% Wird die Änderungsnotiz für ein bestimmtes Element wie eine Option oder ein 
% Befehl erstellt, wie es bei den Deklarationsumgebungen implizit oder bei der 
% Verwendung von \cs{ChangedAt} mit optionalem Argument geschieht, gibt es die 
% zusätzliche Möglichkeit, einen Untereintrag zu erstellen. Dabei ist dieser 
% nach Versionsnummer und vor Änderungsnotiz in folgender Form anzugeben: 
% \meta{Versionsnummer}|!|\meta{Untereintrag}|:|\meta{Änderungsnotiz}. Der
% Untereintrag ist für die explizite Angabe eines Schlüssel-Wert-Paares gedacht.
%
% \begin{macro}{\ChangedAt}
% \changes{v2.02}{2014/07/25}{erweitert}^^A
% \changes{v2.02}{2014/10/15}{Sternversion neu (keine Randnotiz)}^^A
% \changes{v2.06}{2018/09/03}{optionale Angabe der Entität}^^A
% \begin{macro}{\@ChangedAt}
% \changes{v2.06}{2019/06/24}{neu}^^A
% Der Befehl \cs{ChangedAt} kann im Fließtext für das Erstellen einer freien 
% Änderungsnotiz genutzt werden. Das obligatorische Argument sollt wie kurz 
% zuvor beschrieben verwendet werden.
%
% Eine Änderungsnotiz wird für die angegebene Versionsnummer normalerweise im
% Abschnitt \enquote{Allgemein} aufgeführt. Soll jedoch eine Notiz explizit für
% eine Option, eine Umgebung, einen Befehlt etc. erstellt werden, kann dieses 
% Element vor dem obligatorischen im optionalen Argument angegeben werden. Der 
% Eintrag erfolgt dann im Abschnitt \enquote{Implementierung} für das gegebene
% Element. Im obligatorischen Argument können auch mehrere Änderungsnotizen 
% gleichzeitig erzeugt werden. Hierfür sind diese mit Semikolon voneinander zu 
% trennen. Das Erzeugen der Liste erfolgt mit \cs{Changed@At@CreateList}.
%
% Normalerweise wird bei der Nutzung von \cs{ChangedAt} zusätzlich zum Eintrag
% in die Änderungsliste eine Randnotiz mit den angegebenen Versionsnummern
% erzeugt. Mit dem letzten optionalen Argument nach dem obligatorischen kann
% ein vertikaler Versatz dieser angegeben werden. Die Sternversion des Befehls 
% unterdrückt die Ausgabe der Randnotiz. 
%    \begin{macrocode}
\NewDocumentCommand\ChangedAt{s d<> m}{%
  \begingroup%
    \let\tud@res@c\@empty%
    \IfValueT{#2}{%
      \protected@edef\tud@res@a{#2}%
      \let\tud@res@c\@empty%
      \def\tud@res@d##1{\appto\tud@res@c{\Changed@At@Process[{#1}]<##1>{#3}}}%
      \@for\tud@res@a:=\tud@res@a\do{%
        \tud@if@markup{\tud@res@a}{%
          \Markup@Inner@Get\tud@res@b{\tud@res@a}%
          \expandafter\tud@lbl@@get%
            \expandafter\tud@lbl@tmp\expandafter{\tud@res@b}%
          \edef\tud@res@a{{\expandonce\tud@res@b}{\tud@lbl@tmp}}%
          \expandafter\tud@res@d\expandafter{\tud@res@a}%
        }{}%
      }%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \ifx\tud@res@c\@empty%
        \unexpanded{\Changed@At@Process[{#1}]{#3}}%
      \else%
        \expandonce\tud@res@c%
      \fi%
      \noexpand\tud@print@changedatlist%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Für Überschriften und das Inhaltsverzeichnis wird eine unschädliche und 
% expandierbare Version des Befehls definiert.
%    \begin{macrocode}
\GetDocumentCommandArgSpec\ChangedAt
\expandafter\NewExpandableDocumentCommand\expandafter\@ChangedAt\expandafter{%
  \ArgumentSpecification%
}{}%
\tud@addtocontents@special*{\let\ChangedAt\@ChangedAt}
%    \end{macrocode}
% \end{macro}^^A \@ChangedAt
% \end{macro}^^A \ChangedAt
%
% \subsubsection{Erstellen der Einträge für die Änderungsliste}
%
% Das Erstellen von Änderungsnotizen erfolgt in zwei Schritten. Diese werden 
% zuerst mit dem Befehl \cs{Changed@At@CreateList} in einer standardisierten 
% Form in der temporären Liste \cs{tud@changedat@list} gespeichert und später 
% mit dem Makro \cs{Changed@At@CreateEntry} verarbeitet. Dieses Vorgehen liegt
% in den Umgebungen für Deklarationen begründet, welche verschachtelt werden
% können, jedoch einmalig mit \cs{printdeclarationlist} abgearbeitet werden.
%
% \begin{macro}{Changed@At@Process}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{Changed@At@@Process}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \begin{macro}{\Changed@At@@@Process}
% \begin{macro}{\tud@chg@entry@list}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\tud@chg@version@list}
% Mit diesen Befehlen wird eine Liste im Format von \pkg{etoolbox} erzeugt, 
% welche alle notwendigen Angaben für das Erzeugen der Änderungshistorie in 
% Form eines Indexes mit \cs{Changed@At@CreateEntry} enthält.
%
% Der Befehl \cs{Changed@At@CreateList} kann nach dem obligatorischen Argument 
% mit einem ordinären optionalen Argument verwendet werden, in welchem ein 
% Makro, eine Umgebung, eine Option etc. angegeben wird. Ist dies der Fall, so 
% wird der Eintrag in die Änderungsliste für dieses Element generiert, sonst 
% wird eine allgemeiner Eintrag erzeugt. Das optionale Argument in runden 
% Klammern wird lediglich verwendet, wenn für eine der beiden Spezialumgebungen 
% \env{DeclareEntity*} bzw. \env{DeclareEntity} eine Änderungsnotiz erstellt
% wird, um diese für das jeweilige \TUDScript-Bundle-Element in den
% entsprechenden Abschnitt der Änderungsliste einzutragen. Das Hauptargument
% verarbeitet eine semikolongetrennte Liste und reicht jeden Bestandteil
% zusammen mit den beiden optionalen Argumenten an \cs{Changed@At@@CreateList}
% weiter. 
%    \begin{macrocode}
\newcommand*\tud@chg@entry@list{}
\newcommand*\tud@chg@version@list{}
\NewDocumentCommand\Changed@At@Process{O{\BooleanFalse} d() d<> d:: m}{%
  \begingroup%
    \let\tud@res@a\@empty%
    \def\tud@res@b##1{%
      \appto\tud@res@a{\Changed@At@@Process[{#1}](#2)<#3>:#4:{##1}}%
    }%
    \forssvlist{\tud@res@b}{#5}%
    \edef\tud@res@a{%
      \endgroup%
      \expandonce\tud@res@a%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Zuletzt wird durch \cs{Changed@At@@@CreateList} ein möglicher Untereintrag
% in ein separates Argument abgetrennt und \cs{Changed@At@@@@CreateList} mit
% allen Argumenten aufgerufen.
% \ToDo{doc: [note?] (bdl) <{internal}{lbl}> :default text: entry}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@@Process{r[] r() r<> r:: m}{%
  \begingroup%
    \tud@chg@entry@validate\tud@res@a\tud@res@b{#5}{%
      \IfBooleanF{#1}{\tud@unique@xadd\tud@chg@version@list{\tud@res@a}}%
      \tud@toks@{\Changed@At@@@Process(#2)<#3>}%
      \ifx\tud@res@b\@empty\else%
        \addto@hook@expandafter\tud@toks@{\expandafter=\tud@res@b=}%
      \fi%
      \addto@hook\tud@toks@{:#4:}%
      \addto@hook@expandafter\tud@toks@{\expandafter{\tud@res@a}}%
      \listxadd\tud@chg@entry@list{\the\tud@toks@}%
    }%
  \endgroup%
}
%    \end{macrocode}
% Der Befehl \cs{Changed@At@@@@CreateList} übernimmt nun die Erstellung des 
% Eintrags in die Liste \cs{tud@changedat@list}. Wie bereits erwähnt, enthalten 
% die beiden ersten Argumente ggf. Markup-Befehl und \TUDScript-Bundle-Element. 
% Danach folgt die Versionsnummer der Änderungsnotiz, der mögliche Untereintrag 
% für einen Markup-Befehl sowie die Änderungsnotiz selbst. 
%
% Die oberste Gliederungsebene der Änderungshistorie ist die Versionsnummer. 
% Unter dieser werden für jedes \TUDScript-Bundle-Element die Änderungsnotizen 
% separat ausgegeben, wobei diese nochmal in einen allgemeinen Teil und einen 
% zur Implementierung getrennt werden. 
%
% Der im Folgenden erzeugte Eintrag für die Liste \cs{tud@changedat@list} wird
% in zwei unterschiedlichen Varianten generiert:
% \begin{description}
%   \item[\meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}]\strut\newline
%     allgemeine Änderungsnotiz
%   \item[\meta{Versionsnummer}|!Implementierung!|\meta{Markup}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}]\strut\newline
%     Änderungsnotiz für Implementierung eines Befehls, Option etc.
% \end{description}
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@@@Process{r() r<> d== d:: m}{%
%    \end{macrocode}
% Die Aufteilung der Änderungsliste in die einzelnen \TUDScript-Bundle-Elemente 
% erfolgt entweder anhand des explizit angegebenen optionalen Argumentes in
% runden Klammern oder aber implizit über den gegenwärtigen Inhalt des Makros
% \cs{tud@ety@crnt}. Dafür wird das Makro \cs{@tempa} so definiert, dass es
% das angegebene Argument in einer Box ausführt und die gesuchte Entität in
% \cs{@tempb} gespeichert ist.
%
% Nachdem klar ist, für welche Entität ggf. der Änderungslisteneintrag erzeugt
% werden soll, wird nun bestimmt, ob dieser im allgemeinen Teil oder in den 
% zur Implementierung erscheinen soll. Dies wird an der Existenz des ersten
% Argumentes entschieden. Ist es vorhanden, handelt es sich um einen Eintrag 
% für den Implementierungsteil, welcher in \cs{tud@changedat@list} in der Form 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Implementierung!|\meta{Markup-Befehl}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% gespeichert wird, wobei der Untereintrag auch leer bleiben kann.
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
  \begingroup%
    \tud@idx@robustify%
    \IfValueTF{#1}{%
      \protected@edef\tud@res@c{#1}%
      \ifx\tud@res@c\@empty\else%
        \tud@if@markup{#1}{}{\let\tud@res@c\@empty}%
      \fi%
    }{%
      \let\tud@res@c\tud@ety@crnt%
    }%
%    \end{macrocode}
% Handelt es sich um einen allgemeinen Änderungseintrag, wird dieser in der Form
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% in der Liste \cs{tud@changedat@list} gespeichert. Für den allgemeinen Teil 
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
% wird mit der Angabe eines \TUDScript-Bundle-Elements etwas anders verfahren.
% Wurde dieses~-- wenn auch nur indirekt über eine der beiden Spezialumgebungen
% \env{DeclareEntity*} bzw. \env{DeclareEntity}~-- angegeben, so wird der 
% Eintrag in den allgemeinen Hauptteil als Untereintrag erzeugt. Erfolgte die
% Verwendung jedoch innerhalb einer \TUDScript-Bundle-Deklaration, so erscheint
% der Eintrag im allgemeinen Teil für die explizite engegebene Entität.
%    \begin{macrocode}
    \ifx\tud@res@c\@empty%
      \def\tud@res@a{""@Allgemein}%
    \else%
      \tud@chg@base@get\tud@res@a{\tud@res@c}%
    \fi%
    \IfValueTF{#2}{%
      \Changed@At@Entry@Get\tud@res@b(\tud@res@c)<#2>=#3=:#4:%
      \preto\tud@res@b{I\space}%
    }{%
      \let\tud@res@b\@empty%
      \IfValueTF{#3}{\def\tud@res@b{#3}}{\IfValueT{#4}{\def\tud@res@b{#4}}}%
      \ifx\tud@res@b\@empty\else%
        \tud@chg@general@get\tud@res@b{\tud@res@b}%
        \preto\tud@res@b{A\space}%
      \fi%
    }%
    \ifx\tud@res@b\@empty\else%
      \index[{changes-#5}]{\tud@res@a!\tud@res@b}%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@chg@version@list
% \end{macro}^^A \tud@chg@entry@list
% \end{macro}^^A \Changed@At@@@Process
% \end{macro}^^A \Changed@At@@Process
% \end{macro}^^A \Changed@At@Process
% \begin{macro}{\tud@chg@entry@validate}
% \begin{macro}{\tud@chg@base@get}
% \begin{macro}{\tud@chg@general@get}
%    \begin{macrocode}
\newcommand*\tud@chg@entry@validate[3]{%
  \begingroup%
    \in@{:}{#3}%
    \ifin@%
      \def\tud@res@c##1:##2\@nil{%
        \def\tud@res@a{##1}%
        \def\tud@res@b{##2}%
        \trim@spaces@in\tud@res@b%
      }%
      \tud@res@c#3\@nil%
    \else%
      \def\tud@res@a{#3}%
      \let\tud@res@b\@empty%
    \fi%
    \tud@v@validate{\tud@res@a}%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\def#1}{\ifx\tud@res@a\relax\else\expandonce\tud@res@a\fi}%
      \unexpanded{\def#2}{\expandonce\tud@res@b}%
      \ifx\tud@res@a\relax%
        \noexpand\@gobble%
      \else%
        \noexpand\@firstofone%
      \fi%
    }%
  \tud@res@c%
}
\newcommand*\tud@chg@base@get[2]{%
  \begingroup%
    \protected@edef\tud@res@d{#2}%
    \Markup@Split@Get\tud@res@a{#2}%
    \Misc@Expandable%
    \def\tud@res@b##1##2{%
      \Entity@Level@Get\tud@res@b{##1}%
      \Markup@Suffix@@Select[\protected@edef\tud@res@c]{}{##1}%
      \protected@edef\tud@res@c{\tud@res@b\space##2\tud@res@c}%
    }%
    \expandafter\tud@res@b\tud@res@a%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@res@c @\expandonce\tud@res@d}%
    }%
  \tud@res@a%
}
\newcommand*\tud@chg@general@get[2]{%
  \begingroup%
    \protected@edef\tud@res@b{#2}%
    \Markup@Expandable%
    \protected@edef\tud@res@a{%
      \endgroup%
      \unexpanded{\tud@idx@join#1}%
        {\tud@res@b}{\noexpand\nosuffix{\expandonce\tud@res@b}}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@chg@general@get
% \end{macro}^^A \tud@chg@base@get
% \end{macro}^^A \tud@chg@entry@validate
% \begin{macro}{\AP@ChangedAtSplit}
% Die Formatierung der Änderungseinträge erfolgt~-- wie auch für den Index~-- 
% mit dem Makro \cs{tud@idx@get}, wobei die Sternversion für die Identifikation
% als Änderungseintrag fungiert. Aufgerufen wird \cs{Process@ChangedAt} während 
% der Erstellung der Änderungseinträge mit \cs{Changed@At@CreateEntry}. Der
% Aufruf des Makros erfolgt dabei in gewohnter Form mit einem obligatorischen 
% gefolgt von drei optionalen Argumenten:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@ChangedAt}\marg{Element}|=|\meta{Wert}|=|^^A
%   \oarg{Ausgabesuffix}\parg{Entität}^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
% \ToDo{doc: 3: {markup}{label}}[v2.06]
%    \begin{macrocode}
\newcommand*\AP@ChangedAtSplit[3]{%
  \begingroup%
    \expandafter\def\expandafter\tud@res@a\expandafter{\@firstoftwo#3}%
    \expandafter\def\expandafter\tud@res@b\expandafter{\@secondoftwo#3}%
    \edef\tud@res@c{%
      \unexpanded{\tud@idx@get\tud@res@c}%
        <\expandonce\tud@res@b>{\expandonce\tud@res@a}%
    }%
    \tud@res@c%
    \edef\tud@res@c{\noexpand\SplitArgument{2}{!}{\expandonce\tud@res@c}}%
    \tud@res@c%
    \def\tud@res@c##1##2##3{%
      \If@Markup@Key@TF{\tud@res@a}{%
        \def\ProcessedArgument{{##1}{##2}{##3}}%
      }{%
        \def\ProcessedArgument{{##1}{##3}{##2}}%
      }%
    }%
    \expandafter\tud@res@c\ProcessedArgument%
    \IfValueF{#1}{%
      \IfValueF{#2}{%
        \Markup@Outer@Get\tud@res@a{\tud@res@a}%
        \ClassWarning{tudscrmanual}{%
          There is no text for a change note although\MessageBreak%
          <\detokenize\expandafter{\tud@res@a}>\MessageBreak%
          was given%
        }%
      }%
    }%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@ChangedAtSplit
% \begin{macro}{Changed@At@Entry@Get}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\Changed@At@Entry@@Get}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\Changed@At@Entry@@@Get}
% Mit diesen Makros erfolgt das eigentliche Eintragen der Änderungen aus der 
% Liste \cs{tud@changedat@list} in den Index~\val{changelog}. Der Befehl
% \cs{Changed@At@CreateEntry} wird durch \cs{@printchangedatlist} aufgerufen
% und teilt die gegebene Liste am Delimiter Ausrufezeichen |!| in fünf
% Argumente auf und reicht sie an \cs{Changed@At@@CreateEntry} weiter. Sind
% weniger als vier Ausrufezeichen vorhanden, so werden die ungenutzten 
% Argumente mit dem~-- durch das Paket \pkg{xparse} definierten~-- leeren Wert
% \val{-NoValue-} an den Befehl \cs{Changed@At@@CreateEntry} übergeben.
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@Entry@Get{%
  m r() >{\AP@ChangedAtSplit{#4}{#5}}r<> r== r::%
}{%
  \begingroup%
    \tud@toks@{\Changed@At@Entry@@Get#1}%
    \protected@edef\tud@res@a{(#2)}%
    \addto@hook@expandafter\tud@toks@{\tud@res@a}%
    \addto@hook\tud@toks@{#3=#4=:#5:}%
    \edef\tud@res@a{%
      \endgroup%
      \the\tud@toks@%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Mit \cs{Changed@At@@CreateEntry} wird der Eintrag in die Änderungshistorie
% erzeugt, falls denn überhaupt ein Eintrag generiert werden soll. Dies wird
% daran erkannt, ob das dritte Argument dew Wert \val{-NoValue-} entspricht 
% oder eben nicht. Der zweite Fall tritt auf, wenn lediglich eine Randnotiz
% gesetzt werden soll. Die in \cs{tud@changedat@list} gespeicherten Einträge 
% haben die Form 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% oder 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Implementierung!|\meta{Markup-Befehl}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@Entry@@Get{m r() m m m r== r::}{%
  \begingroup%
%    \end{macrocode}
% Bei der Deklaration von Optionen, Befehlen etc. werden diese automatisch in 
% der Liste der Änderungen im Bereich \enquote{Implementierung} vor der
% gegebenen Erklärung selbst ausgegeben. Hierfür wird die Existenz des vierten
% Arguments geprüft. Ist dieses vorhanden\dots
%    \begin{macrocode}
    \def\tud@res@b{#6}%
    \def\tud@res@c{#6}%
%    \end{macrocode}
% \dots befindet sich im dritten Argument der Markup-Befehl für den Eintrag im
% Implementierungsteil. Mit dem zwischenzeitlichen Aktivieren des Schalters
% \cs{if@tud@changedat} wird beim nachfolgenden Aufruf des Markup-Befehls das 
% Makro \cs{Process@ChangedAt} ausgeführt und dadurch auch \cs{tud@idx@get*} 
% aufgerufen, wodurch in den Makros \cs{tud@idx@key} und \cs{tud@idx@fmt} die
% passend formatierten Indexeinträge enthalten sind.
%    \begin{macrocode}
    \IfValueF{#6}{%
%    \end{macrocode}
% Das vierte Argument erstellt in der Änderungsliste einen Untereintrag für den
% im dritten Argument gegebenen Markup-Befehl. Dies wird für Anmerkungen zu 
% expliziten Schlüssel-Wert-Paaren bei Optionen oder Parametern genutzt. 
%    \begin{macrocode}
      \IfValueT{#7}{%
        \let\tud@res@b\@empty%
        \def\tud@res@c{#7}%
      }%
    }%
%    \end{macrocode}
% Nachdem die Formatierung der Haupt- und Untereinträge soweit zusammengebaut 
% wurden, wird die eigentliche Änderungsnotiz des fünften Arguments angehangen. 
% Dabei wird für den Fall, dass \emph{keine} Erklärung angegeben wurde, in der 
% Änderungsliste vermerkt, ob es sich bei dem Markup-Befehl respektive dessen 
% Untereintrag um eine \emph{neue} bzw. eine \emph{obsolete} Variante handelt.
%    \begin{macrocode}
    \let\tud@res@a\@empty%
    \IfValueT{#5}{%
      \Changed@At@Entry@@@Get\tud@res@a{#5}:\tud@res@b::\tud@res@c:(#2)%
      \let\tud@res@b\@empty%
      \def\tud@res@c{Werte angepasst}%
    }%
    \IfValueT{#4}{%
      \Changed@At@Entry@@@Get\tud@res@a{#4}:\tud@res@b::\tud@res@c:(#2)%
      \let\tud@res@b\@empty%
      \def\tud@res@c{Parameter angepasst}%
    }%
    \Changed@At@Entry@@@Get\tud@res@a{#3}:\tud@res@b::\tud@res@c:(#2)%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\tud@res@a}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Changed@At@Entry@@@Get{m m r:: r:: r()}{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \unexpanded{\def\tud@res@a}{#1}%
      \unexpanded{\def\tud@res@b}{#3}%
      \unexpanded{\def\tud@res@c}{#4}%
    }%
    \tud@res@a%
    \ifx\tud@res@a\@empty\else\preto\tud@res@a{!}\fi%
    \ifx\tud@res@b\@empty\def\tud@res@b{"|}\else\preto\tud@res@b{: }\fi%
    \ifx\tud@res@c\@empty\else\preto\tud@res@c{: }\fi%
    \tud@idx@split\tud@res@d{#2}%
    \protected@edef\tud@res@c{\expandafter\@secondoftwo\tud@res@d\tud@res@c}%
    \tud@replace@@in\tud@res@c{\idxsuffix{#5}}{}%
    \Markup@Expandable%
    \protected@edef\tud@res@b{\expandafter\@firstoftwo\tud@res@d\tud@res@b}%
    \tud@replace@@in\tud@res@b{\idxsuffix{#5}}{}%
%    \end{macrocode}
% Nachdem alles abgearbeitet wurde, wird der Indexeintrag erstellt.
%    \begin{macrocode}
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\tud@idx@join#1}{\tud@res@b}{\tud@res@c}%
      \unexpanded{\appto#1}{\tud@res@a}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \Changed@At@Entry@@@Get
% \end{macro}^^A \Changed@At@Entry@@Get
% \end{macro}^^A \Changed@At@Entry@Get
%
% \subsubsection{Spezielle Einträge für die Änderungsliste}
%
% \begin{macro}{\Changed@At@Special}
% Hiermit lassen sich zusätzliche Einträge am Ende der Änderungsliste für die 
% angegebene Version erstellen.
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@Special{o m m m}{%
  \begingroup%
    \def\do##1{%
      \tud@chg@entry@validate\tud@res@a\tud@res@b{##1}{%
        \tud@unique@xadd\tud@chg@version@list{\tud@res@a}%
        \tud@chg@general@get\tud@res@b{\tud@res@b}%
        \index[{changes-\tud@res@a}]{#2@\hyperref[#3]{#2}!\tud@res@b}%
      }%
    }%
    \dossvlist{#4}%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\tud@print@changedatlist\IfValueT{#1}{\unexpanded{[{#1}]}}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Changed@At@Special
% \begin{macro}{\Hint}
% Erstellen von Einträgen für den Abschnitt \enquote{Tipps \& Tricks}.
%    \begin{macrocode}
\newcommand*\Hint[2]{\Changed@At@Special{Tipps \& Tricks}{sec:tips}{#1:#2}}
%    \end{macrocode}
% \end{macro}^^A \Hint
%
% \subsubsection{Ausgabe der Änderungsliste}
%
% Ähnlich wie für den Index wird auch für die Änderungsliste bei der Ausgabe 
% verfahren. 
%
% \begin{macro}{\tud@print@changedatlist}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \begin{macro}{\tud@print@@changedatlist}
% Die Einträge in der Liste der Änderungen \cs{tud@changedat@list} werden mit 
% dem Makro \cs{Changed@At@CreateList} abgearbeitet, sortiert und erstellt. Das 
% zweite obligatorische Argument von \cs{@printchangedatlist} steuert den 
% vertikalen Versatz der Randnotiz. Wird im ersten Argument das boolesche Flag 
% zu \cs{BooleanTrue} gesetzt, wird die Randnotiz unterdrückt.
%    \begin{macrocode}
\newcommand*\tud@print@changedatlist[1][\z@]{%
  \begingroup%
    \ifx\tud@chg@version@list\@empty\else%
      \tud@list@sort\tud@chg@version@list%
      \let\tud@res@b\@empty%
      \forlistloop{\tud@print@@changedatlist\tud@res@b}{\tud@chg@version@list}%
      \strut%
      \marginnote{%
        \begin{tabular}[b]{|l|}%
          \hline%
          \tud@res@b%
          \hline%
        \end{tabular}%
      }[{\dimexpr\glueexpr#1\relax\relax}]%
    \fi%
    \ifx\tud@chg@entry@list\@empty\else%
      \forlistloop\@firstofone{\tud@chg@entry@list}%
    \fi%
  \endgroup%
  \global\let\tud@chg@entry@list\@empty%
  \global\let\tud@chg@version@list\@empty%
  \ignorespaces%
}
\newcommand*\tud@print@@changedatlist[2]{%
  \appto#1{%
    \ignorespaces%
    \normalfont\normalsize%
    \hyperref[{idx:changes-#2}]{#2}%
    \tabularnewline%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@print@@changedatlist
% \end{macro}^^A \tud@print@changedatlist
% \begin{macro}{\PrintChanges}
% Hiermit erfolgt die Ausgabe der Änderungsliste. Für jede Version wurde eine 
% Indexdatei |\jobname-changes-|\meta{Version}|.ind| erstellt. Diese werden 
% nachfolgend eingelesen.
%    \begin{macrocode}
\newcommand*\PrintChanges{%
  \begingroup%
    \cleardoublepage%
    \@ifpackageloaded{bookmark}{\bookmarksetup{startatroot}}{}%
    \tud@index@mode@num=-3\relax%
    \def\indexname{\"Anderungsliste}%
    \addchap{\indexname\label{idx:changes}}%
%    \end{macrocode}
% Die Änderungsliste wird einspaltig gesetzt. Jedes Element der obersten Ebene 
% soll einen kleinen vertikalen Abstand erzeugen.
%    \begin{macrocode}
    \appto\tud@index@hook{%
      \def\tud@index@cols{\@ne}%
      \let\lettergroup\@gobble%
      \let\lettergroupDefault\@gobble%
      \def\indexspace{\tud@index@vskip}%
      \def\item{%
        \def\item{\tud@index@item[\tud@index@vskip]{0}}%
        \tud@index@item{0}%
      }%
    }%
%    \end{macrocode}
% Die Versionsnummer jedes Eintrages in \cs{tud@changes@list} wird extrahiert 
% und für die Metainformationen verwendet.
%    \begin{macrocode}
    \def\do##1{%
      \begingroup%
        \def\tud@res@b{\endgroup}%
        \def\tud@res@a changes-####1\@nil{%
          \appto\tud@res@b{%
            \def\tud@index@title{\TUDScript####1}%
            \def\tud@index@toc{####1}%
            \def\tud@index@ref{\indexname\space f\"ur \TUDScript####1}%
          }%
        }%
        \tud@res@a##1\@nil%
      \tud@res@b%
      \def\tud@index@name{##1}%
      \tud@index@print[\tud@index@name]%
    }%
    \dolistloop{\tud@changes@list}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \PrintChanges
%
% \subsubsection{Kurzbeschreibung von Paketen}
%
% \begin{environment}{DeclarePackages}
% \begin{macro}{\itempkg}
% \begin{macro}{\tud@item@pkg}
% \begin{macro}{\tud@item@@pkg}
% \begin{macro}{\tud@pkg@label@list}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@pkg@declare}
% \changes{v2.07}{2021/06/16}{neu}^^A
% \begin{macro}{\tud@pkg@@declare}
% \changes{v2.07}{2021/06/16}{neu}^^A
% Ähnlich wie für die Auflistung von Werten eines Schlüssels wird auch mit der 
% Charakterisierung von Paketen verfahren. Diese werden in der Auflistung 
% speziell gekennzeichnet.
%    \begin{macrocode}
\AtBeginDocument{%
  \newcommand*\itempkg{}%
  \undef\itempkg%
}
%    \end{macrocode}
% Der Befehl \cs{itempkg} ist nur innerhalb von \env{DeclarePackages} gültig. 
% Für verschachtelte Aufrufe der Umgebung werden zu Beginn der Umgebung die 
% aktuell definierten Label in \cs{tud@pkg@label@list} gesichert, um diese vor
% jedem \cs{itempkg} als Standardwert zu verwenden.
%    \begin{macrocode}
\newcommand*\tud@pkg@label@list{}
\newcommand*\tud@item@@pkg{%
  \let\itempkg\tud@item@pkg%
  \let\tud@pkg@label@list\tud@declaration@label@list%
}
\tud@list@create[before=\tud@item@@pkg]{DeclarePackages}{description}{2}
\NoIndentAfterEnv{DeclarePackages}
%    \end{macrocode}
% Innerhalb von \env{DeclarePackages} kann mit \cs{itempkg} ein oder mehrere
% Pakete erläutert werden. Des Weiteren werden Textanker definiert, auf die im 
% Zweifelsfall in der Dokumentation verlinkt wird.
%    \begin{macrocode}
\NewDocumentCommand\tud@item@pkg{m !d() !d<> !o}{%
%    \end{macrocode}
% Im obligatorischen Argument werden die namentlich genannten Pakete deklariert 
% und ausgegeben. Mit \val=(\meta{Markup})= lassen sich auch andere Entitäten 
% angeben und in gleicher Weise deklarieren, \val=<\meta{Markup}>= unterdrückt 
% die Ausgabe erzeugt allerding Textanker und Indexeinträge. Das letzte 
% optionale Argument akzeptiert eine Änderungsnotiz.
%    \begin{macrocode}
  \begingroup%
    \let\tud@res@a\@empty%
    \forcsvlist{\tud@pkg@declare\tud@res@a{\Package'*'}}{#1}%
    \IfValueT{#2}{%
      \forcsvlist{\tud@pkg@@declare\tud@res@a}{#2}%
    }%
    \IfValueT{#3}{%
      \forcsvlist{\tud@pkg@@declare*\tud@res@a}{#3}%
    }%
%    \end{macrocode}
% Jetzt werden die Änderungsnotizen verarbeitet. Wurde lediglich eine 
% Versionsnummer angegeben, wird die definierten Pakete angehangen.
%    \begin{macrocode}
    \let\tud@res@b\@empty%
    \IfValueT{#4}{%
      \let\tud@res@d\@empty%
      \def\tud@res@b##1{%
        \in@{:}{##1}%
        \ifin@%
          \appto\tud@res@d{##1;}%
        \else%
          \let\tud@res@c\@empty%
          \docsvlist{#1}%
          \eappto\tud@res@d{##1:\expandonce\tud@res@c;}%
        \fi%
      }%
      \def\do##1{%
        \eappto\tud@res@c{%
          \ifx\tud@res@c\@empty\else,\space\fi%
          \noexpand\Package{##1}%
        }%
      }%
      \forssvlist{\tud@res@b}{#4}%
%    \end{macrocode}
% Paketbeschreibungen erhalten einen separaten Abschnitt in der Änderungsliste.
%    \begin{macrocode}
      \edef\tud@res@b{%
        \noexpand\Changed@At@Special[-1\baselineskip]{Paketbeschreibungen}%
          {sec:packages:recommended}{\expandonce\tud@res@d}%
      }%
    }%
%    \end{macrocode}
% Die Deklarationen werden durchgeführt und ausgegeben, die Änderungsnotizen 
% werden erzeugt und die Liste der aktuell deklarierten Label für diesen 
% Eintrag geändert.
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\item[\expandonce\tud@res@a]%
      \expandonce\tud@res@b%
      \def\noexpand\tud@declaration@label@list{\expandonce\tud@pkg@label@list}%
    }%
  \tud@res@a%
  \strut\ignorespaces%
}
%    \end{macrocode}
% Hiermit erfolgt die eigentliche Deklaration (Textanker, Indexeinträg) und 
% ggf. die Ausgabe.
%    \begin{macrocode}
\newcommand\tud@pkg@declare[3]{\tud@pkg@@declare#1{#2{#3}}}
\NewDocumentCommand\tud@pkg@@declare{s m m}{%
  \tud@lbl@get\tud@lbl@tmp{#3}%
  \listeadd\tud@pkg@label@list{\tud@lbl@tmp}%
  \eappto#2{%
    \IfBooleanF{#1}{\ifx#2\@empty\else\unexpanded{\kern.1em/\kern.1em}\fi}%
    \noexpand\Inline@Declaration\IfBooleanT{#1}{*}\unexpanded{{#3}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@pkg@@declare
% \end{macro}^^A \tud@pkg@declare
% \end{macro}^^A \tud@pkg@label@list
% \end{macro}^^A \tud@item@@pkg
% \end{macro}^^A \tud@item@pkg
% \end{macro}^^A \itempkg
% \end{environment}^^A DeclarePackages
%
% \iffalse
%</class>
% \fi
%
% \subsection{Erläuterungen und weiterführende Ergänzungen im Handbuch}
%
% \begin{macro}{\scrguide}
%    \begin{macrocode}
\NewDocumentCommand\scrguide{!O{\KOMAScript-Handbuch}}{%
  \begingroup%
    \Entity@Link@Seek\tud@res@a{Bundle}{koma-script}%
    \tud@specialurl@wrapper\tud@res@a{\tud@res@a}%
    \tud@res@a{#1}%
  \endgroup%
  \xspace%
}
%    \end{macrocode}
% \end{macro}^^A \scrguide
%
% \subsubsection{Tabelle mit abschließender Mehrspaltenzellen}
%
% \begin{environment}{tabularm}
% Die Umgebung \env{tabularm} ist eine Erweiterung der \env{tabular}-Umgebung.
% Im obligatorischen Argument wird die gewünschte Anzahl der linksbündigen 
% Spalten angegeben. Sollte danach das optionale Argument verwendet werden, 
% wird dessen Inhalt in einer alle Spalten übergreifenden Zeile unterhalb der 
% eigentlichen Tabelle ausgegeben.
%    \begin{macrocode}
\NewDocumentEnvironment{tabularm}{O{c} m !o +b}{%
  \sbox\z@{\tabular[{#1}]{*{#2}l}#4\endtabular}%
  \begin{tabular}{c}%
    \usebox\z@%
    \IfValueT{#3}{\tabularnewline\parbox[b]{\the\wd\z@}{\vskip1.5ex#3}}%
  \end{tabular}%
}{}
%    \end{macrocode}
% \end{environment}^^A tabularm
%
% \subsubsection{Umgebung für die Angabe eines Beispiels}
%
% \begin{environment}{Example}
% \begin{macro}{\if@tud@code@used}
% \changes{v2.07}{2021/06/16}{neu}^^A
% Diese Umgebung wird für die exemplarische Erläuterung von bestimmten Aspekten 
% im Handbuch verwendet. Wenn dafür ein Quelltextauszug nötig ist, kann 
% innerhalb dieser die \env{Code}-Umgebung genutzt werden. Sollte direkt nach 
% diesem auch die \env{Example}-Umgebung enden, wird etwas zu viel vertikaler 
% Abstand eingefügt, weshalb für diesen Fall (\cs{if@tud@code@used}) dieser am 
% Ende der Umgebung entfernt wird.
%    \begin{macrocode}
\tud@newif\if@tud@code@used
\newenvironment{Example}{%
  \labeling{{\usekomafont{disposition}{Beispiel:\nobreakspace}}}%
  \item[{\usekomafont{disposition}{Beispiel:\nobreakspace}}]%
  \@tud@code@usedfalse%
  \AfterEndEnvironment{Code}{\@tud@code@usedtrue}%
}{%
  \begingroup%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\endlabeling%
      \if@tud@code@used%
        \noexpand\addvspace{\the\glueexpr-\parskip\relax}%
      \fi%
    }%
  \tud@res@a%
}
\NoIndentAfterEnv{Example}
%    \end{macrocode}
% \end{macro}^^A \if@tud@code@used
% \end{environment}^^A Example
%
% \subsection{Einbinden und Verlinkungen externer Dateien}
%
% Hier werden allerlei Befehle und Umgebungen für die Formatierung, Ausgabe und 
% Ausführung von Quelltextauszügen mit dem Paket \pkg{listings} definiert.
%
% \begin{macro}{\IncludeExample}
% \changes{v2.02}{2014/07/25}{Skalierung der eingefügten Seiten}^^A
% Mit diesem Befehl wird eine \LaTeX-Datei ggf. übersetzt und anschließend als
% PDF"~Datei wieder eingebunden. Zuvor wird der dazugehörige Quelltext mittels
% \cs{lstinputlisting} im Dokument ausgegeben. Dieser Befehl wird lediglich für 
% die Klasse \cls{tudscrmanual} benötigt.
%    \begin{macrocode}
%<*class>
\newcommand*\IncludeExample[2][1]{%
  \begingroup%
    \lstinputlisting[style=tudscr]{examples/#2}%
%    \end{macrocode}
% Die Beispiele werden nur erneut kompiliert, wenn sich diese geändert haben 
% oder noch gar kein entsprechendes PDF"~Dokument existiert.
%    \begin{macrocode}
    \ifnum\pdf@shellescape=\@ne\relax%
      \filemodCmp{examples/#2.pdf}{examples/#2.tex}{}{%
        \edef\tud@res@a{%
          \tud@latex@ext -output-directory examples examples/#2.tex%
        }%
        \ShellEscape{\tud@res@a}%
        \ShellEscape{\tud@res@a}%
      }%
%    \end{macrocode}
% Sollte es eine spezielle Version eines beispiels für die Druckausgabe geben, 
% wird auch dieses kompiliert.
%    \begin{macrocode}
      \filemodCmp{examples/#2_print.pdf}{examples/#2_print.tex}{}{%
        \edef\tud@res@a{%
          \tud@latex@ext -output-directory examples examples/#2_print.tex%
        }%
        \ShellEscape{\tud@res@a}%
        \ShellEscape{\tud@res@a}%
      }%
    \fi%
%    \end{macrocode}
% Ist die gesuchte Datei vorhanden, wird diese auch eingebunden, wobei 
% gegebenenfalls die Druckversion verwendet wird, falls vorhanden.
%    \begin{macrocode}
    \def\tud@res@a{examples/#2.pdf}%
    \ifdef\tudprintflag{%
      \IfFileExists{examples/#2_print.pdf}{%
        \def\tud@res@a{examples/#2_print.pdf}%
      }{}%
    }{}%
    \IfFileExists{\tud@res@a}{%
      \edef\tud@res@a{%
        \noexpand\includepdf[%
          pages=-,noautoscale,frame,keepaspectratio,pagecommand={},%
          height=\noexpand\textheight,width=\noexpand\textwidth,offset=5mm 0mm%
        ]{\tud@res@a}%
      }%
      \tud@res@a%
    }{%
%    \end{macrocode}
% Andernfalls wird eine Warnung mit dem Hinweis auf die notwendige Verwendung
% von \app{pdflatex} mit dem Parameter \file{-{}-shell-escape} erzeugt und ein 
% Platzhalter für das fehlende Dokument eingefügt, wbeo das optionale Argument 
% die Anzahl der erwarteten Seiten angibt.
%    \begin{macrocode}
      \begingroup%
        \tud@shellescape@wrn{\tud@res@a}%
        \tud@res@cnt=#1\relax%
        \@whilenum\tud@res@cnt>\z@\relax\do{%
          \advance\tud@res@cnt\m@ne%
          \clearpage%
          \fboxsep=-\arrayrulewidth%
          \noindent\fbox{\vbox to\textheight{%
            \vss\vss%
            \hbox to\textwidth{\hss\texttt{\tud@res@a}\hss}%
            \vskip\smallskipamount%
            \hbox to\textwidth{%
              \hss\texttt{\the\numexpr#1-\tud@res@cnt\relax/#1}\hss%
            }%
            \vss\vss\vss%
          }}%
        }%
      \endgroup%
      \clearpage%
    }%
  \endgroup%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \IncludeExample
% \begin{macro}{\HyperTutorial}
% \changes{v2.02}{2014/08/22}{neu}^^A
% \changes{v2.02}{2014/10/22}{Reimplementierung}^^A
% \begin{macro}{\tud@bash@write}
% Die gegebenenfalls notwendige Kompilierung und die Referenzierung eines 
% Tutorials aus dem Handbuch erfolgt mit \cs{Tutorial}. Um mit verschachtelten
% Aufrufen von \app{pdflatex} umgehen zu können, wird das ganze Prozedere in
% ein Skript ausgelagert. Somit können die Aufrufe von \app{pdflatex} für die
% Tutorials aus dem entsprechenden Ordner und mit den notwendigen Optionen
% erfolgen.
%    \begin{macrocode}
%<class>\tud@newwrite\tud@bash@write
\newcommand*\HyperTutorial[1]{%
%<*class>
  \ifnum\pdf@shellescape=\@ne\relax%
    \filemodCmp{tutorials/#1.pdf}{tutorials/#1.tex}{}{%
      \let\tud@res@a\@empty%
      \ifdef\tudfinalflag{\appto\tud@res@a{\def\noexpand\tudfinalflag{}}}{}%
      \ifdef\tudprintflag{\appto\tud@res@a{\def\noexpand\tudprintflag{}}}{}%
      \appto\tud@res@a{\noexpand\input{#1.tex}}%
      \immediate\openout\tud@bash@write=tutorials.sh\relax%
      \def\tud@res@b##1{\immediate\write\tud@bash@write{##1}}%
      \tud@res@b{cd tutorials}%
      \tud@res@b{\tud@latex@ext -shell-escape "\tud@res@a"}%
      \ifwindows%
        \tud@res@b{if exist #1.bcf biber #1}%
      \else%
        \tud@res@b{[ -f #1.bcf ] && biber #1}%
      \fi%
      \tud@res@b{\tud@latex@ext "\tud@res@a"}%
      \tud@res@b{\tud@latex@ext -shell-escape "\tud@res@a"}%
      \ifwindows%
        \tud@res@b{if exist #1.ist makeglossaries #1}%
      \else%
        \tud@res@b{[ -f #1.ist ] && makeglossaries #1}%
      \fi%
      \ifwindows%
        \tud@res@b{if exist #1.xdy makeglossaries #1}%
      \else%
        \tud@res@b{[ -f #1.xdy ] && makeglossaries #1}%
      \fi%
      \tud@res@b{\tud@latex@ext "\tud@res@a"}%
      \tud@res@b{\tud@latex@ext -shell-escape "\tud@res@a"}%
      \tud@res@b{\tud@latex@ext -shell-escape "\tud@res@a"}%
      \immediate\closeout\tud@bash@write%
%    \end{macrocode}
% Hier erfolgt die Unterscheidung der Befehle für die unterschiedlichen OS.
%    \begin{macrocode}
      \ifwindows%
        \ShellEscape{rename tutorials.sh tutorials.bat}%
        \ShellEscape{tutorials.bat}%
        \ShellEscape{del tutorials.bat}%
      \else%
        \ShellEscape{bash tutorials.sh}%
        \ShellEscape{rm tutorials.sh}%
      \fi%
    }%
  \fi%
%    \end{macrocode}
% Hyperlink und verlinkter Indexeintrag.
% \ToDo{verwenden von SuppressMarkupSuffix im Index}[v2.07]
%^^A \index[files]{#2.pdf Tutorial@\Tutorial{#2}{\suffix{Tutorial}}}%
%    \begin{macrocode}
  \IfFileExists{tutorials/#1.pdf}{%
    \href[pdfnewwindow]{tutorials/#1.pdf}{\InlineDeclaration{\Tutorial''{#1}}}%
  }{%
    \tud@shellescape@wrn{tutorials/#1.pdf}%
    \Tutorial{#1}%
  }%
%</class>
%<*package>
  \IfFileExists{#1.pdf}{%
    \href[pdfnewwindow]{#1.pdf}{\InlineDeclaration{\Tutorial''{#1}}}%
  }{%
    \tud@shellescape@wrn{#1.pdf}%
    \Tutorial{#1}%
  }%
%</package>
}
%    \end{macrocode}
% \end{macro}^^A \tud@bash@write
% \end{macro}^^A \HyperTutorial
%
% \iffalse
%<*package>
% \fi
%
% Für den Anwender werden im \TUDScript-Bundle einige Tutorials mit Hinweisen 
% zur Nutzung von \LaTeX{} bereitgestellt. Innerhalb dieser werden Auszüge von
% Quelltexten verwendet und erläutert. Zum einen soll die Möglichkeit 
% geschaffen werden, diese gesammelt am Ende eines Tutorials für ein
% Copy"~\&"~Paste"~Beispiel zu verwenden. Andererseits soll auch das sofortige
% Ausführen des beschriebenen Quelltextauszuges direkt im Tutorial möglich
% sein.
%
% Dafür werden im Folgenden die Umgebungen \env{Preamble}, \env{Trunk} und
% \env{Hint} sowie daraus abgeleitet Varianten definiert, womit sich die Angabe
% und Erläuterung der Quelltexte im Tutorial logisch strukturieren lässt und
% dennoch die notwendige Ordnung dieser für das Copy"~\&"~Paste"~Beispiel
% aufrechterhalten werden kann. Hierfür zeichnen die beiden Umgebungen
% \env{Preamble} und \env{Trunk} und deren Derivate verantwortlich. Die
% Umgebung \env{Hint} steht für zusätzliche Erläuterungen bereit, welche jedoch
% nicht in das Copy"~\&"~Paste"~Beispiel übernommen werden.
%
% \begin{macro}{\tud@write@a}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\tud@write@b}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{macro}{\tud@read}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Die notwendigen Ein- und Ausgabestreams.
%    \begin{macrocode}
\tud@newwrite\tud@write@a
\tud@newwrite\tud@write@b
\tud@newread\tud@read
%    \end{macrocode}
% \end{macro}^^A \tud@read
% \end{macro}^^A \tud@write@b
% \end{macro}^^A \tud@write@a
%
% \begin{macro}{\tud@tut@temp}
% \changes{v2.05}{2016/05/01}{neu}^^A
% \begin{macro}{\tud@tut@inputtostream}
% \changes{v2.02}{2014/12/16}{neu}^^A
% \begin{macro}{\tud@tut@append}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Bei den Tutorials soll zum Schluss ein komplett kompilierbares Beispiel für
% Copy~\&~Paste gegeben werden. Um dieses zusammenzubauen, werden alle im 
% Dokument innerhalb der Varianten der \env{Trunk}-Umgebungen gegebenen
% Codefragmente zusammengesetzt. Um die Quelltexte einlesen und verarbeiten zu
% können, werden zwei Eingabe- sowie ein Ausgabestream benötigt, welche bereits 
% zuvor initialisiert wurden.
%
% Mit \cs{tud@tut@inputtostream} wird der Inhalt der Datei im ersten Argument 
% in den Ausgabestream des zweiten Argumentes geschrieben. Dies wird durch 
% \ToDo{inputtostream überhaupt notwendig?}
%    \begin{macrocode}
\newcommand*\tud@tut@temp{}
\edef\tud@tut@temp{\@currname-temp}
\newcommand*\tud@tut@inputtostream[2]{%
  \begingroup%
    \endlinechar=\m@ne\relax%
    \openin\tud@read=#1%
%    \end{macrocode}
% Der Schalter \cs{if@tempswa} wird verwendet, um unnötige Leerzeilen in der
% Ausgabedatei zu entfernen. Wurde eine nicht leere Zeile gefunden, wird diese 
% auf jeden Fall geschrieben, indem \cs{@tempswatrue} gesetzt wird. Eine leere 
% Zeile wird~-- bis auf den Sonderfall, dass es sich um die letzte Zeile in der
% Datei handelt~-- zunächst nicht weiter beachtet. Im Zweifelsfall wird diese
% (erste) Leerzeile geschrieben. 
%    \begin{macrocode}
    \@tempswafalse%
    \loop\unless\ifeof\tud@read%
      \readline\tud@read to\tud@reserved%
      \ifx\tud@reserved\@empty%
        \ifeof\tud@read\@tempswafalse\fi%
      \else%
        \@tempswatrue%
      \fi%
%    \end{macrocode}
% Hier erfolgt das eigentliche Schreiben im selektierten Stream.
%    \begin{macrocode}
      \if@tempswa%
        \immediate\write#2{\expandonce\tud@reserved}%
      \fi%
%    \end{macrocode}
% Im Nachgang wird überprüft, ob die aktuell geschriebene Zeile leer war. Ist 
% dies der Fall, so wird \cs{@tempswafalse} gesetzt, um eine etwaig folgende 
% Leerzeile nicht in die Ausgabedatei zu schrieben.
%    \begin{macrocode}
      \ifx\tud@reserved\@empty\@tempswafalse\fi%
    \repeat%
    \closein\tud@read%
  \endgroup%
}
%    \end{macrocode}
% Der innerhalb der Umgebungen \env{Preamble} und \env{Trunk}~-- sowie deren 
% Derivaten~-- angegebene Inhalt wird beim Schließen dieser Umgebungen in die 
% Hilfsdatei \cs{tud@tut@temp.tex} zwischengespeichert. Mit \cs{tud@tut@append}
% wird der Inhalt dieser Datei ausgelesen und den Hilfsdateien
% \cs{tud@tut@temp-preamble.tex} respektive \cs{tud@tut@temp-trunk.tex}
% angehangen und damit gesichert, um die jeweiligen Quelltextauszüge aus dem
% Tutorial für die Präambel sowie den Dokumentteil trennen beziehungsweise
% sortieren zu können.
%    \begin{macrocode}
\newcommand*\tud@tut@append[1]{%
  \tud@if@strequal{#1}{preamble}{%
    \tud@tut@inputtostream{\tud@tut@temp.tex}{\tud@write@a}%
  }{%
    \tud@if@strequal{#1}{trunk}{%
      \tud@tut@inputtostream{\tud@tut@temp.tex}{\tud@write@b}%
    }{%
      \tud@tut@inputtostream{\tud@tut@temp.tex}{#1}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@append
% \end{macro}^^A \tud@tut@inputtostream
% \end{macro}^^A \tud@tut@temp
% \begin{macro}{\StartTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% \begin{macro}{\FinishTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% Mit \cs{StartTutorial} wird ein Hyperlink für den Querverweis aus dem 
% Handbuch definiert. Außerdem wird gleich der Titel und~-- falls im optionalen 
% Argument angegeben~-- eine Zusammenfassung gesetzt. Die Sternversion gibt 
% nach der optionalen Beschreibung einen einleitenden Satz zur Dokumnentklasse 
% und sinnvollen Paketen an. Diese sollten direkt nach \cs{StartTutorial} in 
% der \env{Preamble}-Umgebung angegeben werden.
%    \begin{macrocode}
\TUDoptions{headingsvskip=-6ex}
\newcommand\StartTutorial[1][]{%
  \immediate\openout\tud@write@a=\tud@tut@temp-preamble.tex\relax%
  \immediate\openout\tud@write@b=\tud@tut@temp-trunk.tex\relax%
  \immediate\write\tud@write@b{^^J\string\begin{document}^^J}%
  \Hy@raisedlink{\hyperdef{\jobname}{tutorials:\jobname}{}}%
  \faculty{}%
  \maketitle%
  \IfArgIsEmpty{#1}{}{%
    \noindent%
    \begin{abstract}%
    \noindent#1%
    \end{abstract}%
    \medskip%
  }%
  \noindent\ignorespaces%
}
%    \end{macrocode}
% Der Befehl \cs{FinishTutorial} schleißt den noch offenen Ausgabestream und
% gibt den vorgestellten Quelltext vollständig aus.
%    \begin{macrocode}
\newcommand\FinishTutorial[1][]{%
  \immediate\write\tud@write@b{^^J\string\end{document}^^J}%
  \immediate\closeout\tud@write@b%
  \immediate\closeout\tud@write@a%
  \immediate\openout\tud@write@a\jobname-example.tex\relax%
  \tud@tut@inputtostream{\tud@tut@temp-preamble.tex}{\tud@write@a}%
  \tud@tut@inputtostream{\tud@tut@temp-trunk.tex}{\tud@write@a}%
  \immediate\closeout\tud@write@a%
  \clearpage%
  \addsec{Copy\nobreakspace\&\nobreakspace Paste}%
  \thispagestyle{empty}%
  \pagestyle{empty}%
  Der zuvor beschriebene Quelltext wird folgend ausgegeben, um diesen via %
  Copy~\&~Paste nutzen und nachvollziehen zu k\"onnen. Bitte beachten Sie, %
  dass~-- abh\"angig vom verwendeten PDF-Betrachter~-- beim Kopieren die hier %
  dargestellten Einz\"uge und Abs\"atze m\"oglicherweise verloren gehen %
  k\"onnen. Dies kann insbesondere aufgrund fehlender Leerzeilen zu einem %
  falschen Ausgabeergebnis f\"uhren. Alternativ finden Sie den folgenden %
  \Logo{LaTeX}-Quelltext auch im Pfad %
  \Path{\PName{texmf}/source/latex/tudscr/doc/examples/} %
  als Datei \File{\jobname-example.tex}. \par #1%
  \begin{quoting}[rightmargin=0pt]%
  \lstinputlisting[style=tudscr]{\jobname-example.tex}%
  \end{quoting}%
%    \end{macrocode}
% Falls es möglich ist, werden nach dem Durchlauf alle nicht mehr benötigten 
% Hilfsdateien gelöscht.
%    \begin{macrocode}
  \ifnum\pdf@shellescape=\@ne\relax%
    \ifwindows%
      \def\@tempa{del}%
    \else%
      \def\@tempa{rm}%
    \fi%
    \ShellEscape{\@tempa\space\tud@tut@temp*.*}%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \FinishTutorial
% \end{macro}^^A \StartTutorial
% \begin{macro}{\CodePreamble}
% \changes{v2.02}{2014/08/20}{neu}^^A
% \begin{macro}{\Code@Preamble}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\CodeHook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% \begin{macro}{\Code@Hook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% Bereitstellung von Hilfsmakros für die formatierte Ausgabe von Quelltexten.
%    \begin{macrocode}
\newcommand\Code@Preamble{}
\let\Code@Preamble\relax
\newcommand\CodePreamble[1]{%
  \long\gdef\Code@Preamble{%
    \hskip\glueexpr\leftmargin/2\relax%
    \textit{Die resultierende Ausgabe:}\space#1%
  }%
}
\newcommand*\Code@Hook{}
\let\Code@Hook\relax
\newcommand*\CodeHook[1]{\gdef\Code@Hook{#1}}
%    \end{macrocode}
% \end{macro}^^A \Code@Hook
% \end{macro}^^A \CodeHook
% \end{macro}^^A \Code@Preamble
% \end{macro}^^A \CodePreamble
% \begin{macro}{\filec@ntents@silent}
% \changes{v2.06e}{2019/10/10}{neu}^^A
% Die Umgebungen \env{Preamble}, \env{Trunk} und \env{Hint} sowie deren
% Varianten nutzen die Umgebung \env{filecontents}, um ihren Inhalt in eine
% temporäre Datei zu schreiben und diese direkt mit dem Paket \pkg{listings}
% darzustellen sowie ggf. den Quelltext auszuführen. Beim Überschreiben einer
% Datei wird für gewöhnlich eine Warnung erzeugt. Dies wird mit dem eigens 
% definierten Parameter \prm{silent} unterbunden.
%    \begin{macrocode}
\providecommand*\filec@ntents@silent{%
  \let\@latex@warning@no@line\@gobble%
}
%    \end{macrocode}
% \end{macro}^^A \filec@ntents@silent
% \begin{macro}{\tud@tut@pre}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@tut@post}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Dies sind Hilfsmakros, welche zu Beginn und Ende der Quelltextumgebungen 
% \env{Preamble}, \env{Trunk} und \env{Hint} für das Sichern der Inhalte in
% eine Hilfsdatei verantwortlich sind, wofür die \env{filecontents}-Umgebung 
% genutzt wird.
%    \begin{macrocode}
\newcommand*\tud@tut@pre{%
  \csuse{filecontents*}[force,silent,nosearch]{\tud@tut@temp.tex}%
}
\newcommand*\tud@tut@post{%
  \csuse{endfilecontents*}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@post
% \end{macro}^^A \tud@tut@pre
% Die nachfolgenden Umgebungen verwenden die beiden, gerade zuvor eingeführten 
% Hilfsmakros \cs{tud@tut@pre} und \cs{tud@tut@post}, welche den gegebenen 
% Inhalt in die temporäre Datei \file{\string\tud@tut@temp.tex} schreiben. Die 
% im Dokument in den Umgebungen gesetzten Quelltextauszüge werden mit dem Makro
% \cs{tud@tut@append}~-- abhängig vom gegebenen Argument~-- zusätzlich für ein 
% Copy"~\&"~Paste"~Beispiel in \file{\string\tud@tut@temp-preamble.tex} oder
% \file{\string\tud@tut@temp-trunk.tex} gespeichert. Die damit gesammelten 
% Inhalte werden am Ende mit \cs{FinishTutorial} ausgegeben.
% \begin{environment}{Preamble}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{environment}{Preamble*}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Preamble+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% Die Umgebung \env{Preamble} dient für die Ausgabe von Quelltextauszügenen, 
% welche in einem \LaTeX-Dokument in der Präambel verwendet werden müssen oder
% sollten. Die in ihr gesetzten Inhalte werden für das Copy"~\&"~Paste-Beispiel
% vor den Inhalten aus der Umgebung \env{Trunk} ausgegeben. Die Sternversion
% führt den Inhalt zusätzlich im Dokument aus. Die Pluszechen"=Version fügt dem
% Ausgabestream ihren Inhalt hinzu, ohne das dieser ausgegeben oder ausgeführt
% wird.
% \ToDo{noindentafter?}[v2.07]
%    \begin{macrocode}
\newenvironment{Preamble}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{preamble}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble*}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{preamble}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble+}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{preamble}%
  \gdef\@tempa{%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Preamble+
% \end{environment}^^A Preamble*
% \end{environment}^^A Preamble
% \begin{environment}{Trunk}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{environment}{Trunk*}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{environment}{Trunk+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Trunk!}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Die Umgebung \env{Trunk} dient zur Ausgabe von exemplarischen Quelltexten, 
% welche in einem \LaTeX-Dokument innerhalb der \env{document}-Umgebung
% verwendet werden müssen oder sollten. Für das Copy"~\&"~Paste-Beispiel werden 
% die gegebenen Inhalte nach den Inhalten aus der Umgebung \env{Preamble} 
% ausgegeben. Die Sternversion der Umgebung führt ihren Inhalt zusätzlich im
% Dokument aus. Die Pluszeichen"=Version fügt dem Ausgabestream ihren Inhalt
% hinzu, ohne diesen auszugeben oder auszuführen. Die Ausrufezeichen"=Version
% fügt den Quelltext im Dokument ein und führt diesen zusätzlich in einer
% separaten Datei mit einem minimalen Dokumentkörper aus, um daraus eine
% PDF-Datei zu erzeugen, welche im Nachhinein mit \cs{IncludeStandalone} als
% Grafik eingebunden werden kann. Dies ist für Quelltextabschnitte gedacht,
% deren Ausgabe zu groß ist, um diese direkt anzuzeigen und dennoch dargestellt
% werden sollen.
% \ToDo{noindentafter?}[v2.07]
%    \begin{macrocode}
\newenvironment{Trunk}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{trunk}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk*}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{trunk}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk+}{\tud@tut@pre}{%
  \tud@tut@post%
  \tud@tut@append{trunk}%
  \gdef\@tempa{%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\NewDocumentEnvironment{Trunk!}{m}{%
  \tud@tut@pre%
}{%
  \tud@tut@post%
  \tud@tut@append{trunk}%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@pdf{#1}%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Trunk!
% \end{environment}^^A Trunk+
% \end{environment}^^A Trunk*
% \end{environment}^^A Trunk
% \begin{environment}{Hint}
% \changes{v2.02}{2014/09/16}{neu}^^A
% \begin{environment}{Hint*}
% \changes{v2.02}{2014/10/13}{neu}^^A
% \begin{environment}{Hint?}
% \changes{v2.02}{2014/12/09}{neu}^^A
% \begin{environment}{Hint!}
% \changes{v2.02}{2014/11/13}{neu}^^A
% Um Quelltextausschnitte zur weiterführenden Information anzugeben, wird die
% Umgebung \env{Hint} definiert. Der Inhalt wird ausgegben und~-- falls die
% Sternversion genutzt wurde~-- auch ausgeführt, allerdings nicht in das 
% Copy"~\&"~Paste"~Beispiel übernommen. Ansonsten entsprechen alle Umgebungen 
% in ihren Eigenschaften den äquivalenten \env{Trunk}-Umgebungen. Die Version 
% mit Fragezeichen ist für Quelltextauszüge gedacht, die ungeprüft \emph{vor}
% dessen Ausgabe ausgeführt werden sollen. 
% \ToDo{noindentafter?}[v2.07]
%    \begin{macrocode}
\newenvironment{Hint}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint*}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@input%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint?}{\tud@tut@pre}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \InputCode%
    \tud@tut@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\NewDocumentEnvironment{Hint!}{m}{%
  \tud@tut@pre%
}{%
  \tud@tut@post%
  \gdef\@tempa{%
    \tud@tut@lst%
    \tud@tut@pdf{#1}%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Hint!
% \end{environment}^^A Hint?
% \end{environment}^^A Hint*
% \end{environment}^^A Hint
% \begin{macro}{\tud@tut@lst}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Damit wird der Quelltext eingezogen ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@tut@lst{%
  \begin{quoting}[rightmargin=0pt]%
  \lstinputlisting[style=tudscr]{\tud@tut@temp.tex}%
  \end{quoting}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@lst
% \begin{macro}{\tud@tut@input}
% \changes{v2.02}{2014/10/13}{neu}^^A
% Für die Ausgabe des Quelltextergebnisses erfolgt ein linker Einzug. Außerdem 
% werden unter anderem abhängig von der Verwendung eines erklärenden Textes die 
% eingefügten vertikalen Abstände angepasst.
%    \begin{macrocode}
\newcommand*\tud@tut@input{%
%    \end{macrocode}
% Nach dem Ausführen des ersten Argumentes von \cs{@tempa} wird geprüft, ob
% dieses überhaupt eine sichtbare Ausgabe erzeugt hat. Nur für diesen Fall wird
% nach dieser vertikaler Leerraum eingefügt. Der Anfang entspricht prinzipiell
% dem Standardbefehl \cs{settoheight}, jedoch wird im Inneren zusätzlich eine
% \cs{vbox} verwendet, um damit auch mathematische Umgebungen testen zu können. 
% Das Ganze findet innerhalb einer Gruppierung statt, um keine Änderungen zu
% erzeugen.
%    \begin{macrocode}
  \def\@tempa##1##2{%
    ##1%
    \begingroup%
      ##2%
      \settoheight\@tempdima{\vbox{##1}}%
      \ifdim\@tempdima>\z@\relax%
        \endgraf%
        \medskip%
        \noindent\ignorespaces%
      \fi%
    \endgroup%
  }%
%    \end{macrocode}
% Da aufgrund der Verwendung der \env{filecontents}-Umgebung ein optionales
% Argument für alle Abwandlungen der Quelltextumgebungen nicht möglich ist,
% wird \cs{CodePreamble} bereitgestellt, womit der Ausgabe ein erläuternder
% Text vorangestellt werden kann.
%    \begin{macrocode}
  \@tempa{\Code@Preamble}{}%
  \tud@setdim\@tempdimc{\leftskip}%
  \tud@setdim\leftskip{\leftmargin}%
%    \end{macrocode}
% Durch die zweimalige Verwendung von \file{\string\tud@tut@temp.tex}~-- einmal 
% direkt und einmal innerhalb einer Box~-- können darin verwendete Befehle wie
% \cs{newcommand} zu Fehler führen. Mit dem Makro \cs{CodeHook} lassen sich 
% diese Konflikte durch eine lokale Redefinition ebensolcher Befehle auflösen
% (bspw. \cs{let}\cs{newcommand}\cs{renewcommand}).
%    \begin{macrocode}
  \@tempa{\input{\tud@tut@temp.tex}}{\Code@Hook}%
  \global\let\Code@Hook\relax%
  \tud@setdim\leftskip{\@tempdimc}%
  \noindent\ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@input
% \begin{macro}{\InputCode}
% \changes{v2.02}{2014/10/21}{neu}^^A
% Mit \cs{InputCode} kann der Inhalt der letzen \env{Trunk}-Umgebung 
% direkt ausgeführt werden, ohne diesen zuvor mit \cs{tud@tut@input} zu prüfen 
% und zu formatieren.
%    \begin{macrocode}
\newcommand*\InputCode{\input{\tud@tut@temp.tex}}
%    \end{macrocode}
% \end{macro}^^A \InputCode
% \begin{macro}{\tud@tut@pdf}
% \changes{v2.02}{2014/10/22}{neu}^^A
% Die Umgebungen \env{Trunk!} und \env{Hint!} verwenden nach der Ausgabe des
% Quelltextes diesen abermals, um daraus eine PDF-Datei zu erzeugen. Dafür wird
% eine temporäre \LaTeX-Datei mithilfe einer \env{filecontents}-Umgebung 
% erzeugt. Diese bindet die mit \env{Trunk!} respektive \env{Hint!} erzeugte 
% Datei ein und wird anschließend via \cs{ShellEscape} kompiliert. Dabei sollte
% man sich nicht von der doppelten Verwendung von \cs{jobname} verwirren 
% lassen. Der Dateiname der temporär erzeugten \LaTeX-Datei ist abhängig vom
% gesetzten Tutorial. Beim Aufruf von \app{pdflatex} wird \cs{jobname} über den
% entsprechenden Kommandozeilenparameter angepasst (siehe \cs{tud@tut@pdf}).
%    \begin{macrocode}
\IfFileExists{\tud@tut@temp-standalone.tex}{\@tempswafalse}{\@tempswatrue}
\if@tempswa
\begin{filecontents*}[force,silent,nosearch]{\tud@tut@temp-standalone.tex}
\documentclass[english,ngerman]{tudscrreprt}
\iftutex
  \usepackage{fontspec}
\else
  \usepackage[T1]{fontenc}
  \usepackage[ngerman=ngerman-x-latest]{hyphsubst}
\fi
\usepackage{babel}
\usepackage{tudscrsupervisor}
\usepackage{isodate}
\usepackage{enumitem}
\setlist{noitemsep}
\begin{document}
\input{\jobname.tex}%
\end{document}
\end{filecontents*}
\fi
%    \end{macrocode}
% Der Quelltext der Umgebungen \env{Trunk!} und \env{Hint!} wird~-- wie bei
% allen anderen \env{Trunk}"~ und \env{Hint!}"~Derivaten~-- in der Datei
% \file{\string\tud@tut@temp.tex} gesichert. Diese wird für das Procederre 
% in \file{\string\jobname-standalone-\#1.tex} umbenannt. Anschließend wird 
% beim Aufruf von \app{pdflatex} durch die Nutzung des Kommandozeilenparameters
% \file{-jobname=\string\jobname-standalone-\#1} der Befehl \cs{jobname} in der 
% aufgerufenen Datei \file{\string\tud@tut@temp-standalone.tex} überschrieben
% und der Inhalt von \file{\string\jobname-standalone-\#1.tex} wie gewünscht
% eingebunden und kompiliert. Die so erstellte PDF"~Datei kann anschließend mit 
% \cs{IncludeStandalone} in das Tutorial eingebunden werden.
% \ToDo{Kompilieren mit \app{make}}[v2.07]
%    \begin{macrocode}
\newcommand*\tud@tut@pdf[1]{%
  \ifnum\pdf@shellescape=\@ne\relax%
    \filemodCmp{\jobname-standalone-#1.pdf}{\jobname.tex}{}{%
      \begingroup%
        \ShellEscape{%
          \ifwindows%
            copy%
          \else%
            cp%
          \fi%
          \space"\tud@tut@temp.tex"\space"\jobname-standalone-#1.tex"%
        }%
        \edef\@tempa{%
          \tud@latex@ext -jobname="\jobname-standalone-#1"\space%
          "\unexpanded{\noexpand\input}{\tud@tut@temp-standalone.tex}"%
        }%
        \ShellEscape{\@tempa}%
        \ShellEscape{\@tempa}%
        \ShellEscape{\@tempa}%
        \ShellEscape{%
          \ifwindows%
            del%
          \else%
            rm%
          \fi%
          \space"\jobname-standalone-#1.tex"%
        }%
      \endgroup%
    }%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tud@tut@pdf
% \begin{macro}{\IncludeStandalone}
% \changes{v2.02}{2014/09/10}{neu}^^A
% Der Befehl \cs{IncludeStandalone} bindet die mit den Umgebungen \env{Trunk!} 
% und \env{Hint!} generierten PDF"~Dateien ein. Das angehängte optionale 
% Argument dient zur Angabe der einzubindenden Seiten der PDF-Datei, wobei
% diese automatisch auf die passende Breite skaliert werden.
%    \begin{macrocode}
\NewDocumentCommand\IncludeStandalone{o m !O{1}}{%
  \IfFileExists{\jobname-standalone-#2.pdf}{%
    \@tempcnta\z@%
    \@for\@tempa:=#3\do{\advance\@tempcnta\@ne}%
    \ifnum\@tempcnta>\z@\relax%
      \tud@setdim\@tempdima{\textwidth}%
      \divide\@tempdima\@tempcnta%
      \advance\@tempcnta\m@ne%
      \multiply\@tempcnta 2%
      \tud@addtodim\@tempdima{-\@tempcnta\tabcolsep}%
      \@for\@tempa:=#3\do{%
        \advance\@tempcnta\m@ne%
        \edef\@tempb{%
          keepaspectratio,page=\@tempa,width=\the\@tempdima,%
          \IfValueT{#1}{#1}%
        }%
        \fbox{%
          \expandafter\includegraphics\expandafter[\@tempb]{%
            \jobname-standalone-#2.pdf%
          }%
        }%
        \ifnum\@tempcnta>\z@\relax\hfill\fi%
      }%
    \fi%
  }{%
    \tud@shellescape@wrn{\jobname-standalone-#2.pdf}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \IncludeStandalone
%
% \subsection{Automatische Erstellung von \pkg{pstricks}-Grafiken}
%
% Falls innerhalb eines Tutorials das Paket \pkg{pstricks} verwendet wird, muss
% dafür Sorge getragen werden, dass die automatische Kompilierung reibungslos
% mit \pkg{auto-pst-pdf} funktioniert.
%    \begin{macrocode}
\AfterPackage*{pstricks}{%
  \ifnum\pdf@shellescape=\@ne\relax%
    \filemodCmp{\jobname-pics.pdf}{\jobname.tex}{%
      \PassOptionsToPackage{off}{auto-pst-pdf}%
    }{}%
  \else%
    \PassOptionsToPackage{off}{auto-pst-pdf}%
  \fi%
  \RequirePackage{auto-pst-pdf}
%    \end{macrocode}
% Nach dem Paket \pkg{auto-pst-pdf} seine Arbeit verrichtet hat, werden alle 
% etwaigen temporär erzeugten Dateien radikal gelöscht.
%    \begin{macrocode}
  \ifnum\pdf@shellescape=\@ne\relax%
    \edef\@tempa{\app@exe{\app@rm "*\app@suffix*"}}%
    \@tempa%
  \fi%
}
%    \end{macrocode}
%
% \iffalse
%</package>
%<*class>
% \fi
%
% \subsection{Debug-Traces für die Klasse \cls{tudscrmanual}}
%
% Ab und an ist es beim Erstellen des Handbuchs recht sinnvoll, verschiedene 
% Dinge direkt im Log-File zu überprüfen. Hierfür werden folgend einige Befehle 
% zur Ablaufkontrolle definiert.
%
% \begin{macro}{\tracinglabels}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \changes{v2.07}{2019/09/19}{optionales Argument unterstützt mehrere Werte}^^A
% \begin{macro}{\tud@trace@lbl@types}
% \changes{v2.07}{2019/09/22}{neu}^^A
% \begin{macro}{\tud@trace@lbl@wlog}
% \changes{v2.07}{2019/09/19}{neu}^^A
% \begin{macro}{\tud@trace@lbl@add}
% \changes{v2.07}{2019/09/19}{neu}^^A
% \begin{macro}{\tud@trace@lbl@@add}
% \changes{v2.07}{2019/09/19}{neu}^^A
% \begin{macro}{\tud@trace@lbl@created@list}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@matched@list}
% \changes{v2.07}{2019/09/19}{neu}^^A
% \begin{macro}{\tud@trace@lbl@ignored@list}
% \changes{v2.07}{2019/09/19}{neu}^^A
% \begin{macro}{\tud@trace@lbl@missing@list}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@url@list}
% \changes{v2.07}{2019/09/19}{neu}^^A
% Mit \cs{tracinglabels} wird die Nachverfolgung aller erstellten Labels in der 
% Dokumentation aktiviert werden. Die Label werden zum einen direkt im Log-File
% ausgegeben und am Ende des selbigen in einer sortierten Liste ausgegeben. Die 
% Sternversion des Befehls erzeugt keine sortierte Liste. Über das optionale 
% Argument kann mit verschiedenen Schlüsseln zudem eingestellt werden, ob alle
% Label (\val{all}) oder nur die erstellten (\val{created}) beziehungsweise die
% fehlenden (\val{missing}) nachverfolgt werden sollen.
%    \begin{macrocode}
\newcommand*\tud@trace@lbl@wlog{\relax}
\AfterEndDocument{\tud@trace@lbl@wlog}
\newcommand*\tud@trace@lbl@types{}
\listadd\tud@trace@lbl@types{created}
\listadd\tud@trace@lbl@types{matched}
\listadd\tud@trace@lbl@types{ignored}
\listadd\tud@trace@lbl@types{missing}
\listadd\tud@trace@lbl@types{url}
\def\tud@res@a#1{%
  \expandafter\newcommand\csname tud@trace@lbl@#1@list\endcsname{}%
  \cslet{tud@trace@lbl@#1@list}\relax%
}
\forlistloop{\tud@res@a}{\tud@trace@lbl@types}
\NewDocumentCommand\tracinglabels{!s !D<>{} !O{missing}}{%
  \def\tud@res@a##1{\cslet{tud@trace@lbl@##1@list}\relax}%
  \forlistloop{\tud@res@a}{\tud@trace@lbl@types}%
  \let\tud@res@b\@empty%
  \in@{,all,}{,#3,}%
  \ifin@%
    \let\tud@res@b\tud@trace@lbl@types%
  \else%
    \def\tud@res@a##1{%
      \in@{,##1,}{,#3,}%
      \ifin@%
        \listadd\tud@res@b{##1}%
      \fi%
    }%
    \forlistloop{\tud@res@a}{\tud@trace@lbl@types}%
  \fi%
  \def\tud@trace@lbl@wlog{\relax}%
  \def\tud@res@a##1{%
    \cslet{tud@trace@lbl@##1@list}\@empty%
    \IfBooleanF{#1}{%
      \in@{,##1,}{,#2,}%
      \ifin@\else%
        \appto\tud@trace@lbl@wlog{%
          \ifcsvoid{tud@trace@lbl@##1@list}{%
            \wlog{+++++ no labels ##1 +++++}%
          }{%
            \wlog{+++++ labels ##1 (sorted) +++++}%
            \expandafter\tud@list@sort\csname tud@trace@lbl@##1@list\endcsname%
%    \end{macrocode}
% Damit der Befehl \cs{wlog} nicht mit jedem Schleifendurchlauf aufgerufen 
% werden muss, wird ein Hilfsmakro mit dem notwendigen Inhalt bestückt.
%    \begin{macrocode}
            \let\tud@res@c\@empty%
            \def\tud@res@a####1{\appto\tud@res@c{####1^^J}}%
            \forlistcsloop\tud@res@a{tud@trace@lbl@##1@list}%
            \@onelevel@sanitize\tud@res@c%
            \wlog{\tud@res@c}%
          }%
        }%
      \fi%
    }%
  }%
  \forlistloop{\tud@res@a}{\tud@res@b}%
}
\@onlypreamble\tracinglabels
%    \end{macrocode}
% Hiermit werden Labels aus der Liste im zweiten obligatorischen Argument der 
% Typliste im ersten obligatorischen Argument hinzugefügt. Das optionale 
% Argument dient als zusätzliche Angabe im Log-File.
%    \begin{macrocode}
\NewDocumentCommand\tud@trace@lbl@add{m o m}{%
  \ifcsundef{tud@trace@lbl@#1@list}{%
    \xifinlist{#1}{\tud@trace@lbl@types}{}{%
      \ClassError{tudscrmanual}{Undefined label type `#1'}{%
        The given tracing type was never defined.%
      }%
    }%
  }{%
    \begingroup%
      \protected@edef\tud@res@a{%
        \endgroup%
        \noexpand\tud@trace@lbl@@add{#1}{#2}{#3}%
      }%
    \tud@res@a%
  }%
}
\newcommand*\tud@trace@lbl@@add[3]{%
  \begingroup%
    \let\tud@res@b\@empty%
    \let\tud@res@c\@empty%
    \let\tud@res@d\m@ne%
%    \end{macrocode}
% Das optionale Argument dient für zusätzliche Angaben im Log-File für die 
% unterschiedlichen Typlisten, welche in \cs{tud@res@b} und \cs{tud@res@c}
% abgelegt werden.
%    \begin{macrocode}
    \IfValueT{#2}{%
      \TUD@set@numkey{}{tud@res@d}{%
        {url}{0},{matched}{1},{created}{2},{missing}{2},
      }{#1}%
      \ifx\FamilyKeyState\FamilyKeyStateProcessed%
        \ifcase\tud@res@d\relax%
          \def\tud@res@c{#2}%
        \or%
          \def\tud@res@b{\space(substituted)}%
          \def\tud@res@c{<-\space#2}%
        \or%
          \tud@trace@lbl@add{url}[{#2}]{#3}%
          \def\tud@res@c{->\space#2}%
        \fi%
      \else%
        \ClassWarning{tudscrmanual}{No specific label log `#1' defined}%
        \FamilyKeyStateProcessed%
      \fi%
    }%
%    \end{macrocode}
% Die Labels werden in einer Liste übergeben, welche hier verarbeitet wird.
%    \begin{macrocode}
    \let\tud@res@a\@empty%
    \def\do##1{%
      \begingroup%
        \ifnum\tud@res@d=\z@\relax% url
          \tud@if@lbl@exists{##1}{%
            \eappto\tud@res@c{\space<-\space##1}%
          }{%
            \eappto\tud@res@c{\space??\space##1}%
          }%
        \else%
          \protected@edef\tud@res@c{%
            ##1\ifx\tud@res@c\@empty\else\space\tud@res@c\fi%
          }%
        \fi%
        \@onelevel@sanitize\tud@res@c%
        \tud@unique@csxadd{tud@trace@lbl@#1@list}{\tud@res@c}%
      \endgroup%
%    \end{macrocode}
% In \cs{tud@res@a} werden alle Einträge für das Log-File gesammelt.
%    \begin{macrocode}
      \protected@eappto\tud@res@a{%
        ^^J\@spaces##1\ifx\tud@res@c\@empty\else^^J\@spaces\tud@res@c\fi%
      }%
    }%
    \dolistloop{#3}%
    \ifnum\tud@res@d=\z@\relax\else% !url
      \ifx\tud@res@a\@empty\else%
        \epreto\tud@res@a{+++++ label #1\tud@res@b\on@line\space+++++}%
        \@onelevel@sanitize\tud@res@a%
        \wlog{\tud@res@a}%
      \fi%
    \fi%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@trace@lbl@url@list
% \end{macro}^^A \tud@trace@lbl@missing@list
% \end{macro}^^A \tud@trace@lbl@ignored@list
% \end{macro}^^A \tud@trace@lbl@matched@list
% \end{macro}^^A \tud@trace@lbl@created@list
% \end{macro}^^A \tud@trace@lbl@@add
% \end{macro}^^A \tud@trace@lbl@add
% \end{macro}^^A \tud@trace@lbl@wlog
% \end{macro}^^A \tud@trace@lbl@types
% \end{macro}^^A \tracinglabels
% \begin{macro}{\tracingmarkup}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@markup@types}
% \changes{v2.07}{2019/11/22}{neu}^^A
% \begin{macro}{\tud@trace@markup@add}
% \changes{v2.07}{2019/11/22}{neu}^^A
% \begin{macro}{\tud@trace@markup@declare@list}
% \changes{v2.07}{2019/11/22}{neu}^^A
% \begin{macro}{\tud@trace@markup@output@list}
% \changes{v2.07}{2019/11/22}{neu}^^A
% Mit \cs{tracingmarkup} wird die Nachverfolgung aller Aufrufe von
% \cs{Process@@@Markup@Declare} und \cs{Markup@Inline@Wrapper} durch
% \cs{Process@Markup} inklusive all ihrer Argumente aktiviert. Dies wird 
% gegebenenfalls zur Kontrolle des erzeugten Markups genutzt.
%    \begin{macrocode}
\newcommand*\tud@trace@markup@types{}
\listadd\tud@trace@markup@types{declare}
\listadd\tud@trace@markup@types{output}
\def\tud@res@a#1{%
  \expandafter\newcommand\csname tud@trace@markup@#1@list\endcsname{}%
  \cslet{tud@trace@markup@#1@list}\relax%
}
\forlistloop{\tud@res@a}{\tud@trace@markup@types}
\NewDocumentCommand\tracingmarkup{!O{declare}}{%
  \def\tud@res@a##1{\cslet{tud@trace@markup@##1@list}\relax}%
  \forlistloop{\tud@res@a}{\tud@trace@markup@types}%
  \let\tud@res@b\@empty%
  \let\tud@res@c\@empty%
  \protected@edef\tud@res@a{#1}%
  \@for\tud@res@a:=\tud@res@a\do{%
    \trim@spaces@in\tud@res@a%
    \ifx\tud@res@a\@empty\else%
      \listeadd\tud@res@b{\tud@res@a}%
    \fi%
  }%
  \ifinlist{all}{\tud@res@b}{%
    \let\tud@res@c\tud@trace@markup@types%
  }{%
    \def\tud@res@a##1{\xifinlist{##1}{\tud@res@b}{\listeadd\tud@res@c{##1}}{}}%
    \forlistloop{\tud@res@a}{\tud@trace@markup@types}%
  }%
  \def\tud@res@a##1{\cslet{tud@trace@markup@##1@list}\@empty}%
  \forlistloop{\tud@res@a}{\tud@res@c}%
}
\@onlypreamble\tracingmarkup
\newcommand*\tud@trace@markup@add[2]{%
  \begingroup%
    \ifcsundef{tud@trace@markup@#1@list}{%
      \xifinlist{#1}{\tud@trace@markup@types}{}{%
        \ClassError{tudscrmanual}{Undefined markup type `#1'}{%
          The given tracing type was never defined.%
        }%
      }%
    }{%
      \protected@edef\tud@res@a{#2}%
      \@onelevel@sanitize\tud@res@a%
      \wlog{+++++ markup #1\on@line\space+++++^^J\@spaces\tud@res@a}%
      \tud@unique@csxadd{tud@trace@markup@#1@list}{\tud@res@a}%
    }%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \tud@trace@markup@output@list
% \end{macro}^^A \tud@trace@markup@declare@list
% \end{macro}^^A \tud@trace@markup@add
% \end{macro}^^A \tud@trace@markup@types
% \end{macro}^^A \tracingmarkup
%
% \iffalse
%</class>
%</body>
%<*option>
% \fi
%
%
% \subsection{Optionen für die finale Ausgabe}
%
% \begin{option}{final}
% \begin{option}{print}
% \begin{macro}{\tudfinalflag}
% \begin{macro}{\tudprintflag}
% Diese beiden Optionen dienen zur finalen und/oder der unbunten Ausgabe.
%    \begin{macrocode}
\TUD@key{final}[true]{%
  \TUD@set@ifkey{final}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudfinalflag\relax%
    \fi%
  \fi%
}
\TUD@key{print}[true]{%
  \TUD@set@ifkey{print}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudprintflag\relax%
    \fi%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tudprintflag
% \end{macro}^^A \tudfinalflag
% \end{option}^^A print
% \end{option}^^A final
%
% Wurde eine oder beide der Optionen \opt{final} oder \opt{print} gesetzt bzw.
% vor einem externen \app{pdflatex}-Aufruf die Flags \cs{tudfinalflag} und/oder
% \cs{tudprintflag} definiert, werden die entsprechenden Einstellungen zur
% finalen Ausgabe und/oder unbunten Druck vorgenommen und anschließend die 
% entsprechenden Optionen unschädlich gemacht.
%    \begin{macrocode}
%<*class>
\AtEndOfClass%
%</class>
%<*package>
\AtEndOfPackage%
%</package>
{%
  \TUD@key@toolate{final}%
  \TUD@key@toolate{print}%
  \ifdef\tudfinalflag{%
    \TUDoptions{ToDo=false}%
    \TUD@key{ToDo}{\FamilyKeyStateProcessed}%
  }{%
    \KOMAoptions{overfullrule}%
  }%
  \ifdef\tudprintflag{%
    \ifnum\tud@cd@num>\z@\relax%
      \TUDoptions{cd=true}%
    \fi%
    \PassOptionsToPackage{hidelinks}{hyperref}%
    \AfterEndPreamble{\hypersetup{hidelinks}}%
  }{}%
  \TUD@key@toolate{cd}%
}
%    \end{macrocode}
%
% \iffalse
%<*class>
% \fi
%
% \minisec{Standardoptionen der Klasse \cls{tudscrmanual}}
%
% Es werden einige Optionen für das Handbuch standardmäßig aktiviert. Dazu 
% werden diese an die entsprechende Elternklasse übergeben.
% \ToDo{Standardoptionen entweder hier oder in tudscr-misc}[v2.06]
%    \begin{macrocode}
\PassOptionsToClass{%
  ttfont=roboto,%
  cd=color,%
  cdfoot=true,%
  chapterpage=true,%
  chapterprefix=true,%
  headings=optiontoheadandtoc,%
  captions=tableheading,%
  numbers=noenddot,%
}{\TUD@Class@Parent}
%    \end{macrocode}
%
% \iffalse
%</class>
%</option>
%<*body>
% \fi
%
% \subsubsection{Konfiguration von Entitäten}
%
% Die nachfolgend erstellte Konfiguration wird am Ende der Klasse geladen.
%    \begin{macrocode}
%<*class>
\AtEndOfClass%
%</class>
%<*package>
\AtEndOfPackage%
%</package>
  {\InputIfFileExists{tudscrmanual.cfg}{}{}}
%    \end{macrocode}
%
% \iffalse
%</body>
%</!configuration>
%<*configuration&body>
% \fi
%
%    \begin{macrocode}
\DefaultEntity{\Format{LaTeXe}}'CTAN:latex-base'{
  \Package{flafter},
  \Package{fontenc},
  \Environment{figure},
  \Environment{table},
  \Environment{minipage},
  \Environment{tabbing},
  \Environment{tabular},
  \Environment{tabular*},
  \Environment{filecontents},
  \Macro{documentclass},
  \Macro{usepackage},
  \Macro{PassOptionsToClass},
  \Macro{PassOptionsToPackage},
  \Macro{rmfamily},
  \Macro{sffamily},
  \Macro{ttfamily},
  \Macro{rmdefault},
  \Macro{sfdefault},
  \Macro{ttdefault},
  \Macro{textrm},
  \Macro{textsf},
  \Macro{texttt},
  \Macro{mdseries},
  \Macro{bfseries},
  \Macro{mddefault},
  \Macro{bfdefault},
  \Macro{textmd},
  \Macro{textbf},
  \Macro{upshape},
  \Macro{itshape},
  \Macro{slshape},
  \Macro{scshape},
  \Macro{updefault},
  \Macro{itdefault},
  \Macro{sldefault},
  \Macro{scdefault},
  \Macro{textup},
  \Macro{textit},
  \Macro{textsl},
  \Macro{textsc},
  \Macro{emph},
  \Macro{MakeUppercase},
  \Macro{MakeLowercase},
  \Macro{NoCaseChange},
  \Macro{boldmath},
  \Macro{oldstylenums},
  \Macro{dots},
  \Macro{textellipsis},
  \Macro{noindent},
  \Macro{hyphenation},
  \Macro{label},
  \Macro{ref},
  \Macro{centering},
  \Macro{raggedright},
  \Macro{raggedleft},
  \Macro{marginpar},
  \Macro{multicolumn},
  \Macro{bigskip},
  \Macro{medskip},
  \Macro{smallskip},
  \Length{bigskipamount},
  \Length{medskipamount},
  \Length{smallskipamount},
  \Length{textheight},
  \Length{textwidth},
  \Length{columnwidth},
  \Length{columnsep},
  \Length{tabcolsep},
  \Macro{floatpagefraction},
  \Macro{dblfloatpagefraction},
  \Macro{topfraction},
  \Macro{dbltopfraction},
  \Macro{bottomfraction},
  \Macro{textfraction},
  \Macro{@pnumwidth},
  \Macro{@tocrmarg},
  \Length{textfloatsep},
  \Length{dbltextfloatsep},
  \Length{intextsep},
  \Length{floatsep},
  \Length{dblfloatsep},
  \Length{@fptop},
  \Length{@fpsep},
  \Length{@fpbot},
  \Length{@dblfptop},
  \Length{@dblfpsep},
  \Length{@dblfpbot},
  \Macro{counterwithin},
  \Macro{counterwithout},
  \Counter{totalnumber},
  \Counter{topnumber},
  \Counter{dbltopnumber},
  \Counter{bottomnumber},
}
\DefaultEntity{\Format{LaTeX3}}'CTAN:l3kernel'{
  \Package{l3keys},
}
\DefaultEntity{\Bundle{koma-script}}'CTAN:koma-script'{
  \DefaultEntity{\Class{koma-class}}{
    \Option{parskip},
    \Option{fontsize},
    \Option{open},
    \Option{titlepage},
    \Option{chapterprefix},
    \Option{cleardoublepage},
    \Option{captions},
    \Environment{quote},
    \Environment{quotation},
    \Environment{itemize},
    \Environment{enumerate},
    \Environment{description},
    \Macro{item},
    \Macro{tableofcontents},
    \Macro{part},
    \Macro{addpart},
    \Macro{chapter},
    \Macro{addchap},
    \Macro{section},
    \Macro{addsec},
    \Macro{subsection},
    \Macro{subsubsection},
    \Macro{minisec},
    \Macro{paragraph},
    \Macro{subparagraph},
    \Macro{setpartpreamble},
    \Macro{setchapterpreamble},
    \Macro{raggedpart},
    \Macro{raggedchapter},
    \Macro{raggedsection},
    \Macro{coverpagetopmargin},
    \Macro{coverpageleftmargin},
    \Macro{coverpagerightmargin},
    \Macro{coverpagebottommargin},
    \Macro{extratitle},
    \Macro{frontispiece},
    \Macro{titlehead},
    \Macro{subject},
    \Macro{title},
    \Macro{subtitle},
    \Macro{author},
    \Macro{date},
    \Macro{publishers},
    \Macro{and},
    \Macro{thanks}, 
    \Macro{uppertitleback},
    \Macro{lowertitleback},
    \Macro{dedication},
    \Macro{titlepagestyle},
    \Macro{partpagestyle},
    \Macro{chapterpagestyle},
    \Macro{indexpagestyle},
    \Macro{footnote},
    \Macro{caption},
    \Macro{captionof},
    \Length{abovecaptionskip},
    \Length{belowcaptionskip},
    \Font{titlehead},
    \Font{subject},
    \Font{title},
    \Font{subtitle},
    \Font{author},
    \Font{publishers},
    \Font{date},
    \Font{dedication},
  },
  \Class{scrbook},
  \Class{scrreprt},
  \Class{scrartcl},
  \Class{scrletter},
  \Class{scrlttr2},
  \Package{scrbase},
  \DefaultEntity{\Package{typearea}}{
    \Option{BCOR},
    \Option{DIV},
    \Option{paper},
    \Option{twoside},
    \Option{twocolumn},
    \Option{headinclude},
    \Option{footinclude},
    \Macro{recalctypearea},
  },
  \Package{scrlayer},
  \DefaultEntity{\Package{scrlayer-scrpage}}{
    \Option{automark},
    \Option{manualmark},
    \Macro{pagestyle},
    \Macro{lefoot},
    \Macro{cefoot},
    \Macro{refoot},
    \Macro{lofoot},
    \Macro{cofoot},
    \Macro{rofoot},
    \Macro{ofoot},
    \Macro{cfoot},
    \Macro{ifoot},
    \PageStyle{empty},
    \PageStyle{headings},
    \PageStyle{plain},
    \PageStyle{scrheadings},
    \PageStyle{plain.scrheadings},
  },
  \Package{scrletter},
  \Package{scrextend},
  \Package{scrhack},
  \DefaultEntity{\Package{scrlfile}}{
    \Macro{AfterClass},
    \Macro{AfterPackage},
  },
  \Package{scrwfile},
  \Package{tocbasic},
  \Macro{KOMAoption},
  \Macro{KOMAoptions},
  \Macro{newkomafont},
  \Macro{setkomafont},
  \Macro{addtokomafont},
  \Macro{usekomafont},
  \Macro{defcaptionname},
  \Macro{providecaptionname},
  \Macro{newcaptionname},
  \Macro{renewcaptionname},
}
\DefaultEntity{\Bundle{tudscr}}{
  \Class{tudscrbook},
  \Class{tudscrreprt},
  \Class{tudscrartcl},
  \Class{tudscrposter},
  \Package{tudscrbase},
  \Package{tudscrcolor},
  \Package{tudscrcomp},
  \Package{tudscrfonts},
  \Package{tudscrsupervisor},
  \Package{tudscrtutorial},
  \Package{fix-tudscrfonts},
  \Package{mathswap},
  \Package{twocolfix},
  \Tutorial{treatise},
  \Tutorial{mathswap},
  \Tutorial{mathtype},
  \File{tudscr4texstudio.zip},
  \File{tudscr4lyx.zip},
}
\DefaultEntity{\Bundle{tud}}
'URL:https://tud.de/hilfe/kommunizieren-und-publizieren/cd/vorlagen/druck/latex'
{
  \Class{tudbook},
  \Class{tudfax},
  \Class{tudform},
  \Class{tudhaus},
  \Class{tudletter},
  \Class{tudbeamer},
  \Class{tudposter},
  \Package{tudthesis},
}
\DefaultEntity{\Bundle{tud-cd}}'GH:tud-cd/tud-cd'{
  \Class{tudmathposter},
}
\DefaultEntity{\Bundle{acronym}}{\Package{acronym}}
\DefaultEntity{\Bundle{acro}}{\Package{acro}}
\DefaultEntity{\Bundle{afterpage}}{
  \DefaultEntity{\Package{afterpage}}{
    \Macro{afterpage},
  }
}
\DefaultEntity{\Bundle{amsfonts}}{
  \Package{amsfonts},
  \Package{amssymb},
  \Package{euscript},
  \Package{eucal},
  \Package{eufrak},
}
\DefaultEntity{\Bundle{amsmath}}{
  \Package{amsmath},
  \DefaultEntity{\Package{amsbsy}}{
    \Macro{boldsymbol},
  },
}
\DefaultEntity{\Bundle{array}}{
  \DefaultEntity{\Package{array}}{
    \Macro{newcolumntype},
    \Macro{extrarowheight},
  }
}
\DefaultEntity{\Bundle{auto-pst-pdf}}{\Package{auto-pst-pdf}}
\DefaultEntity{\Bundle{babel}}{\Package{babel}}
\DefaultEntity{\Bundle{beamer}}{
  \Class{beamer},
}
\DefaultEntity{\Bundle{biblatex}}{
  \DefaultEntity{\Package{biblatex}}{
    \Counter{biburlnumpenalty},
    \Counter{biburlucpenalty},
    \Counter{biburllcpenalty},
  }
}
\DefaultEntity{\Bundle{blindtext}}{
  \DefaultEntity{\Package{blindtext}}{
    \Macro{blinddocument},
    \Macro{blindtext},
  }
}
\DefaultEntity{\Bundle{bm}}{
  \DefaultEntity{\Package{bm}}{
    \Macro{bm},
    \Macro{bmmax},
  }
}
\DefaultEntity{\Bundle{bookmark}}{\Package{bookmark}}
\DefaultEntity{\Bundle{booktabs}}{
  \DefaultEntity{\Package{booktabs}}{
    \Macro{toprule},
    \Macro{midrule},
    \Macro{cmidrule},
    \Macro{bottomrule},
  }
}
\DefaultEntity{\Bundle{calc}}{\Package{calc}}
\DefaultEntity{\Bundle{caption}}{
  \DefaultEntity{\Package{caption}}{
    \Macro{caption},
    \Macro{captionof},
  },
  \DefaultEntity{\Package{subcaption}}'CTAN:subcaption'{},
}
\DefaultEntity{\Bundle{cfr-lm}}{\Package{cfr-lm}}
\DefaultEntity{\Bundle{cleveref}}{\Package{cleveref}}
\DefaultEntity{\Bundle{crop}}{\Package{crop}}
\DefaultEntity{\Bundle{csquotes}}{
  \DefaultEntity{\Package{csquotes}}{
    \Macro{enquote},
  }
}
\DefaultEntity{\Bundle{datetime2}}{
  \DefaultEntity{\Package{datetime2}}{
    \Macro{DTMDate},
  }
}
\DefaultEntity{\Bundle{dehyph-exptl}}{\Package{dehyph-exptl}}
\DefaultEntity{\Bundle{ellipsis}}{\Package{ellipsis}}
\DefaultEntity{\Bundle{enumitem}}{
  \DefaultEntity{\Package{enumitem}}{
    \Environment{itemize},
    \Environment{enumerate},
    \Environment{description},
    \Macro{item},
    \Macro{setlist},
  }
}
\DefaultEntity{\Bundle{environ}}{\Package{environ}}
\DefaultEntity{\Bundle{etoolbox}}{
  \DefaultEntity{\Package{etoolbox}}{
    \Macro{defcounter},
    \Macro{deflength},
  }
}
\DefaultEntity{\Bundle{expkv}}{\Package{expkv}}
\DefaultEntity{\Bundle{filemod}}{\Package{filemod}}
\DefaultEntity{\Bundle{fix-cm}}{\Package{fix-cm}}
\DefaultEntity{\Bundle{floatrow}}{
  \DefaultEntity{\Package{floatrow}}{
    \Macro{floatsetup},
  }
}
\DefaultEntity{\Bundle{float}}{\Package{float}}
\DefaultEntity{\Bundle{fnpct}}{\Package{fnpct}}
\DefaultEntity{\Bundle{fontspec}}{\Package{fontspec}}
\DefaultEntity{\Bundle{geometry}}{
  \DefaultEntity{\Package{geometry}}{
    \Macro{geometry},
    \Macro{newgeometry},
  }
}
\DefaultEntity{\Bundle{glossaries}}{\Package{glossaries}}
\DefaultEntity{\Bundle{graphicx}}{
  \DefaultEntity{\Package{graphicx}}{
    \Macro{includegraphics},
  }
}
\DefaultEntity{\Bundle{hyperref}}{
  \DefaultEntity{\Package{hyperref}}{
    \Macro{hypersetup},
    \Macro{pdfbookmark},
    \Macro{autoref},
  }
}
\DefaultEntity{\Bundle{hyphsubst}}{\Package{hyphsubst}}
\DefaultEntity{\Bundle{icomma}}{\Package{icomma}}
\DefaultEntity{\Bundle{iftex}}{
  \DefaultEntity{\Package{iftex}}{
    \Macro{ifpdftex},
    \Macro{ifluatex},
    \Macro{ifxetex},
    \Macro{iftutex},
    \Macro{ifpdf},
  }
}
\DefaultEntity{\Bundle{inputenc}}{\Package{inputenc}}
\DefaultEntity{\Bundle{ionumbers}}{\Package{ionumbers}}
\DefaultEntity{\Bundle{isodate}}{
  \DefaultEntity{\Package{isodate}}{
    \Macro{printdate},
  }
}
\DefaultEntity{\Bundle{iwona}}{\Package{iwona}}
\DefaultEntity{\Bundle{keyval}}{\Package{keyval}}
\DefaultEntity{\Bundle{kvsetkeys}}{\Package{kvsetkeys}}
\DefaultEntity{\Bundle{letltxmacro}}{\Package{letltxmacro}}
\DefaultEntity{\Bundle{libertine}}{\Package{libertine}}
\DefaultEntity{\Bundle{libgreek}}{\Package{libgreek}}
\DefaultEntity{\Bundle{listings}}{\Package{listings}}
\DefaultEntity{\Bundle{lm}}{
  \Package{lmodern},
}
\DefaultEntity{\Bundle{longtable}}{\Package{longtable}}
\DefaultEntity{\Bundle{ltablex}}{\Package{ltablex}}
\DefaultEntity{\Bundle{ltxtable}}{\Package{ltxtable}}
\DefaultEntity{\Bundle{lua-check-hyphen}}{\Package{lua-check-hyphen}}
\DefaultEntity{\Bundle{marginnote}}{
  \DefaultEntity{\Package{marginnote}}{
    \Macro{marginnote},
  }
}
\DefaultEntity{\Bundle{mathastext}}{\Package{mathastext}}
\DefaultEntity{\Bundle{mathtools}}{\Package{mathtools}}
\DefaultEntity{\Bundle{mdsymbol}}{\Package{mdsymbol}}
\DefaultEntity{\Bundle{microtype}}{\Package{microtype}}
\DefaultEntity{\Bundle{morewrites}}{\Package{morewrites}}
\DefaultEntity{\Bundle{mparhack}}{\Package{mparhack}}
\DefaultEntity{\Bundle{multicol}}{
  \DefaultEntity{\Package{multicol}}{
    \Environment{multicols},
  }
}
\DefaultEntity{\Bundle{multirow}}{
  \DefaultEntity{\Package{multirow}}{
    \Macro{multirow},
  }
}
\DefaultEntity{\Bundle{mwe}}{\Package{mwe}}
\DefaultEntity{\Bundle{mweights}}{\Package{mweights}}
\DefaultEntity{\Bundle{newtx}}{
  \Package{newtxtext},
  \Package{newtxmath},
}
\DefaultEntity{\Bundle{noindentafter}}{\Package{noindentafter}}
\DefaultEntity{\Bundle{nomencl}}{\Package{nomencl}}
\DefaultEntity{\Bundle{opensans}}{\Package{opensans}}
\DefaultEntity{\Bundle{pagecolor}}{\Package{pagecolor}}
\DefaultEntity{\Bundle{pdfpages}}{\Package{pdfpages}}
\DefaultEntity{\Bundle{pdftricks2}}{\Package{pdftricks2}}
\DefaultEntity{\Bundle{pgfkeys}}{\Package{pgfkeys}}
\DefaultEntity{\Bundle{placeins}}{\Package{placeins}}
\DefaultEntity{\Bundle{polyglossia}}{\Package{polyglossia}}
\DefaultEntity{\Bundle{pst-pdf}}{\Package{pst-pdf}}
\DefaultEntity{\Bundle{pstricks}}{
  \DefaultEntity{\Package{pstricks}}{
    \Environment{pspicture},
  }
}
\DefaultEntity{\Bundle{quoting}}{
  \DefaultEntity{\Package{quoting}}{
    \Environment{quoting},
  }
}
\DefaultEntity{\Bundle{ragged2e}}{\Package{ragged2e}}
\DefaultEntity{\Bundle{relsize}}{\Package{relsize}}
\DefaultEntity{\Bundle{roboto}}{
  \Package{roboto},
  \Package{roboto-mono},
}
\DefaultEntity{\Bundle{sansmathfonts}}{\Package{sansmathfonts}}
\DefaultEntity{\Bundle{sansmath}}{\Package{sansmath}}
\DefaultEntity{\Bundle{selinput}}{\Package{selinput}}
\DefaultEntity{\Bundle{selnolig}}{\Package{selnolig}}
\DefaultEntity{\Bundle{setspace}}{
  \DefaultEntity{\Package{setspace}}{
    \Macro{setstretch},
    \Macro{onehalfspacing},
  }
}
\DefaultEntity{\Bundle{sfmath}}{\Package{sfmath}}
\DefaultEntity{\Bundle{siunitx}}{
  \DefaultEntity{\Package{siunitx}}{
    \Macro{sisetup},
  }
}
\DefaultEntity{\Bundle{spelling}}{\Package{spelling}}
\DefaultEntity{\Bundle{standalone}}{
  \Class{standalone},
  \Package{standalone},
}
\DefaultEntity{\Bundle{subfiles}}{
  \DefaultEntity{\Package{subfiles}}{
    \Macro{subfiles},
  }
}
\DefaultEntity{\Bundle{svg}}{
  \DefaultEntity{\Package{svg}}{
    \Macro{includesvg},
  },
  \Package{svg-extract},
}
\DefaultEntity{\Bundle{tabu}}{
  \DefaultEntity{\Package{tabu}}{
    \Environment{tabu},
    \Environment{longtabu},
  }
}
\DefaultEntity{\Bundle{tabularborder}}{\Package{tabularborder}}
\DefaultEntity{\Bundle{tabularx}}{
  \DefaultEntity{\Package{tabularx}}{
    \Environment{tabularx},
  }
}
\DefaultEntity{\Bundle{tabulary}}{
  \DefaultEntity{\Package{tabulary}}{
    \Environment{tabulary},
  }
}
\DefaultEntity{\Bundle{textcomp}}{\Package{textcomp}}
\DefaultEntity{\Bundle{tikz}}{\Package{tikz}}
\DefaultEntity{\Bundle{todonotes}}{\Package{todonotes}}
\DefaultEntity{\Bundle{trimspaces}}{\Package{trimspaces}}
\DefaultEntity{\Bundle{units}}{\Package{units}}
\DefaultEntity{\Bundle{varioref}}{\Package{varioref}}
\DefaultEntity{\Bundle{widetable}}{
  \DefaultEntity{\Package{widetable}}{
    \Environment{widetable},
  }
}
\DefaultEntity{\Bundle{xcolor}}{
  \DefaultEntity{\Package{xcolor}}{
    \Macro{color},
    \Macro{colorbox},
  }
}
\DefaultEntity{\Bundle{xkeyval}}{\Package{xkeyval}}
\DefaultEntity{\Bundle{xltabular}}{\Package{xltabular}}
\DefaultEntity{\Bundle{xparse}}{\Package{xparse}}
\DefaultEntity{\Bundle{xpatch}}{\Package{xpatch}}
\DefaultEntity{\Bundle{xpunctuate}}{\Package{xpunctuate}}
\DefaultEntity{\Bundle{xspace}}{
  \DefaultEntity{\Package{xspace}}{
    \Macro{xspace},
  }
}
\DefaultEntity{\Bundle{ziffer}}{\Package{ziffer}}
%    \end{macrocode}
%
% \iffalse
%</configuration&body>
% \fi
%
% \PrintBackMatter
%
\endinput
