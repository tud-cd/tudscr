% \iffalse meta-comment
%/GitFileInfo=tudscr-manual.dtx
%
%  TUD-Script -- Corporate Design of Technische Universität Dresden
% ----------------------------------------------------------------------------
%
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2012-2022
%
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, either version 1.3c of this license or
%  any later version. The latest version of this license is in
%    https://www.latex-project.org/lppl.txt
%  and version 1.3c or later is part of all distributions of
%  LaTeX version 2008-05-04 or later.
%
%  This work has the LPPL maintenance status "maintained".
%
%  The current maintainer and author of this work is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
% \fi
%
% \iffalse ins:batch + dtx:driver
%<*ins>
\ifx\documentclass\undefined
  \input docstrip.tex
  \ifToplevel{\batchinput{tudscr.ins}}
\else
  \let\endbatchfile\relax
\fi
\endbatchfile
%</ins>
%<*dtx>
\ProvidesFile{tudscr-manual.dtx}[2022/09/03]
\RequirePackage{tudscr-gitinfo}
\documentclass[english,ngerman,xindy]{tudscrdoc}
\iftutex
  \usepackage{fontspec}
\else
  \usepackage[T1]{fontenc}
  \usepackage[ngerman=ngerman-x-latest]{hyphsubst}
\fi
\usepackage{tudscrfonts}
\usepackage{babel}
\usepackage[babel]{microtype}

\GitHubBase{\TUDScriptRepository}
\begin{document}
  \author{Falk Hanisch\TUDScriptContactTitle}
  \maketitle
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</dtx>
% \fi
%
%
%
% \section{Anwenderdokumentation und Leitfäden zu \TUDScript}
%
% \changes{v2.02}{2014/12/17}{Erstellung der \app{texindy}-Stildatei während
%   der Kompilierung}^^A
% \changes{v2.02}{2014/11/18}{\pkg{tudscrmanual}: Index für Tutorials}^^A
% \changes{v2.05}{2015/08/04}{Geteilte Deklarationen für Klasse und Paket}^^A
%
% Es werden die Klasse \cls{tudscrmanual} (auf Basis von \cls{tudscrreprt}) für 
% die Anwenderdokumentation sowie das Paket \pkg{tudscrmanual} für das Setzen
% von einigen Anwenderleitfäden bzw. Tutorials erzeugt. Da es zwischen der
% Klasse und dem Paket es eine große Menge an Überschneidungen gibt, basieren
% diese auf der gleichen Quelldatei.
% \ToDo{guards überarbeiten, korrelierenden Quelltext zusammenhalten}[v2.06]
% \ToDo{alle externen Aufrufe mit \cs{if@filesw} behandeln}[v2.06]
% \ToDo{Document(Com/Env) auf \val{!} und optionale Arg. am Ende prüfen}[v2.06]
% \ToDo{Argumente \val{''} und \val{<>} ableichen; konsistente Inhalte}[v2.06]
%^^A TODO (d|D|r|R)['\+\-/:;<=>?_\(\|\)]{2}(?=( |\{|\}))
%    \begin{macrocode}
%<*package&identify>
\ProvidesPackage{tudscrmanual}[%
%!TUD@Version
  package (tutorials)%
]
\TUD@Class@Check{tudscrmanual}
%</package&identify>
%    \end{macrocode}
%
% \iffalse
%<*body>
% \fi
%
% \subsection{Patches für den \Lettering{LaTeXe}"~Kernel}
%
% Für Inhaltsverzeichnis sowie~-- insbesondere im Hinblick auf Kolumnentitel~-- 
% Ausgaberoutine sind Anpassungen notwendig, weshalb hierfür entsprechende 
% Hooks definiert werden.
% \begin{macro}{\addtocontents}
% \begin{macro}{\tud@addtocontents@hook}
% \changes{v2.06p}{2022/09/27}{neu}^^A
% \begin{macro}{\tud@addtocontents@initialize}
% \changes{v2.06p}{2022/09/27}{neu}^^A
% Mit \cs{tud@addtocontents@initialize} kann Code unmittelbar vor dem Erzeugen 
% von Einträgen für Inhaltsverzeichnis und~-- falls die Sternversion genutzt 
% wird~-- PDF-Outline ausgeführt werden.
%    \begin{macrocode}
\newcommand*\tud@addtocontents@hook{}
\let\tud@addtocontents@hook\relax
\patchcmd\addtocontents{%
  \let\index\@gobble\let\glossary\@gobble%
}{%
  \let\index\@gobble\let\glossary\@gobble%
  \tud@addtocontents@hook%
}{}{\tud@patch@wrn{addtocontents}}
\NewDocumentCommand\tud@addtocontents@initialize{s m}{%
  \appto\tud@addtocontents@hook{#2}%
  \IfBooleanT{#1}{%
    \AfterPackage*{hyperref}{\pdfstringdefDisableCommands{#2}}%
    \AfterPackage*{nameref}{\GetTitleStringDisableCommands{#2}}%
  }%
}
\@onlypreamble\tud@addtocontents@initialize
%    \end{macrocode}
% \end{macro}^^A \tud@addtocontents@initialize
% \end{macro}^^A \tud@addtocontents@hook
% \end{macro}^^A \addtocontents
% \begin{macro}{\@outputpage}
% \begin{macro}{\tud@outputpage@hook}
% \changes{v2.06p}{2022/09/27}{neu}^^A
% \begin{macro}{\tud@outputpage@initialize}
% \changes{v2.06p}{2022/09/27}{neu}^^A
% Mit \cs{tud@outputpage@initialize} kann Code unmittelbar vor dem Aufruf der 
% Ausgaberoutine ausgeführt werden.
%    \begin{macrocode}
\newcommand*\tud@outputpage@hook{}
\let\tud@outputpage@hook\relax
\patchcmd\@outputpage{%
  \let\index\@gobble\let\glossary\@gobble%
}{%
  \let\index\@gobble\let\glossary\@gobble%
  \tud@outputpage@hook%
}{}{\tud@patch@wrn{@outputpage}}
\newcommand*\tud@outputpage@initialize[1]{\appto\tud@outputpage@hook{#1}}
\@onlypreamble\tud@outputpage@initialize
%    \end{macrocode}
% \end{macro}^^A \tud@outputpage@initialize
% \end{macro}^^A \tud@outputpage@hook
% \end{macro}^^A \@outputpage
% \begin{macro}{\@gobbleopt@one}
% \changes{v2.06p}{2022/09/27}{neu}^^A
% Ein expandierbares Makrodefinition, um temporär Befehle mit einem optionalen 
% gefolgt von einem obligatorischen Argument unschädlich zu machen.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@gobbleopt@one{o m}{}
%    \end{macrocode}
% \end{macro}^^A \@gobbleopt@one
%
% \subsection{Notwendige Pakete, Einstellungen und abgeleitete Befehle}
%
% Mit dem Paket \pkg{morewrites} lassen sich Probleme mit zu wenig verfügbaren 
% Streams für das Schreiben externer Datein beheben. Hintergrund ist die
% Verwendung des Paketes \pkg{glossaries} in einem der Tutorials, welches eine
% Vielzahl solcher Streams benötigt.
% \ToDo{noch notwendig?}[v2.06]
%    \begin{macrocode}
%<*package>
\RequirePackage{morewrites}
%</package>
%    \end{macrocode}
%
% \subsubsection{Makro- und Microtypografie}
%
% Für den zweispaltigen Satz im Index.
%    \begin{macrocode}
\RequirePackage{multicol}
%    \end{macrocode}
% Vergrößerung des Durchschusses.
%    \begin{macrocode}
\RequirePackage{setspace}
\setstretch{1.1}
%    \end{macrocode}
%
% Zitate mit Beachtung der Absatzeinstellungen.
%    \begin{macrocode}
\RequirePackage{quoting}
\quotingsetup{vskip=\smallskipamount}
%    \end{macrocode}
%
% Automatisierte Datumsformatierung.
%    \begin{macrocode}
\RequirePackage{isodate}
%    \end{macrocode}
% Unterdrücken von Absatzeinzügen nach bestimmten Umgebungen.
%    \begin{macrocode}
\RequirePackage{noindentafter}
%    \end{macrocode}
%
% \iffalse
%<*class>
% \fi
%
% Mit dem Paket \pkg{ragged2e} wird~-- falls benötigt~-- die Silbentrennung im 
% Flattersatz aktiviert. 
%    \begin{macrocode}
\RequirePackage{ragged2e}
%    \end{macrocode}
% Die Fußnoten werden nicht mit jedem Kapitel zurückgesetzt und im Flattersatz 
% ausgegeben.
%    \begin{macrocode}
\@removefromreset{footnote}{chapter}
\renewcommand*\raggedfootnote{\tud@RaggedRight}%
%    \end{macrocode}
% Das Paket \pkg{ellipsis} sorgt für korrekte Auslassungpunkte.
%    \begin{macrocode}
\AtEndPreamble{%
  \RequirePackage{ellipsis}
  \let\ellipsispunctuation\relax%
}
%    \end{macrocode}
%
% \subsubsection{Tabellen, Listen und Auflistungen}
%
% Mit Hilfe von \pkg{tabularx} können Tabellen bestimmter Breite und
% automatisch berechneten Spaltenbreiten gesetzt werden.
%    \begin{macrocode}
\RequirePackage{tabularx}
%    \end{macrocode}
% Das Paket wird für die Erstellung von Tabellen verwendet.
%    \begin{macrocode}
\RequirePackage{booktabs}
%    \end{macrocode}
% \begin{macro}{\dossvlist}
% \changes{v2.05}{2015/11/17}{neu}^^A
% \begin{macro}{\forssvlist}
% \changes{v2.05}{2015/11/17}{neu}^^A
% Makros aus \pkg{etoolbox} für das Verarbeiten von semikolongetrennten Listen.
%    \begin{macrocode}
\DeclareListParser{\dossvlist}{;}
\DeclareListParser*{\forssvlist}{;}
%    \end{macrocode}
% \end{macro}^^A \forssvlist
% \end{macro}^^A \dossvlist
% Das Paket \pkg{enumitem} erlaubt das Beeinflussen der Standardlisten und die 
% Ableitung neuer Listen aus diesen. Mit \cs{setlist}|{noitemsep}| werden die 
% zusätzlichen Zwischenräume innerhalb der Listen beseitigt. Weiterhin wird 
% linksbündiger Flattersatz für die Standardlisten aktiviert.
%    \begin{macrocode}
\RequirePackage{enumitem}
\setlist{%
  before*={\endgraf\tud@RaggedRight},%
  partopsep=0pt,noitemsep%
}
%    \end{macrocode}
% \begin{macro}{\tud@list@create}
% \changes{v2.06p}{2021/10/04}{neu}^^A
% Erstellen zusätzlicher Listenumgebungen mit vordefinierten Einstellungen. Für 
% die Verwendung des Stils |style=nextline| wird durch |labelwidth=0pt| und 
% |labelsep=0pt| sichergestellt, dass auch nach sehr kurzen Labeln direkt ein 
% Umbruch erfolgt. Weiterhin sorgt |midpenalty=-\@medpenalty| für bevorzugte
% Umbrüche vor einem \cs{item} anstatt diese innerhalb des Textes auszuführen.
%    \begin{macrocode}
\newcommand*\tud@list@create[4][]{%
  \newlist{#2}{#3}{#4}%
  \setlist[{#2}]{%
    font=\normalfont,%
    topsep=\smallskipamount,parsep=\parskip,listparindent=\parindent,%
    style=nextline,%
    leftmargin=2.5em,itemindent=-2em,labelwidth=0pt,labelsep=0pt,%
    midpenalty=-\@medpenalty,%
    #1%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@list@create
%
% \subsubsection{Grafiken \& Co.}
%
% \ToDo{welche Pakete sind für Klasse oder Paket zwingend notwendig?}[v2.06]
%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}
% Einbinden von ganzseitigen PDF"~Dokumenten als Beispiel im Handbuch.
%    \begin{macrocode}
\RequirePackage{pdfpages}
%    \end{macrocode}
%
% \subsubsection{Formatierung von Gleitobjekten}
%
%    \begin{macrocode}
\RequirePackage{caption}
\RequirePackage{floatrow}
\DeclareCaptionSubType[alph]{figure}
\DeclareCaptionSubType[alph]{table}
\captionsetup{font=sf,labelfont=bf,labelsep=space}
\captionsetup{singlelinecheck=off,format=hang,justification=raggedright}
\captionsetup[subfloat]{labelformat=brace,list=off}
\KOMAoption{captions}{tableheading,figuresignature}
\floatsetup[table]{style=plaintop}
%    \end{macrocode}
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Kompilieren externer Quelldateien}
%
% Das Paket \pkg{filemod} wird genutzt, um externer Dateien nur zu kompilieren,
% wenn dies aufgrund einer Änderung auch notwendig ist.
% \ToDo{shell-Kram raus, Tutorials/Examples über \app{make} erstellen}[v2.07]
% \ToDo{\pkg{filemod} raus, \cs{pdf@filemoddate} direkt verwenden}[v2.06]
%    \begin{macrocode}
\RequirePackage{filemod}
%    \end{macrocode}
% Um \cs{ShellEscape} sowohl für Windows als auch für unixoide Betriebssysteme 
% nutzen zu können, wird das Paket \pkg{ifplatform} geladen.
%    \begin{macrocode}
\RequirePackage{ifplatform}
%    \end{macrocode}
% \begin{macro}{\tud@file@check}
% \changes{v2.02}{2014/10/14}{neu}^^A
% \begin{macro}{\tud@file@@check}
% Dieses Makro wird verwendet, wenn eine gesuchte Datei nicht gefunden wurde, 
% weil das Dokument noch nicht mit dem Parameter \file{-{}-shell-escape} 
% kompiliert wurde.
%    \begin{macrocode}
\newcommand*\tud@file@check[1]{%
  \ifnum\pdf@shellescape=\@ne\relax
    \AfterReadingMainAux{\IfFileExists{#1}{}{\tud@file@@check{#1}}}%
  \else
    \IfFileExists{#1}{}{\tud@file@@check{#1}}%
  \fi
}
\newcommand*\tud@file@@check[1]{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrmanual}%
%</package>
  {%
    `#1' missing!\MessageBreak%
    \ifnum\pdf@shellescape=\@ne
      It actually should have been created so you\MessageBreak%
      may consult the log file%
    \else
      Run again with --shell-escape%
    \fi
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@file@@check
% \end{macro}^^A \tud@file@check
% \begin{macro}{\tud@latex@ext}
% \changes{v2.06}{2019/06/21}{neu}^^A
% Für das Aufrufen von \app{pdflatex}, \app{lualatex} oder \app{xelatex}.
%    \begin{macrocode}
\newcommand*\tud@latex@ext{pdflatex\space}
\iftutex
  \ifxetex
    \renewcommand*\tud@latex@ext{xelatex\space}
  \else
    \renewcommand*\tud@latex@ext{lualatex\space}
  \fi
\fi
\appto\tud@latex@ext{-synctex=1\space-interaction=batchmode\space}
%    \end{macrocode}
% \end{macro}^^A \tud@latex@ext
%
% \subsubsection{Querverweise und Anpassungen für das Paket \pkg{hyperref}}
%
% Es folgen einige Befehle, die an das Paket \pkg{hyperref} gekoppelt sind. 
% Sobald das Paket geladen wurde, werden die Makros mit der jeweiligen
% Funktionalität definiert.
%    \begin{macrocode}
\AfterAtEndOfPackage*{hyperref}{%
%    \end{macrocode}
% \begin{macro}{\autorefname}
% \begin{macro}{\auto@refname}
% \begin{macro}{\auto@@refname}
% Der Befehl \cs{autorefname} dient dazu, den Verweistyp beziehungsweise den 
% Bezeichner des aktuellen~-- oder optional eines speziellen~-- Labels ohne die 
% dazugehörige Nummerierung zu erhalten. Das Funktionsprinzip wurde bei 
% \hrfn{http://tex.stackexchange.com/q/33776}{\Lettering{LaTeX} Stack Exchange} 
% vorgestellt und hier übernommen.
%    \begin{macrocode}
  \newcommand*\autorefname[1][current]{%
    \tud@if@strequal{#1}{current}{%
      \expandafter\HyPsd@@autorefname\@currentHref\@nil%
    }{%
      \auto@refname\HyPsd@@autorefname{#1}%
    }%
    \unskip\xspace%
  }%
  \newcommand*\auto@refname[2]{%
    \ifcsundef{r@#2}{%
      ??%
    }{%
      \expandafter\expandafter\expandafter\auto@@refname%
          \csname r@#2\endcsname{}{}{}{}\@nil#1\@nil%
    }%
  }%
  \newcommand*\auto@@refname{}%
  \def\auto@@refname#1#2#3#4#5\@nil#6\@nil{#6#4.\@nil}%
%    \end{macrocode}
% \end{macro}^^A \auto@@refname
% \end{macro}^^A \auto@refname
% \end{macro}^^A \autorefname
% Die Bezeichner für die Abschnittsebenen werden umbenannt.
%    \begin{macrocode}
  \begingroup%
    \def\do#1{%
      \tud@if@language@loaded{#1}{%
        \renewcaptionname{#1}{\sectionautorefname}{Unterkapitel}%
        \renewcaptionname{#1}{\subsectionautorefname}{Abschnitt}%
        \renewcaptionname{#1}{\subsubsectionautorefname}{Unterabschnitt}%
      }{}%
    }%
    \expandafter\docsvlist\expandafter{\tud@localization@@german}%
  \endgroup%
}
%    \end{macrocode}
% Um ungewünschten vertikalen Leerraum vor und nach Überschriften zu vermeiden, 
% werden die Befehle \cs{label} und \cs{index} innerhalb des obligatorischen 
% Argumentes von Gliederungsbefehlen genutzt (\GitHubRepo<latex3/latex2e>'307').
% Damit diese nicht im durch \cs{newlabel} erzeugten Label auftauchen, muss 
% \cs{GetTitleStringExpand} durch \pkg{nameref} verwendet werden, wobei zu 
% diesem Zeitpunkt beide Befehle zu einer leeren Ausgabe expandieren sollten.
%    \begin{macrocode}
\AfterPackage*{nameref}{%
  \patchcmd\NR@gettitle{%
    \GetTitleString%
  }{%
    \GetTitleStringExpand%
  }{}{\tud@patch@wrn{NR@gettitle}}%
}
%    \end{macrocode}
% \begin{macro}{\autoref}
% \begin{macro}{\partautorefname}
% \begin{macro}{\chapterautorefname}
% \begin{macro}{\sectionautorefname}
% \begin{macro}{\subsectionautorefname}
% \begin{macro}{\subsubsectionautorefname}
% Sollte das Paket \pkg{hyperref} nicht geladen werden, wird eine Rückfallebene 
% definiert, wodurch die lokalen Bezeichner der Gliederungsebenen etc. dennoch 
% verwendet werden können.
%    \begin{macrocode}
\TUD@UnwindPackage{hyperref}{%
  \providerobustcmd*\autoref{??~\kernel@ifstar{\ref}{\ref}}%
  \providerobustcmd*\autorefname[1][]{??\xspace}%
  \tud@localization@german{\partautorefname}{Teil}%
  \tud@localization@german{\chapterautorefname}{Kapitel}%
  \tud@localization@german{\sectionautorefname}{Unterkapitel}%
  \tud@localization@german{\subsectionautorefname}{Abschnitt}%
  \tud@localization@german{\subsubsectionautorefname}{Unterabschnitt}%
  \tud@localization@english{\partautorefname}{Part}%
  \tud@localization@english{\chapterautorefname}{chapter}%
  \tud@localization@english{\sectionautorefname}{section}%
  \tud@localization@english{\subsectionautorefname}{subsection}%
  \tud@localization@english{\subsubsectionautorefname}{subsubsection}%
}
%    \end{macrocode}
% \end{macro}^^A \subsubsectionautorefname
% \end{macro}^^A \subsectionautorefname
% \end{macro}^^A \sectionautorefname
% \end{macro}^^A \chapterautorefname
% \end{macro}^^A \partautorefname
% \end{macro}^^A \autoref
%
% \begin{macro}{\tud@hyperdef}
% \changes{v2.06p}{2022/11/08}{neu}^^A
% \begin{macro}{\tud@hyperref}
% \changes{v2.06p}{2022/11/08}{neu}^^A
% Zum einfachen Setzen respektive Referenzieren von Textankern. Damit ersteres 
% oberhalb der Grundlinie erfolgt, wird~-- wie auch an vielen Stellen von 
% \pkg{hyperref} selbst~-- hierfür \cs{Hy@raisedlink} verwendet. Das optionale 
% Argument der Befehle kann für die Angabe einer Kategorie verwendet werden.
%    \begin{macrocode}
\newrobustcmd*\tud@hyperdef[2][]{%
  \begingroup
    \edef\tud@res@a{%
      \endgroup
      \noexpand\Hy@raisedlink{\noexpand\hyperdef{#1}{#2}{}}%
    }%
  \tud@res@a%
}
\newrobustcmd*\tud@hyperref[3][]{%
  \begingroup
    \edef\tud@res@a{%
      \endgroup
      \noexpand\hyperref{}{#1}{#2}%
    }%
  \tud@res@a{#3}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@hyperref
% \end{macro}^^A \tud@hyperdef
% \begin{macro}{\tud@currentHref}
% Einige Befehle und Umgebungen von Drittpaketen ändern bei deren Aufruf die 
% Definition von \cs{currentHref}, was bei Querverweisen gegebenenfalls zu 
% falschen Einträgen führt. Hierfür wird \cs{tud@currentHref} definiert, um die 
% jeweils aktuelle Definition von \cs{currentHref} zu sichern und nach den 
% fraglichen Befehlen und Umgebungen zurückzusetzen.
%    \begin{macrocode}
\newcommand*\tud@currentHref{}
%    \end{macrocode}
% \end{macro}^^A \tud@currentHref
% \begin{macro}{\fullref}
% Ein Makro zur vollständigen Referenzierungen inklusive der relevanten Seite.
%    \begin{macrocode}
\RequirePackage[nospace]{varioref}
\renewrobustcmd*\fullref[1]{\hyperref[{#1}]{\autoref*{#1}\space\vpageref{#1}}}
%    \end{macrocode}
% \end{macro}^^A \fullref
%
% \subsubsection{Einbinden von Quelltexten}
%
% Sowohl im Handbuch als auch in den Tutorials werden Quelltextauszüge für das 
% bessere Verständnis des Anwenders angegeben. Um diese darzustellen wird das 
% Paket \pkg{listings} verwendet.
%    \begin{macrocode}
\RequirePackage{listings}
\lstloadlanguages{[primitive]TeX,[common]TeX,[LaTeX]TeX}
\lstdefinestyle{tudscr}{%
  basicstyle=\ttfamily\ifundef\setstretch{}{\setstretch{1}},%
  keywordstyle=,%
  columns=fullflexible,keepspaces,%
  aboveskip=\smallskipamount,%
  belowskip=\smallskipamount,%
  language=[LaTeX]TeX,%
  texcl,%
}
%    \end{macrocode}
%
% \iffalse
%</body>
%<*option>
% \fi
%
% \subsubsection{ToDo-Liste}
%
% Für Klasse und Paket besteht die Möglichkeit, ToDo-Notizen zu nutzen, wofür
% das Paket \pkg{todonotes} geladen wird.
%    \begin{macrocode}
\PassOptionsToPackage{obeyFinal}{todonotes}
%    \end{macrocode}
% Für den Druck wird die farbige Ausgabe der ToDo-Notizen deaktiviert.
%    \begin{macrocode}
\ifdef\tudprintflag{%
  \PassOptionsToPackage{color=white}{todonotes}%
}{%
  \PassOptionsToPackage{colorinlistoftodos,color=HKS92!10}{todonotes}%
}
%    \end{macrocode}
%
% \begin{option}{ToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% \changes{v2.05}{2015/10/27}{Nutzung von Positiv- und Negativ-Liste}^^A
% \begin{macro}{\if@tud@todo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% \begin{macro}{\tud@todo@type@pos}
% \changes{v2.05}{2015/10/27}{neu}^^A
% \begin{macro}{\tud@todo@type@neg}
% \changes{v2.05}{2015/10/27}{neu}^^A
% Diese Option ist verantwortlich für den Schalter \cs{if@tud@todo}. Über 
% diesen wird gesteuert, ob ToDo-Notizen ausgegeben werden sollen.
%    \begin{macrocode}
\tud@newif\if@tud@todo
\newcommand*\tud@todo@type@pos{}
\let\tud@todo@type@pos\relax
\newcommand*\tud@todo@type@neg{}
\let\tud@todo@type@neg\relax
\TUD@key{ToDo}[true]{%
  \TUD@set@ifkey{ToDo}{@tud@todo}{#1}%
%    \end{macrocode}
% Wird der Option ein boolescher Wert übergeben, sind sowohl die Positiv- als 
% auch die Negativ-Liste hinfällig.
%    \begin{macrocode}
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \let\tud@todo@type@pos\relax%
    \let\tud@todo@type@neg\relax%
  \else%
%    \end{macrocode}
% Wird die Option nicht mit einem booleschen Wert verwendet, so kann über diese 
% gezielt der Typ einer (nicht) auszugebenden ToDo-Notiz angegeben werden. So 
% können bestimmte Typen von Notizen entweder ausschließlich ausgegeben oder 
% aber unterdrückt werden, wobei für letztere Variante das Suffix \val{not} 
% vor dem eigentlichen Typen verwendet werden muss.
%    \begin{macrocode}
    \def\@tempa not##1##2##3##4\@nil{%
      \tud@if@strequal{##1##2##3}{not}{%
        \IfArgIsEmpty{##4}{}{%
          \listeadd\tud@todo@type@neg{##4}%
          \@tud@todotrue%
          \FamilyKeyStateProcessed%
        }%
      }{%
        \IfArgIsEmpty{##1}{}{%
          \listeadd\tud@todo@type@pos{##1##2##3##4}%
          \@tud@todotrue%
          \FamilyKeyStateProcessed%
        }%
      }%
    }%
    \edef\@tempb{not\trim@spaces{#1}}%
    \expandafter\@tempa\@tempb\@empty\@empty\@empty\@nil%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tud@todo@type@neg
% \end{macro}^^A \tud@todo@type@pos
% \end{macro}^^A \if@tud@todo
% \end{option}^^A ToDo
%
% \iffalse
%</option>
%<*body>
% \fi
%
% \begin{macro}{\ToDo}
% \changes{v2.02}{2014/07/10}{Verwendung von \pkg{todonotes}}^^A
% \changes{v2.03}{2015/01/25}{Ausgabe auf bestimmten Typ beschränkbar}^^A
% \changes{v2.05}{2015/11/02}{Farbkodierung durch optionale Versionsnummer}^^A
% \changes{v2.06}{2018/08/02}{farbige Ausgabe abhängig von Versionsnummer}^^A
% \begin{macro}{\tud@todo@type@use}
% \changes{v2.06}{2018/08/02}{neu}^^A
% \begin{macro}{\ListOfToDo}
% \changes{v2.02}{2014/07/10}{neu}^^A
% Mit dem Befehl \cs{ToDo}\oarg{Option}\marg{ToDo-Notiz}\oarg{Versionsnummer}
% kann bei aktivierter Option \opt{ToDo} eine Notiz mit einer offenen Aufgabe
% erstellt werden. Das erste optionale Argument kann die Kategorisierungstypen
% \val{doc}, \val{imp} und \val{rls} beinhalten, welche für eine spezifische
% farbliche Kodierung sorgen, um die Aufgaben zu kategorisieren.
%
% Für die Randnotizen wird eine minimale Breite festgelegt. Sollte das Paket 
% \pkg{todonotes} nicht geladen werden, erfolgt die Definition der nachfolgend 
% implementierten Befehle als Dummy.
%    \begin{macrocode}
\RequirePackage{todonotes}
\AtEndPreamble{%
  \ifdim\marginparwidth<2cm\relax%
    \tud@setdim\marginparwidth{2cm}%
  \fi%
}
\TUD@UnwindPackage{todonotes}{%
  \renewcommand*\ListOfToDo{}%
  \RenewDocumentCommand\ToDo{s o m !o}{}%
}
\newcommand*\tud@todo@type@use{}
\newcommand*\ListOfToDo{\if@tud@todo\clearpage\listoftodos\fi}
%    \end{macrocode}
% Nun folgt die Definition des eigentlichen Befehls. Dabei wird zu Beginn
% \cs{@currentHref} gesichert und am Ende wiederhergestellt.
% \ToDo{\texttt{s o D()\{default\} m}; auch für \cls{tudscrdoc}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\ToDo{s o m !o}{%
  \if@tud@todo%
    \global\let\tud@currentHref\@currentHref%
    \begingroup%
%    \end{macrocode}
% In \cs{tud@todo@type@use} werden alle im optionalen Argument angegeben Werte 
% gesischer, welche entweder über die Liste \cs{tud@todo@type@pos} explizit 
% angefordert oder nicht über die Liste \cs{tud@todo@type@neg} ausgeschlossen 
% wurden.
%    \begin{macrocode}
      \let\tud@todo@type@use\@empty%
%    \end{macrocode}
% Das optionale Argument enthält die gewüscnhten Kategorisierungstypen.
%    \begin{macrocode}
      \IfValueTF{#2}{%
        \IfArgIsEmpty{#2}{}{%
%    \end{macrocode}
% Die Ausgabe erfolgt entweder für alle ToDo-Notizen oder nur für die per 
% Option festgelegten Typen. Dabei wird in einer Schleife geprüft, ob der in 
% der aktuellen Notiz angegebene Kategorisierungstyp entweder in der Positv- 
% oder aber in der Negativ-Liste enthalten ist.
%    \begin{macrocode}
          \let\tud@todo@type@use\relax%
          \ifx\tud@todo@type@pos\relax%
            \def\tud@res@a##1{%
              \ifinlist{##1}{\tud@todo@type@use}{}{%
                \ifinlist{##1}{\tud@todo@type@neg}{}{%
                  \listadd\tud@todo@type@use{##1}%
                }%
              }%
            }%
          \else%
            \def\tud@res@a##1{%
              \ifinlist{##1}{\tud@todo@type@use}{}{%
                \ifinlist{##1}{\tud@todo@type@pos}{%
                  \listadd\tud@todo@type@use{##1}%
                }{}%
              }%
            }%
          \fi%
          \forcsvlist\tud@res@a{#2}%
        }%
      }{}%
%    \end{macrocode}
% Nur wenn mindestens ein aktiver Kategorisierungstyp gefunden wurde oder aber
% gar keine Angabe gemacht wurde, erfolgt die Ausgabe.
%    \begin{macrocode}
      \ifx\tud@todo@type@use\relax\else%
%    \end{macrocode}
% In den temporären Makros werden die Einstellungen für die farbige Ausprägung 
% von Randnotiz (\cs{tud@res@a}) und der Textbox im Fließtex(\cs{tud@res@b}) 
% sowie das Label der Randnotiz (\cs{tud@res@c}) gespeichert.
%    \begin{macrocode}
        \let\tud@res@a\@empty%
        \let\tud@res@b\@empty%
        \let\tud@res@c\@empty%
%    \end{macrocode}
% Der Kategorisierungstyp für Releases \val{rls} ist quasi vorkonfiguriert. 
% Sind weitere Kategorisierungstypen angegeben, werden diese ignoriert. Der Typ 
% für Implemtierung \val{imp} wird vorangig zur Dokumentation \val{doc} 
% behandelt.
%    \begin{macrocode}
        \ifinlist{rls}{\tud@todo@type@use}{%
          \def\tud@res@a{color=HKS44!30,}%
          \def\tud@res@b{color=HKS44!30,}%
          \edef\tud@res@c{v\TUDScriptVersionNumber}%
        }{%
          \ifinlist{imp}{\tud@todo@type@use}{%
            \def\tud@res@a{color=HKS57!50,}%
          }{%
            \ifinlist{doc}{\tud@todo@type@use}{%
              \def\tud@res@a{color=HKS41!30,}%
            }{}%
          }%
%    \end{macrocode}
% Das angestellte optionale Argument erzeugt zusätzlich eine Notiz am Rand, in
% welcher vorzugsweise die angedachte Version eingetragen werden kann. Sollte 
% dieser angegeben sein, wird auf eine gültige Versionsnummer geprüft. Dabei 
% wird ein möglicherweise vorangestelltes |v| entfernt.
%    \begin{macrocode}
          \def\tud@res@c{ToDo}%
          \IfValueT{#4}{%
            \begingroup%
%    \end{macrocode}
% Die angegebene Versionsnummer wird geprüft, ob bereits zu einer vergangenen 
% Version gehört. In diesem Fall wird die ToDo-Notiz entsprechend als dringlich 
% gekennzeichnet. Entspricht die angegebene Versionsnummer einer späteren 
% Version, so wird ToDo-Notiz ebenfalls für diese gekennzeichnet.
%    \begin{macrocode}
              \tud@v@get\tud@res@a{#4}%
              \def\tud@res@c##1.##2##3##4\@nil{##1##2##3}%
              \edef\tud@res@b{\expandafter\tud@res@c\tud@res@a.000\@nil}%
              \Ifnumber{\tud@res@b}{%
                \edef\tud@res@c{%
                  \expandafter\tud@res@c\TUDScriptVersionNumber.000\@nil%
                }%
                \ifnum\tud@res@b>\tud@res@c\relax%
                  \def\tud@res@b{color=HKS92!30,}%
                \else%
                  \ifnum\tud@res@b<\tud@res@c\relax%
                    \def\tud@res@b{color=HKS07!50,}%
                  \else%
                    \def\tud@res@b{color=HKS41!30,}%
                  \fi%
                \fi%
                \def\tud@res@c{v\tud@res@a}%
              }{%
                \let\tud@res@b\@empty%
                \def\tud@res@c{#4}%
              }%
              \edef\tud@res@c{%
                \endgroup%
                \def\noexpand\tud@res@b{\tud@res@b}%
                \def\noexpand\tud@res@c{\tud@res@c}%
              }%
            \tud@res@c%
          }%
        }%
%    \end{macrocode}
% Vor der Ausgabe wird ein kleiner vertikaler Abstand eingefügt.
%    \begin{macrocode}
        \ifhmode\par\fi%
        \let\par\relax%
        \vskip\medskipamount%
        \noindent%
%    \end{macrocode}
% Dann erfolgt die Ausgabe der eigentlichen ToDo-Notiz im Textbereich. Die 
% Sternversion von \cs{ToDo} unterdrückt dabei die Aufnahme in die ToDo-Liste.
%    \begin{macrocode}
        \toks@\expandafter{\tud@res@b inline}%
        \IfBooleanT{#1}{\addto@hook\toks@{,nolist}}%
        \sbox\z@{%
          \expandafter\todo\expandafter[\the\toks@]{\trim@spaces{#3}\strut}%
        }\usebox\z@%
%    \end{macrocode}
% Es folgt die dazugehörige Randnotiz. Damit diese nicht verrutscht, wird
% \cs{marginnote} anstelle von \cs{marginpar} verwendet. Wurde das angestellte
% optionale Argument verwendet, wird dieses für die Randnotiz genutzt.
% Andernfalls erscheint im Rand die Anmerkung \emph{ToDo}.
%    \begin{macrocode}
        \renewcommand*\marginpar[2][]{%
          \marginnote[{##1}]{##2}[\dimexpr-\ht\z@+1.6ex+1.75pt\relax]%
        }%
        \toks@\expandafter{\tud@res@a noline,nolist}%
        \settowidth\marginparwidth{\tud@res@c}%
        \tud@addtodim\marginparwidth{1.6ex+1pt}%
        \expandafter\todo\expandafter[\the\toks@]{\tud@res@c\strut}%
        \aftergroup\par\aftergroup\noindent%
%    \end{macrocode}
% Wurden im ersten optionalen Argument unbekannte Werte gefunden, werden diese 
% mit einer Warnung gemeldet.
%    \begin{macrocode}
        \listremove{\tud@todo@type@use}{rls}%
        \listremove{\tud@todo@type@use}{imp}%
        \listremove{\tud@todo@type@use}{doc}%
        \ifx\tud@todo@type@use\@empty\else%
          \begingroup%
            \let\tud@res@c\@empty%
            \def\do##1{\appto\tud@res@c{,##1}}%
            \dolistloop{\tud@todo@type@use}%
            \edef\tud@res@c{%
              \endgroup%
              \edef\noexpand\tud@res@c{\expandafter\@gobble\tud@res@c}%
            }%
          \tud@res@c%
%<*class>
          \ClassWarning{tudscrmanual}%
%</class>
%<*package>
          \PackageWarning{tudscrmanual}%
%</package>
          {%
            Unknown key(s) `\string\ToDo[\tud@res@c]'%
          }%
        \fi%
      \fi%
    \endgroup%
    \global\let\@currentHref\tud@currentHref%
  \fi%
  \ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \ListOfToDo
% \end{macro}^^A \tud@todo@type@use
% \end{macro}^^A \ToDo
%
% \subsection{Index und Änderungsliste}
%
% Hier erscheint alles, was für Erstellen und Ausgabe der einzelnen Indexe 
% notwendig ist. Diese werden via \app {splitindex} aus |\jobname.idx| 
% extrahiert und anschließend mit \app{texindy} prozessiert.
%
% \begin{macro}{\tud@index@make}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@index@list}
% \changes{v2.06p}{2022/09/29}{neu}^^A
% \begin{macro}{\tud@index@name}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@title}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@opt}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% Mit \cs{tud@index@make} werden die Einstellungen für das Erstellen der 
% einzelnen Indexe gespeichert, wobei mit dem ersten optionalen Argument der 
% spezifische Index definiert wird, welche durch \app{splitindex} genutzt wird. 
% Im obligatorischen Argument wird die Bezeichnung des Indexes angegeben, die 
% normalerweise für Überschrift, Kolumnentitel und Inhaltsverzeichnis genutzt 
% wird. Dies kann mit dem zweiten optionalen Argument angepasst werden, welches 
% an das optionale Argument der verwendeten \KOMAScript"=Gliederungsüberschrift 
% durchgereicht wird und \prm{reference}, \prm{head} und \prm{tocentry} als 
% Parameter enthalten kann. Alle so vorgenommenen Einstellungen werden in 
% |\tud@index@set@@|\meta{name} gesichert und bei der Ausgabe zu Beginn von 
% \env{theindex} durch \cs{tud@index@print}\oarg{name} gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@list{}
\newcommand*\tud@index@name{}
\newcommand*\tud@index@title{}
\newcommand*\tud@index@opt{}
\NewDocumentCommand\tud@index@make{O{main} d() m}{%
  \begingroup%
    \edef\tud@index@name{#1}%
    \def\tud@index@opt{head={#3},tocentry={#3},reference={Index der #3}}%
    \IfValueT{#2}{\appto\tud@index@opt{,#2}}%
    \def\tud@index@title{#3}%
    \tud@toks@{}%
    \def\tud@res@a##1{%
      \addto@hook@expandafter\tud@toks@{%
        \expandafter\def\expandafter##1\expandafter{##1}%
      }%
    }%
    \tud@res@a\tud@index@name%
    \tud@res@a\tud@index@title%
    \tud@res@a\tud@index@opt%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\tud@unique@add\noexpand\tud@index@list{\tud@index@name}%
      \noexpand\csdef{tud@index@set@@#1}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
%<*class>
\AtEndOfClass%
%</class>
%<*package>
\AtEndOfPackage%
%</package>
  {\undef\tud@index@make}
%    \end{macrocode}
% Nun können mit \cs{tud@index@make} die einzelnen Indexe erstellt werden.
% \ToDo{\val{misc} in \val{register} umbenennen?! Ausgabereihenfolge!}[v2.06]
%    \begin{macrocode}
\tud@index@make
  (reference=Allgemeiner Index)
  {Allgemeiner Index}
\tud@index@make[options]
  {Klassen- und Paketoptionen}
\tud@index@make[macros]
  (reference=Index der Befehle und Umgebungen)
  {Befehle und Umgebungen mit zugeh\"origen Parametern}
\tud@index@make[misc]
  {L\"angen und Z\"ahler}
\tud@index@make[terms]
  (reference=Index der Bezeichner)
  {Sprachabh\"angige Bezeichner}
\tud@index@make[elements]
  {Seitenstile, Schriftelemente und Farben}
\tud@index@make[files]
  {Klassen, Pakete und Dateien}
%    \end{macrocode}
% \end{macro}^^A \tud@index@opt
% \end{macro}^^A \tud@index@title
% \end{macro}^^A \tud@index@name
% \end{macro}^^A \tud@index@list
% \end{macro}^^A \tud@index@make
% \begin{macro}{\tud@changes@make}
% \changes{v2.06p}{2022/09/29}{neu}^^A
% \begin{macro}{\tud@changes@list}
% \changes{v2.06p}{2022/09/29}{neu}^^A
% \begin{macro}{\changesname}
% \changes{v2.06p}{2022/09/29}{neu}^^A
% Die einzelnen Indexe für Änderungseinträge werden automatisch anhand der 
% ohnehin vorhandenen Versionsliste erzeugt.
%    \begin{macrocode}
%<*class>
\newcommand*\changesname{\"Anderungsliste}%
\newcommand*\tud@changes@list{}
\newcommand*\tud@changes@make[1]{%
  \tud@unique@add\tud@changes@list{changes-v#1}%
  \tud@index@make[changes-v#1](%
    head=\changesname:~\TUDScript~v#1,%
    tocentry=v#1,%
    reference=\changesname\space f\"ur \TUDScript~v#1,%
  ){\TUDScript~v#1}%
}
\forlistloop\tud@changes@make{\tud@v@list}
%</class>
%    \end{macrocode}
% \end{macro}^^A \changesname
% \end{macro}^^A \tud@changes@list
% \end{macro}^^A \tud@changes@make
%
% \begin{environment}{theindex}
% \begin{macro}{\tud@index@cols}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@index@prologue}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@index@hook}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% Die Umgebung \env{theindex} mit den Ebenenbefehlen \cs{item} etc. sowie die 
% eingefügten vertikalen Abstände inklusive des notwendigen Kleisters werden 
% definiert. Zusätzliche Einstellungen lassen sich via \cs{tud@index@hook} 
% hinzugefügen. Weiterhin wird ein referenzierbares Label erstellt und der 
% gegebenenfalls mit \cs{tud@index@prologue} angegebene Prolog gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@cols{2}
\newcommand*\tud@index@prologue{}
\newcommand*\tud@index@hook{}
\RenewDocumentEnvironment{theindex}{+b}{%
  \def\lettergroup##1{\minisec{##1}}%
  \def\item{\tud@index@item{0}}%
  \def\subitem{\tud@index@item{1}}%
  \def\subsubitem{\tud@index@item{2}}%
  \def\subsubsubitem{\tud@index@item{3}}%
  \def\indexspace{\tud@index@vskip[\bigskipamount]}%
  \tud@index@hook%
%    \end{macrocode}
% Hier werden die mit \cs{tud@index@make} festgelegten Einstellungen umgesetzt.
%    \begin{macrocode}
%<*class>
  \def\tud@res@a{\addsec}%
  \eappto\tud@res@a{[{\expandonce\tud@index@opt}]}%
%</class>
%<*package>
  \def\tud@res@a{\subsection*}%
%</package>
  \appto\tud@res@a{%
    {\tud@index@title\label{idx:\tud@index@name}}%
%<*class>
    \markdouble{\@currentheadentry}%
%</class>
%<*package>
    \markdouble{\tud@index@title}%
%</package>
%    \end{macrocode}
% Ein Index kann gegebenenfalls in mehreren Spalten gesetzt werden, wofür die 
% Umgebung \env{multicols} aus dem gleichnamigen Paket genutzt wird. Damit 
% Umbrüche sinnvoll gesetzt werden, wird reichlich Kleister verwendet. Zu 
% beachten ist dabei, dass dieser ohne Prolog direkt nach der Überschrift 
% verwendet werden soll, weshalb diesbezüglich \cs{multicolsep} angepasst wird.
%    \begin{macrocode}
    \ifx\tud@index@prologue\@empty
      \setlength\multicolsep{\z@}%
    \else
      \nopagebreak\tud@index@prologue\par
      \setlength\multicolsep{\tud@index@glue{\bigskipamount}}%
    \fi
  }%
  \ifnum\tud@index@cols>\@ne\relax%
    \long\def\tud@res@b##1{%
      \setlength\columnsep{\f@size\p@}%
      \setlength\columnseprule{\z@}%
      \begin{multicols}{\tud@index@cols}[\tud@res@a]%
      ##1%
      \end{multicols}%
    }%
  \else%
    \long\def\tud@res@b##1{\tud@res@a##1}%
  \fi%
  \tud@res@b{%
    \setparsizes{\z@}{\z@\@plus.1\baselineskip}{\z@\@plus1fil}%
    \par@updaterelative%
    \tud@raggedright%
    #1%
  }%
}{}
%    \end{macrocode}
% \end{macro}^^A \tud@index@hook
% \end{macro}^^A \tud@index@prologue
% \end{macro}^^A \tud@index@cols
% \end{environment}^^A theindex
% \begin{macro}{\tud@index@item}
% \changes{v2.06p}{2022/09/06}{neu}^^A
% \begin{macro}{\tud@index@vskip}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\tud@index@glue}
% \changes{v2.06p}{2022/09/30}{neu}^^A
% Mit \cs{tud@index@item} erfolgt eine generalisierte Definition für Einträge 
% im Index in den einzelnen Ebenen. Diese wird anstelle von \cs{@idxitem} 
% genutzt, um mit |penalty| Umbrüche in tieferen Ebenen zu reduzieren.
%    \begin{macrocode}
\newcommand*\tud@index@item[2][\relax]{%
  \par\addpenalty{\numexpr#2*\@lowpenalty-\@lowpenalty\relax}#1%
  \hspace*{\dimexpr\numexpr#2\relax em\relax}%
  \hangindent=\dimexpr\numexpr2*#2+3\relax em/2\relax%
}
%    \end{macrocode}
% Hiermit wird der zwischen den einzelnen Gruppierungen im Index eingefügte 
% Abstand definiert. Dieser wird via \cs{indexspace} gesetzt.
%    \begin{macrocode}
\newcommand*\tud@index@vskip[1][\smallskipamount]{%
  \vskip\tud@index@glue{#1}%
}
\newcommand*\tud@index@glue[1]{%
  \glueexpr%
    1\glueexpr#1\relax%
    \@plus1\glueexpr#1\relax%
    \@minus.5\glueexpr#1\relax%
  \relax%
}
%    \end{macrocode}
% \end{macro}^^A \tud@index@glue
% \end{macro}^^A \tud@index@vskip
% \end{macro}^^A \tud@index@item
%
% \subsubsection{Prozessieren der Indexeinträge mit \app{texindy}}
%
% \begin{macro}{\makeindex}
% \begin{macro}{\@indexfile}
% \begin{macro}{\tud@xdy@settings}
% \changes{v2.05}{2019/10/30}{neu}^^A
% \begin{macro}{\tud@xdy@mdfive}
% \changes{v2.06p}{2022/09/05}{neu}^^A
% \begin{macro}{\tud@xdy@log}
% \changes{v2.06p}{2022/09/29}{neu}^^A
% Die notwendigen Einstellungen für den Aufruf von \app{texindy} werden in 
% \cs{tud@xdy@settings} definiert. Dabei werden sowohl die Eingabekodierung als 
% auch die Dokumentsprache beachtet. Diese werden nach dem Satz des Dokumentes 
% ausgelesen, da diese an diesem Punkt in jedem Fall definiert sind und der 
% Aufruf von \app{texindy} ohnehin erst nach dem Ende des Dokumentes erfolgt.
%    \begin{macrocode}
\newcommand*\tud@xdy@settings{}
\edef\tud@xdy@settings{texindy -M \@currname.\@currext-ind.xdy}
\AtEndDocument{%
  \tud@if@language@main{german}{%
    \eappto\tud@xdy@settings{\space-L german-din}%
  }{}%
  \eappto\tud@xdy@settings{%
    \space-C \ifundef\inputencodingname{utf8}{\inputencodingname}%
  }%
}
%    \end{macrocode}
% Das Erstellen der Indexdatei \file{\string\jobname.idx} wird hier definiert.
% Damit nicht bei jedem Aufruf mit \file{-{}-shell-escape} die Indexe neu 
% erstellt werden, wird mit \cs{pdf@filemdfivesum} geprüft, ob sich die Datei 
% \file{\string\jobname.idx} überhaupt seit dem letzten Aufruf geändert hat. 
% Hierfür wird die Prüfsumme der Datei \file{\string\jobname.idx} in die 
% aux"~Datei geschrieben. Lediglich bei einer detektierten Änderung der
% Indexdatei \file{\string\jobname.idx} werden \app{splitindex} gefolgt von 
% \app{texindy} aufgerufen.
%    \begin{macrocode}
\newcommand*\tud@xdy@mdfive{}
\newcommand*\tud@xdy@log{}
\edef\tud@xdy@log{\jobname.xlg}
\ifx\makeindex\relax\else
\def\makeindex{%
  \tud@newwrite\@indexfile%
  \immediate\openout\@indexfile="\jobname.idx"\relax%
  \typeout{Writing index file \jobname.idx}%
  \BeforeClosingMainAux{%
    \immediate\closeout\@indexfile%
%    \end{macrocode}
% Die Prüfsumme der Indexdatei wird temporär in \cs{tud@res@a} gesichert. 
% Zusätzlich wird die Prüfsumme der Logdatei |\jobname.xlg| nach dem Aufruf 
% verglichen, um zu detektieren, ob der Aufruf von \app{splitindex} gefolgt von 
% \app{texindy} auch erfolgreich war. Hierfür wird \cs{tud@res@b} genutzt.
%    \begin{macrocode}
    \@tud@res@swafalse%
    \edef\tud@res@a{\pdf@filemdfivesum{\jobname.idx}}%
    \edef\tud@res@b{\pdf@filemdfivesum{\tud@xdy@log}}%
    \edef\tud@res@c{%
      splitindex%
        \space-m\space''%'\tud@xdy@settings\space2>\string&1'%
        \space\jobname.idx%
    }%
    \ifnum\pdf@strcmp{\tud@res@a}{\tud@xdy@mdfive}=\z@\else
      \ifnum\pdf@shellescape=\@ne\relax
%<*class>
        \ClassInfo{tudscrmanual}%
%</class>
%<*package>
        \PackageInfo{tudscrmanual}%
%</package>
          {invoking: \tud@res@c}%
        \begingroup%
          \everyeof{\noexpand}%
          \endlinechar=\m@ne%
          \edef\tud@res@c{%
            \noexpand\@@input\string|%
              \string"\tud@res@c\string"\space%
          }%
          \tud@res@c%
        \endgroup%
%    \end{macrocode}
% Leeren des alten Logs. In der folgenden Schleife werden alle Ausgaben von 
% |stdout| und |stderr| an dieses via |>>\tud@xdy@log| angehangen.
%    \begin{macrocode}
        \immediate\openout\@indexfile="\tud@xdy@log"\relax%
        \immediate\closeout\@indexfile%
        \def\do##1{%
          \begingroup
            \eappto\tud@xdy@settings{\space-o \jobname-##1.ind}%
            \def\tud@res@c{\jobname-##1-declare.idx}%
            \IfFileExists{\tud@res@c}{%
              \eappto\tud@xdy@settings{\space\tud@res@c}%
            }{}%
            \eappto\tud@xdy@settings{\space\jobname-##1.idx}%
            \begingroup%
              \everyeof{\noexpand}%
              \endlinechar=\m@ne%
              \edef\tud@res@c{%
                \noexpand\@@input\string|%
                  \string"\tud@xdy@settings%
                    \space>>\tud@xdy@log%
                    \space2>\string&1%
                    \string"\space%
              }%
              \tud@res@c%
            \endgroup%
          \endgroup
        }%
        \dolistloop{\tud@index@list}%
%    \end{macrocode}
% Bei einem erfolgreichen Aufruf~-- eine (neue) Logdatei wurde erstellt~-- wird 
% die Prüfsumme auf den neuen Wert gesetzt.
%    \begin{macrocode}
        \ifnum\pdf@strcmp{\pdf@filemdfivesum{\tud@xdy@log}}{\tud@res@b}=\z@%
%<*class>
          \ClassWarningNoLine{tudscrmanual}%
%</class>
%<*package>
          \PackageWarningNoLine{tudscrmanual}%
%</package>
          {%
            \tud@res@c\MessageBreak%
            was called but there is no result%
          }%
        \else%
          \let\tud@xdy@mdfive\tud@res@a%
        \fi%
      \else%
%<*class>
        \ClassWarningNoLine{tudscrmanual}%
%</class>
%<*package>
        \PackageWarningNoLine{tudscrmanual}%
%</package>
        {%
          The index file `\jobname.idx' has changed. Run again\MessageBreak%
          with --shell-escape flag enabled or just call\MessageBreak%
          \tud@res@c%
        }%
      \fi
    \fi
%    \end{macrocode}
% Die Prüfsumme der Indexdatei wird \emph{immer} in die aux"~Datei geschrieben.
%    \begin{macrocode}
    \immediate\write\@mainaux{%
      \string\gdef\string\tud@xdy@mdfive{\tud@xdy@mdfive}%
    }%
  }%
  \def\@index[##1]##2{%
    \@wrindex[{##1}]{##2}%
    \endgroup\@esphack%
  }%
  \let\makeindex\@empty
}
\fi
\@onlypreamble\makeindex
%    \end{macrocode}
% \end{macro}^^A \tud@xdy@log
% \end{macro}^^A \tud@xdy@mdfive
% \end{macro}^^A \tud@xdy@settings
% \end{macro}^^A \@indexfile
% \end{macro}^^A \makeindex
%
% \subsubsection{Definition von Indexeinträgen}
%
% \begin{macro}{\@wrindex}
% \begin{macro}{\index}
% \begin{macro}{\@index}
% Für das Erzeugen von Indexeinträgen werden die entsprechenden Befehle neu
% definiert, um via \cs{index}\oarg{Index}\marg{Eintrag} mit einem optionalen
% Argument einen spezifischen Index angegeben zu können.
%    \begin{macrocode}
\undef\@wrindex
\newcommand*\@wrindex[2][main]{%
  \protected@write\@indexfile{\@sanitize}{%
    \string\indexentry[#1]{#2}{\thepage}%
  }%
}
\def\index{%
  \@bsphack\begingroup%
  \@sanitize%
  \@ifnextchar[%]
    {\@index}%
    {\@index[main]}%
}
\def\@index[#1]#2{\endgroup\@esphack}
\tud@outputpage@initialize{\let\index\@gobbleopt@one}
\tud@addtocontents@initialize*{\let\index\@gobbleopt@one}
%    \end{macrocode}
% \end{macro}^^A \@index
% \end{macro}^^A \index
% \end{macro}^^A \@wrindex
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\tud@index@csv}
% \changes{v2.06p}{2022/10/05}{neu}^^A
% \begin{macro}{\tud@index@@csv}
% \begin{macro}{\tud@index@@@csv}
% Eine kommaseparierte Liste von Schlagworten im zweiten Argument wird für 
% Einträge in den allgemeinen Index an das Makro des ersten Argumentes 
% angehangen.
%    \begin{macrocode}
\NewDocumentCommand\tud@index@csv{m m}{%
  \begingroup
    \let#1\relax
    \protected@edef\tud@res@a{%
      \noexpand\forcsvlist{\tud@index@@csv\noexpand#1}{#2}%
    }%
    \tud@res@a%
    \protected@edef\tud@res@a{%
      \endgroup
      \unexpanded{\def#1}{\expandonce#1}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@index@@csv{m >{\TrimSpaces}m}{%
  \IfArgIsEmpty{#2}{}{%
    \in@{|}{#2}%
    \ifin@
      \tud@index@@@csv#1#2\@nil%
    \else
      \tud@index@@@csv#1#2|\@nil%
    \fi
  }%
}
\newcommand*\tud@index@@@csv{}
\def\tud@index@@@csv#1#2|#3\@nil{%
  \protected@eappto#1{%
    \noexpand\index{\trim@spaces{#2}\IfArgIsEmpty{#3}{}{|#3}}%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@index@@@csv
% \end{macro}^^A \tud@index@@csv
% \end{macro}^^A \tud@index@csv
%
% \iffalse
%</class>
% \fi
%
% \subsubsection{Indexverweise}
%
% \begin{macro}{\SeeIndex}
% \begin{macro}{\seeidx}
% Der Befehl \cs{SeeIndex} dient zum Eintragen eines oder mehrerer Schlagworte 
% in den allgemeinen Index und verweist für dieses auf den im ersten Argument 
% gegebenen Spezialindex. Das optionale Argument kann verwendet werden, um den 
% hierfür genutzten Text anzupassen, wobei ein im Argument angegebener \val{*} 
% durch das jeweilige Schlagwort substituiert wird. Die Schlagworte selbst 
% werden als kommaseparierte Liste im zweiten Argument angegeben.
%    \begin{macrocode}
\newcommand*\seeidx[1]{\pageref{idx:#1}}
\NewDocumentCommand\SeeIndex{m o m}{%
  \begingroup
    \def\do##1{%
      \IfValueTF{#2}{%
        \def\tud@res@b{#2}%
        \tud@replace@in\tud@res@b{*}{##1}%
        \trim@spaces@in\tud@res@b%
        \protected@edef\tud@res@b{\noexpand\hyperref[{idx:#1}]{\tud@res@b}}%
      }{%
        \def\tud@res@b{\nameref{idx:#1}}%
      }%
      \protected@edef\tud@res@c{##1}%
      \trim@spaces@in\tud@res@c%
%    \end{macrocode}
% Mit der Verwendung von \val{""} zu Beginn des Sortierschlüssels wird der 
% Verweis als erster Untereintrag für das jeweilige Schlagwort gesetzt.
%    \begin{macrocode}
      \index{%
        \tud@res@c!""idx:#1@\textrightarrow\kern.1em\tud@res@b|seeidx{#1}%
      }%
    }%
    \docsvlist{#3}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \seeidx
% \end{macro}^^A \SeeIndex
% \begin{macro}{\SeeEntry}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{SeeEntry} wird unter dem im ersten Argument gegebenen Schlagwort auf 
% einen Indexeintrag des zweiten Argumentes verwiesen. In beiden Argumenten
% kann eine kommaseperierte Liste genutzt werden. Für ein spezielles Markup
% eines Begriffes ist es außerdem möglich, die für eine angepasste Auszeichnung 
% gebräuchliche Notation \meta{Eintrag}|@|\meta{Markup} zu nutzen.
%
% Normalerweise wird für den Verweis die Referenzklasse \verb+|see+ verwendet.
% Die Sternversion des Befehls hingegen nutzt \verb+|seeunverified+, um auf 
% eine Existenzprüfung des Refernzeintrags durch \app{texindy} zu verzichten.
%    \begin{macrocode}
\NewDocumentCommand\SeeEntry{s m m}{%
  \begingroup
    \def\do##1{%
      \begingroup
        \def\do####1{%
          \protected@edef\tud@res@a{####1}%
          \trim@spaces@in\tud@res@a%
          \protected@edef\tud@res@b{##1}%
          \trim@spaces@in\tud@res@b%
          \edef\tud@res@c{%
            \noexpand\index{%
              \expandonce\tud@res@a%
              |see\IfBooleanT{#1}{unverified}{\expandonce\tud@res@b}%
            }%
          }%
          \tud@res@c%
        }%
        \docsvlist{#2}%
      \endgroup
    }%
    \docsvlist{#3}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \SeeEntry
%
% \begin{macro}{\cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\cleverseealso}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\tud@cleversee}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \changes{v2.05k}{2017/03/20}{neu}^^A
% \begin{macro}{\seesep}
% \changes{v2.06o}{2022/08/03}{neu}^^A
% Diese Befehle dienen zum smarten Setzen von Hinweisen im Index. Existiert 
% lediglich dieser Hinweis im Index, wird dieser mit dem Präfix \cs{seename} 
% ausgegeben. Sind jedoch für einen Indexeintrag auch Seitenzahlen vorhanden, 
% so werden diese zuerst ausgegeben, danach folgt der Querverweis mit dem 
% Präfix \cs{seealsoname}. Der Befehl \cs{cleverseealso} verwendet letzteren 
% Präfix in jedem Fall.
%    \begin{macrocode}
\newrobustcmd*\seesep{\txb}
\newrobustcmd*\cleversee{\tud@cleversee{\seename}}
\newrobustcmd*\cleverseealso{%
%<*class>
  \ClassWarning{tudscrmanual}%
%</class>
%<*package>
  \PackageWarning{tudscrmanual}%
%</package>
    {You should use `|see' instead of `|seealso'}%
  \tud@cleversee{\alsoname}%
}
%    \end{macrocode}
% Diese Makro übernimmt die eigentliche Arbeit. Es ist darauf angewiesen, dass 
% die angegebenen Seitenzahlen eines Indexeintrages erst \emph{nach} den
% Hinweisen ausgegeben und mit \cs{relax} abgeschlossen werden. Dies wird mit
% der später definierten Stildatei für \app{texindy} sichergestellt. So wird es 
% möglich, dass das Makro \cs{tud@cleversee} das zweite obligatorische Argument 
% bis zu \cs{relax} parsen kann und abhängig davon die Ausgabe gestaltet.
%    \begin{macrocode}
\newcommand*\tud@cleversee{}
\def\tud@cleversee#1#2\relax{%
  \begingroup%
    \let\cleversee\@empty%
    \let\cleverseealso\@empty%
    \let\tud@res@a\@empty%
    \def\tud@res@b{#2}%
%    \end{macrocode}
% Im Index erzeugte Verweise mit \verb+|+|see| werden vor Seitenzahlen angegben 
% und von diesen durch |\\| getrennt. Bei der Ausgabe soll diese Reihenfolge 
% jedoch getauscht werden.
%    \begin{macrocode}
    \def\tud@res@c##1\\##2\@nil{%
      \appto\tud@res@a{##1}%
      \def\tud@res@b{##2}%
      \trim@spaces@in\tud@res@b%
      \in@{\\}{##2}%
    }%
%    \end{macrocode}
% Für einen Eintrag können mit \verb+|+|see| sowie \verb+|+|seealso| oder 
% \verb+|+|seeunverified| unterschiedliche Verweise existieren, die jeweils mit 
% |\\| voneinander getrennt sind. Diese werden mit der Schleife zusammengefasst.
%    \begin{macrocode}
    \in@true%
    \@whilesw\ifin@\fi{%
      \expandafter\tud@res@c\tud@res@b\@nil%
    }%
%    \end{macrocode}
% Falls mindestens ein Eintrag mit einer Seitenzahl existiert, wird der 
% Verweis darauf mit einem Zeilenumbruch angehangen.
%    \begin{macrocode}
    \ifx\tud@res@b\@empty%
      \mbox{\emph{#1}}%
    \else%
      \tud@res@b\space\linebreak[1]\mbox{\emph{\alsoname}}%
    \fi%
    \space\tud@res@a%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \seesep
% \end{macro}^^A \tud@cleversee
% \end{macro}^^A \cleverseealso
% \end{macro}^^A \cleversee
%
% \subsubsection{Ausgabe von Index und Änderungsliste}
%
% Hier wird alles definiert, was zur Ausgabe der einzelnen, mit \app{splitindex}
% unterteilten und \app{texindy} prozessierten Indexe notwendig ist.
%
% \begin{macro}{\tud@index@print}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\tud@index@nolettergroup@list}
% \changes{v2.06p}{2022/09/30}{neu}^^A
% \begin{macro}{\tud@index@nolettergroup@add}
% \changes{v2.06p}{2022/09/30}{neu}^^A
% Mit \cs{tud@index@print} erfolgt die Ausgabe der einzelnen Indexe, wobei im 
% ersten optionalen Argument der gewünschte, mittels \app{splitindex} erzeugte 
% Index und im zweiten optionalen Argument eine Präambel angegben werden kann.
% Ein möglicher Seitenumbruch wird vor dem Index und nicht nach der Präambel 
% bevorzugt. Vor dem Einbinden werden die mittels \cs{tud@index@make} in 
% |\tud@index@set@@|\meta{name} gesicherten Einstellungen gesetzt.
%    \begin{macrocode}
\NewDocumentCommand\tud@index@print{s O{main} D<>{2} >{\TrimSpaces}+D(){}}{%
  \pagebreak[3]%
  \begingroup
    \@tud@res@swafalse%
    \IfBooleanTF{#1}{\@tud@res@swatrue}{%
      \ifinlist{#2}{\tud@index@nolettergroup@list}{\@tud@res@swatrue}{}%
    }%
    \if@tud@res@swa
      \preto\tud@index@hook{%
        \let\lettergroup\@gobble
        \let\lettergroupDefault\@gobble
        \let\indexspace\relax
      }%
    \fi
    \csuse{tud@index@set@@#2}%
    \def\tud@index@cols{#3}\relax%
    \ifnum\tud@index@cols<\tw@\relax%
      \def\tud@index@cols{\@ne}\relax%
    \fi%
    \def\tud@index@prologue{#4}%
    \IfFileExists{\jobname-#2.ind}{%
      \@input@{\jobname-#2.ind}%
    }{%
      \IfFileExists{\jobname-#2.idx}{%
        \begin{theindex}\end{theindex}%
%<*class>
        \ClassWarning{tudscrmanual}%
%</class>
%<*package>
        \PackageWarning{tudscrmanual}%
%</package>
        {%
          Processing with `texindy' went wrong as\MessageBreak%
          `\jobname-#2.ind' is missing%
        }%
        \global\let\tud@xdy@mdfive\@empty%
      }{}%
    }%
  \endgroup
}
%    \end{macrocode}
% Um für spezifische Indexe \cs{lettergroup} und \cs{indexspace} unwirksam 
% machen zu können, wird diese Liste verwendet, welche über \cs{PrintIndex}
% gesetzt werden kann.
%    \begin{macrocode}
\newcommand*\tud@index@nolettergroup@list{}
\NewDocumentCommand\tud@index@nolettergroup@add{>{\TrimSpaces}m}{%
  \xifinlist{#1}{\tud@index@list}{%
    \tud@unique@eadd\tud@index@nolettergroup@list{#1}%
  }{%
%<*class>
    \ClassWarning{tudscrmanual}%
%</class>
%<*package>
    \PackageWarning{tudscrmanual}%
%</package>
    {%
      Index `#1' unknown, possible values are:\MessageBreak%
      \tud@index@list%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@index@nolettergroup@list
% \end{macro}^^A \tud@index@nolettergroup@add
% \end{macro}^^A \tud@index@print
%
% \begin{macro}{\tud@index@check}
% \changes{v2.06p}{2022/09/30}{neu}^^A
% Falls \cs{makeindex} nicht genutzt wurde, aber die Ausgabe von Index oder 
% Änderungsliste via \cs{PrintIndex} oder \cs{PrintChanges} gewünscht ist, wird 
% eine Warnung erzeugt.
%    \begin{macrocode}
\newcommand*\tud@index@check{%
  \IfFileExists{\jobname.idx}{}{%
%<*class>
    \ClassWarning{tudscrmanual}%
%</class>
%<*package>
    \PackageWarning{tudscrmanual}%
%</package>
    {%
      Did you use `\string\makeindex'? Index file\MessageBreak%
      `\jobname.idx' is missing%
    }%
  }%
}
\AtBeginDocument{\ifx\makeindex\relax\let\tud@index@check\relax\fi}
%    \end{macrocode}
% \end{macro}^^A \tud@index@check
%
% \begin{macro}{\PrintIndex}
% \changes{v2.02}{2014/08/20}{neu}^^A
% Mit \cs{PrintIndex} erfolgt die Ausgabe aller mit \app{splitindex} erzeugten 
% und \app{texindy} prozessierten Indexe.
%    \begin{macrocode}
\NewDocumentCommand\PrintIndex{>{\SplitList{,}}d() >{\TrimSpaces}o}{%
%<*class>
  \cleardoublepage%
%</class>
  \tud@index@check%
  \let\tud@index@nolettergroup@list\@empty%
  \IfValueT{#1}{\ProcessList{#1}{\tud@index@nolettergroup@add}}%
  \bookmarksetup{startatroot}%
  \def\tud@index@hook{\@tud@indextrue}%
%<*class>
  \setchapterpreamble{%
    \begin{abstract}%
    \noindent%
    \IfValueTF{#2}{#2}{%
      Die Formatierung der Eintr\"age in allen aufgef\"uhrten Indexen ist %
      folgenderma\ss{}en aufzufassen: \textbf{Zahlen in fetter Schrift} %
      verweisen auf die \textbf{Erkl\"arung} zu einem Stichwort, wobei in %
      der digitalen Fassung dieses Handbuchs dieser Eintrag selbst ein %
      Hyperlink zu seiner Erl\"auterung ist. Seitenzahlen in normaler %
      Schriftst\"arke hingegen deuten auf zus\"atzliche Informationen, %
      wobei diese f\"ur \textit{kursiv hervorgehobene Zahlen} als besonders %
      \textit{wichtig} erachtet werden.\par %
      In den themenspezifischen Indexen wird f\"ur alle Eintr\"age, welche %
      nicht durch \TUDScript sondern von anderen Klassen oder Paketen zur %
      Verf\"ugung gestellt werden, dies im Suffix des entsprechenden %
      Eintrages angegeben. Existiert f\"ur einen solchen Eintrag %
      \emph{keine} direkte \textbf{Erl\"auterung} ist dementsprechend auch %
      kein Hyperlink verf\"ugbar.%
    }%
    \end{abstract}%
  }%
  \addchap{\indexname\label{idx:index}}%
%</class>
%<*package>
  \addsec{\indexname\label{idx:index}}%
  \IfValueT{#2}{#2}%
%</package>
  \tud@index@print%
%<*class>
  (%
    Die im Folgenden aufgelisteten Schlagworte sollen f\"ur den Umgang mit %
    \Lettering{LaTeX} im Allgemeinen sowie dem \TUDScript-Bundle im Speziellen %
    sowohl Antworten bei generellen Fragen liefern als auch L\"osungen f\"ur %
    typische Probleme bereitstellen. Falls ein gesuchter Begriff hier nicht %
    zu finden ist oder trotz vorhandener Hinweise kein zufriedenstellendes %
    Ergebnis erzielt werden kann, sollte das \GitHubRepo'discussions' erster %
    Anlaufpunkt sein, um weitere Hilfe zu erhalten.%
  )%
  \clearpage%
%</class>
  \tud@index@print[options]%
%<*class>
  (%
    Dies ist der Index aller im Handbuch erl\"auterten sowie erw\"ahnten %
    Optionen, wobei bei den meisten auch Untereintr\"age mit Seitenangaben %
    f\"ur spezielle Wertzuweisungen existieren.%
  )%
%</class>
  \tud@index@print[macros]%
%<*class>
  (%
    Dies ist eine Auflistung aller zuvor erl\"auterten sowie erw\"ahnten %
    Befehle und Umgebungen. Bei einigen sind zus\"atzliche Untereintr\"age %
    f\"ur Schl\"ussel-Wert-Parameter zu finden, die im optionalen Argument %
    der jeweiligen Anweisung verwendet werden k\"onnen. Gegebenenfalls sind %
    auch explizite Wertzuweisungen an diese Parameter angegeben.%
  )%
%</class>
  \tud@index@print[terms]%
%<*class>
  (%
    Dies sind die von \TUDScript definierten respektive erw\"ahnten, %
    sprachabh\"angigen Bezeichner. Informationen zu Nutzung und %
    Anpassungsm\"oglichkeiten sind in \autoref{sec:localization} zu finden.%
  )%
%</class>
  \tud@index@print[elements]%
  \tud@index@print[misc]%
  \tud@index@print[files]%
}
%    \end{macrocode}
% \end{macro}^^A \PrintIndex
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\PrintChanges}
% Hiermit erfolgt die Ausgabe der Änderungsliste. Für jede Version wurde eine 
% Indexdatei |\jobname-changes-|\meta{Version}|.ind| erstellt. Diese werden 
% nachfolgend eingelesen.
%    \begin{macrocode}
\newcommand*\PrintChanges{%
  \begingroup%
    \cleardoublepage%
    \tud@index@check%
    \bookmarksetup{startatroot}%
%    \end{macrocode}
% Jedes Element der obersten Ebene soll einen vertikalen Abstand erzeugen.
%    \begin{macrocode}
    \def\tud@index@hook{%
      \@tud@indextrue%
      \def\indexspace{\tud@index@vskip}%
      \def\item{%
        \def\item{\tud@index@item[\tud@index@vskip]{0}}%
        \tud@index@item{0}%
      }%
    }%
    \addchap{\changesname\label{idx:changes}}%
    \def\do##1{\tud@index@print*[##1]<1>}%
    \dolistloop{\tud@changes@list}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}^^A \PrintChanges
%
% \iffalse
%</class>
% \fi
%
% \subsection{Markup von \Lettering{LaTeX}-Elementen in der Dokumentation}
%
% Es folgen die Definitionen, um verschiedenste \Lettering{LaTeX}-Elemente wie 
% beispielsweise Bundle, Klassen oder Pakete sowie deren Befehle und Umgebungen 
% inklusive der nutzbaren Argumente dokumentieren und erläutern zu können. All
% diese Elemente werden im Folgenden allgemein und unspezifisch als Entitäten
% bezeichnet. Ziel der definierten Entitätsbefehle und -umgebungen ist es, dass
% diese uniform genutzt werden und kontektabhängig automatisch Indexeinträge, 
% Label, Referenzierungen und unterschiedliche Ausgaben generieren können.
%
% Zu Beginn werden einige Hilfmakros definiert.
%
% \begin{macro}{\tud@truncate@value}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Der expandierte Inhalt des zweiten Argumentes \meta{key}|=|\meta{value}
% wird an |=| getrennt und \meta{key} in das Makro des ersten Argumentes 
% zurück geschrieben.
%    \begin{macrocode}
\newcommand*\tud@truncate@value[2]{%
  \begingroup%
    \protected@edef\tud@res@a{#2}%
    \def\tud@res@b##1=##2\@nil{%
      \endgroup%
      \def#1{##1}%
    }%
  \expandafter\tud@res@b\tud@res@a=\@nil%
}
%    \end{macrocode}
% \end{macro}^^A \tud@truncate@value
%
% \subsubsection{Markup von Variablen, Parametern etc.}
%
% \begin{macro}{\tud@doifPValue}
% \changes{v2.05}{2015/11/14}{neu}^^A
% Der Befehl wird von den Makros \cs{tud@lbl@@@get} und \cs{tud@idx@get} 
% genutzt, um bedingten Quelltext auszuführen, falls im ersten obligatorischen 
% Argument entweder Parameter direkt oder aber mit einem der Parameterbefehle 
% \cs{PValue} oder \cs{PSet} angegeben wurde. Andere Auszeichnungsbefehle 
% für Parameter werden ignoriert.
%    \begin{macrocode}
\newcommand*\tud@doifPValue[3][]{%
  \IfValueT{#2}{%
    \begingroup%
%    \end{macrocode}
% Zunächst wird der Inhalt fast aller ausgezeichneten Parameter unterdrückt.
% Lediglich das Argument der beiden Makros \cs{PValue} und \cs{PSet} wird 
% durchgereicht.Dies wird bei der Generierung von Labeln sowie der Erstellung
% für Einträge im Index und der Änderungsliste benötigt, um die Angabe von
% speziellen Werten bei Schlüsseln zu erhalten.
%    \begin{macrocode}
      \let\PName\@gobble%
      \let\PValue\@firstofone%
      \let\MPName\@gobble%
      \let\MPValue\@gobble%
      \let\OPName\@gobble%
      \let\OPValue\@gobble%
      \let\OList\@empty%
      \let\OPList\@gobble%
      \let\PSet\@firstofone%
      \let\PMisc\@empty%
      \let\PBoolean\@empty%
      \let\PLength\@empty%
      \let\textOR\@empty%
      \let\emph\@firstofone%
%    \end{macrocode}
% Im optionalen Argument können weitere Angaben gemacht werden, um zum Beispiel 
% weitere lokale Redefinitionen vorzunehmen.
%    \begin{macrocode}
      #1%
%    \end{macrocode}
% Falls tatsächlich ein passendes Argument angegeben wurde, wird der Quelltext 
% des zweiten obligatorischen Argumentes ausgeführt. Es ist zu beachten, dass
% dieser \emph{expandiert} wird!
%    \begin{macrocode}
      \tud@if@strblank{#2}{%
        \def\tud@reserved{\endgroup}%
      }{%
        \protected@edef\tud@reserved{\endgroup#3}%
      }%
    \tud@reserved%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@doifPValue
% \begin{macro}{\Parameter@Expandable}
% \changes{v2.06p}{2022/10/24}{neu}^^A
% Hiermit werden die Befehle für Parameter expandierbar.
% \ToDo{von \cs{Markup@Expandable} trennen?}[v2.06]
%    \begin{macrocode}
\newcommand*\Parameter@Expandable{%
  \let\PName\@firstofone%
  \let\PValue\@firstofone%
  \let\MPName\@firstofone%
  \let\MPValue\@firstofone%
  \let\OPName\@firstofone%
  \let\OPValue\@firstofone%
  \let\OList\@empty%
  \let\OPList\@firstofone%
  \let\PSet\@gobble%
  \let\PMisc\@empty%
  \let\PBoolean\@empty%
  \let\PLength\@empty%
  \let\textOR\@empty%
}
%    \end{macrocode}
% \end{macro}^^A \Parameter@Expandable
% \ToDo{
%   Verwendung der Befehle überprüfen, evtl. umbennenen. Wozu \cs{PSet}?
%   Evtl. sollte \cs{PValue} innerhalb von \cs{PName} lokal geändert werden?
%   Was passiert, wenn auch \cs{PName} von \cs{tud@doifPValue} akzeptiert?
%   Zeile 542--546 in tudscr-hints, 294 in tudscr-packages
% }[v2.07]
% \ToDo{\cs{PSet} notwendig oder reicht überall \cs{PName}?}[v2.07]
% \ToDo{%
%   bei der Deklaration evtl. ein Hilfsmakro erstellen und den
%   Default-Eintrag hinterlegen, um ggf. darauf zu prüfen%
% }[v2.??]%
% \ToDo{neues Makro \cs{PSetLength} mit \cs{PName}\marg{Längenwert}}[v2.??]
% \begin{macro}{\PName}
% \begin{macro}{\PValue}
% \begin{macro}{\MPName}
% \begin{macro}{\MPValue}
% \begin{macro}{\OPName}
% \begin{macro}{\OPValue}
% \begin{macro}{\OList}
% \begin{macro}{\OPList}
% \begin{macro}{\PSet}
% \begin{macro}{\PMisc}
% \begin{macro}{\PBoolean}
% \begin{macro}{\PLength}
% Diese Befehle dienen zum Auszeichnen von obligatorischen und optionalen 
% Parametern und Befehlen oder bestimmten Wertzuweisungen.
%    \begin{macrocode}
\newrobustcmd*\PName[1]{\mbox{\texttt{\textsl{<#1>}}}}
\newrobustcmd*\PValue[1]{\mbox{\texttt{#1}}}
\newrobustcmd*\MPName[1]{%
  \mbox{\texttt{\textbraceleft}\PName{#1}\texttt{\textbraceright}}%
}
\newrobustcmd*\MPValue[1]{\mbox{\texttt{\textbraceleft#1\textbraceright}}}
\newrobustcmd*\OPName[1]{\mbox{\texttt{[}\PName{#1}\texttt{]}}}
\newrobustcmd*\OPValue[1]{\mbox{\texttt{[{#1}]}}}
\newrobustcmd*\OList{\mbox{\texttt{[}\PName{Parameterliste}\texttt{]}}}
\newrobustcmd*\OPList[1]{%
  \mbox{\texttt{[}\PName{#1}\textOR\PName{Parameterliste}\texttt{]}}%
}
\newrobustcmd*\PSet[1]{\PName{#1}}
\newrobustcmd*\PMisc{\PSet{Einstellung}}
\newrobustcmd*\PBoolean{\PSet{Ein-Aus-Wert}}
\newrobustcmd*\PLength{\PSet{L\"angenwert}}
%    \end{macrocode}
% \end{macro}^^A \PLength
% \end{macro}^^A \PBoolean
% \end{macro}^^A \PMisc
% \end{macro}^^A \PSet
% \end{macro}^^A \OPList
% \end{macro}^^A \OList
% \end{macro}^^A \OPValue
% \end{macro}^^A \OPName
% \end{macro}^^A \MPValue
% \end{macro}^^A \MPName
% \end{macro}^^A \PValue
% \end{macro}^^A \PName
% \begin{macro}{\textOR}
%    \begin{macrocode}
\newrobustcmd*\textOR{\PValue{\,\textbardbl\,}}
%    \end{macrocode}
% \end{macro}^^A \textOR
%
% \subsubsection{Markup von Klassen, Paketen, Optionen und weiteren Elementen}
%
% \changes{v2.05}{2015/11/02}{Entitätsbefehle komplett überarbeitet}^^A
%
% Im Folgenden werden allerhand Befehle mit Hilfe des Paketes \pkg{xparse} 
% definiert, um bestimmte Begriffe, Klassen, Pakete, Optionen, Umgebungen, 
% Befehle, Parameter, Bezeichner, Längen, Schriftelemente und Farben speziell
% auszuzeichnen. Diese Befehle lauten für Klasse und Paket aus Gründen der
% Konsistenz zwar gleich, unterschieden sich jedoch ein klein wenig in der
% Implementierung.
%
% Die Sternversion all dieser Befehlen tragen nichts in den Index ein. Für 
% (fast) alle der folgenden Befehle gilt, dass diese mit zwei optionalen
% Argumenten am Ende genutzt werden können. Sollte ein Label existieren, wird 
% automatisch ein Hyperlink erzeugt, welcher mit der optionalen Angabe von
% |'|\meta{Referenzvariante}|'| um einen textuellen Querverweis ergänzt werden
% kann. Mit \verb+|+\meta{Indexmarkup}\verb+|+ kann die Erscheinung im Index
% angepasst werden. Bei einigen Befehlen kann zusätzlich zuvor im Markup mit
% dem optionalen Argument \parg{Entität} die Zuweisung auf ein bestimmtes
% Paket oder eine Klasse aus dem \TUDScript-Bundle erfolgen.
%
% Die eigentliche Behandlung erfolgt mit dem Befehl \cs{Process@Markup}, 
% welcher die tatsächliche Auszeichnung im Fließtext bzw. als Deklaration 
% übernimmt. Das Auszeichnungsformat wird dafür zuvor mit \cs{Markup@SetFormat}
% festgelegt. Ein Eintrag in den Index wird mit \cs{Process@Index} realisiert.
% Für die Änderungsliste wird der Befehl \cs{Process@ChangedAt} genutzt, um die 
% entsprechende Formatierung zu gewährleisten, wobei dies nur für die Klasse
% \cls{tudscrmanual} und nicht für das Paket \pkg{tudscrmanual} gilt.
%
% Für Labels, Index- und Änderungs- sowie PDF-Outline-Einträge etc. müssen die
% nachfolgend definierten Entitätsbefehle durch eine expandierbare Version
% ersetzt werden, welche hier mit \cs{NewExpandableDocumentCommand} ebenfalls 
% definiert werden.
%
% \begin{macro}{\if@tud@index}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\if@tud@changelog}
% \changes{v2.07}{2019/11/12}{neu}^^A
% Der Schalter \cs{if@tud@index} wird zwei unterschiedliche Aufgaben verwendet. 
% Zum einen wird er bei der Ausgabe von Verzeichnissen auf \val{true} gesetzt,
% um das Setzen von Indexeinträgen durch Markup-Befehle in den Verzeichnissen
% selbst zu unterbinden. Weiterhin verhindert der aktivierte Schalter bei der
% Ausführung von \cs{Process@Markup} das Erstellen von erweiterten 
% Querverweisen sowie das Setzen von CTAN-Links bei Paketen (\cs{Package}), was 
% weder in Verzeichnissen noch im Index oder der Änderungsliste erwünscht ist,
% weshalb sowohl von \cs{PrintIndex} als auch \cs{PrintChangelog} ebenfalls
% \cs{@tud@indextrue} gesetzt wird.
%    \begin{macrocode}
\tud@newif\if@tud@index
\addtoeachtocfile{\protect\@tud@indextrue}
%<class>\tud@newif\if@tud@changelog
%    \end{macrocode}
% \end{macro}^^A \if@tud@changelog
% \end{macro}^^A \if@tud@index
% \begin{macro}{\Markup@SetFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@CheckFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@ClearFormat}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@Format}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@Suffix}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{Markup@SetFormat} setzt das gewünschte Format für die jeweilge
% Ausgabe. Dieses wird im ersten Argument angegeben. Das ordinäre optionale 
% Argument kann genutzt werden, wenn bei der Deklaration noch eine genauere 
% Beschreibung oder Spezifizierung erscheinen soll, beispielsweise etwas wie
% \enquote{Umgebung} oder \enquote{Parameter}. Mit dem optionalen Argument in 
% runden Klammern wird es möglich, die Definition von \cs{Markup@Declare}, die 
% ohne eine Angabe der von \cs{Markup@@Declare} entspricht, zu ändern. Dies
% wird insbesondere von \cs{Environment} genutzt, um bei der Deklaration eine
% Tabelle zu erzeugen.
%    \begin{macrocode}
\newcommand*\Markup@Format{}
\undef\Markup@Format
\newcommand*\Markup@Suffix{}
\NewDocumentCommand\Markup@SetFormat{o m o d()}{%
  \def\Markup@Format##1{\begingroup#2{\IfValueT{#1}{#1}##1}\endgroup}%
  \IfValueT{#3}{\def\Markup@Suffix{\suffix{#3}}}%
%<*class>
  \IfValueT{#4}{\renewcommand*\Markup@Declare[1]{#4\Markup@Suffix}}%
%</class>
}
%    \end{macrocode}
% Nach der formatierten Ausgabe wird \cs{Markup@ClearFormat} aufgerufen, um die 
% aktuell definierte Formatierung zurückzusetzen und bei einem neuen Aufruf 
% einer der Entitätsbefehle mit \cs{Markup@CheckFormat} auf die Verwendung von 
% \cs{Markup@SetFormat} prüfen zu können.
%    \begin{macrocode}
\newcommand*\Markup@ClearFormat{%
  \undef\Markup@Format%
  \let\Markup@Declare\Markup@@Declare%
  \let\Markup@Suffix\relax%
}
\Markup@ClearFormat
\newcommand*\Markup@CheckFormat{%
  \ifundef\Markup@Format{%
%<*class>
    \ClassError{tudscrmanual}%
%</class>
%<*package>
    \PackageError{tudscrmanual}%
%</package>
      {\string\Markup@SetFormat\space unused}%
      {It seems you have forgotten to use \string\Markup@SetFormat.}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Suffix
% \end{macro}^^A \Markup@Format
% \end{macro}^^A \Markup@ClearFormat
% \end{macro}^^A \Markup@SetFormat
% \end{macro}^^A \Markup@CheckFormat
% \begin{macro}{\suffix}
% \changes{v2.05}{2015/10/27}{neu}^^A
% Für alle möglichen, zusätzlichen Informationen bei Deklarationen, im Index 
% oder der normalen in Ausgabe im Fließtext wird eine etwas kleinere Schrift 
% verwendet.
%    \begin{macrocode}
\newrobustcmd*\suffix[1]{\begingroup~\scriptsize(#1)\endgroup}
%    \end{macrocode}
% \end{macro}^^A \suffix
% \begin{macro}{\AP@MarkupAppend}
% \changes{v2.06p}{2022/10/24}{neu}^^A
%    \begin{macrocode}
\newcommand*\AP@MarkupAppend[1]{%
  \begingroup
    \protected@edef\ProcessedArgument{#1}%
    \@expandtwoargs\in@{|}{\expandonce\ProcessedArgument}%
    \in@{|}{#1}%
    \ifin@
      \def\tud@res@d##1|##2\@nil{%
        \def\tud@res@a{##1}%
        \def\tud@res@b{##2}%
        \trim@spaces@in\tud@res@a%
        \trim@spaces@in\tud@res@b%
        \edef\ProcessedArgument{{\expandonce\tud@res@a}[\expandonce\tud@res@b]}%
      }%
      \expandafter\tud@res@d\ProcessedArgument\@nil%
    \else
      \trim@spaces@in\ProcessedArgument%
      \edef\ProcessedArgument{{\expandonce\ProcessedArgument}}%
    \fi
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@MarkupAppend
% \begin{macro}{\AP@MarkupKeyVal}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Für Optionen und Parameter können spezielle Werte einfach im Hauptargument 
% durch |/| sowie |=| getrennt angegeben werden. Um diese auszuwerten, wird 
% \cs{AP@MarkupKeyVal} definiert und als Argumentprozessor verwendet. Die 
% abgespaltenen Teile werden optional via \cs{ProcessedArgument} in der Form 
% \marg{Makro/Schlüssel}|/|\meta{Parameter}|/=|\meta{Wert}|=| zurückgegeben und 
% müssen durch das verarbeitende Makro entsprechend behandelt werden.
%    \begin{macrocode}
\newcommand*\AP@MarkupKeyVal[1]{%
  \begingroup
    \AP@MarkupAppend{#1}%
    \def\tud@res@a##1##2\@nil{%
      \AP@@MarkupKeyVal{##1}%
      \edef\ProcessedArgument{\expandonce\ProcessedArgument\unexpanded{##2}}%
    }%
    \expandafter\tud@res@a\ProcessedArgument\@nil%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def\ProcessedArgument}{\expandonce\ProcessedArgument}%
    }%
  \tud@res@a%
}
\newcommand*\AP@@MarkupKeyVal[1]{%
  \begingroup
    \in@{=}{#1}%
    \ifin@
      \in@{/}{#1}%
      \ifin@
        \def\tud@res@a##1/##2=##3\@nil{\toks@{{##1}/##2/=##3=}}%
      \else
        \def\tud@res@a##1=##2\@nil{\toks@{{##1}=##2=}}%
      \fi
    \else
      \in@{/}{#1}%
      \ifin@
        \def\tud@res@a##1/##2\@nil{\toks@{{##1}/##2/}}%
      \else
        \def\tud@res@a##1\@nil{\toks@{{##1}}}%
      \fi
    \fi
    \tud@res@a#1\@nil%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def\ProcessedArgument}{\the\toks@}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@MarkupKeyVal
% \begin{macro}{\AP@Underscore}
% \changes{v2.06p}{2022/10/26}{neu}^^A
% Mit diesem Argumentprozessor werden Unterstriche in Datei- und Pfadangaben 
% unschädlich gemacht.
%    \begin{macrocode}
\newcommand*\AP@Underscore[1]{%
  \begingroup%
    \def\tud@res@a{#1}%
    \tud@replace@in\tud@res@a{_}{\_}%
    \edef\tud@res@a{%
      \endgroup%
      \def\noexpand\ProcessedArgument{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \AP@Underscore
% \begin{macro}{\Markup@Expandable}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dieses Makro definiert alle Entitätsbefehle in der Form um, dass diese nur 
% noch das eigentliche Hauptargument unformatiert durchreichen. Dies wird für 
% die Erstellung von Label und Indexeinträgen benötigt. Die Sternversion führt 
% dies auch noch für die Auszeichnung von Parametern etc. durch.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Expandable{s}{%
  \let\Distribution\@Distribution%
  \let\Distro\@Distro%
  \let\Format\@Format%
  \let\Bundle\@Bundle%
  \let\Class\@Class%
  \let\Package\@Package%
  \let\Option\@Option%
  \let\Environment\@Environment%
  \let\Macro\@Macro%
  \let\Length\@Length%
  \let\Counter\@Counter%
  \let\Term\@Term%
  \let\PageStyle\@PageStyle%
  \let\Font\@Font%
  \let\Color\@Color%
  \let\Application\@Application%
  \let\Tutorial\@Tutorial%
  \let\File\@File%
%    \end{macrocode}
% \ToDo{entkoppeln?}[v2.06]
%    \begin{macrocode}
  \IfBooleanF{#1}{%
    \Parameter@Expandable%
    \Misc@Expandable%
  }%
}
%    \end{macrocode}
% Mit dem zuvor definierten Makro \cs{Markup@Expandable} wird gleich dafür 
% Sorge getragen, dass die Auszeichnungsbefehle für PDF-Outline-Einträge 
% korrekt funktionieren.
%    \begin{macrocode}
\AfterPackage*{hyperref}{%
  \expandafter\pdfstringdefDisableCommands\expandafter{\Markup@Expandable}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Expandable
% \begin{macro}{\Misc@Expandable}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Allerlei Makros, die für das Erstellen von Labeln oder Indexeinträgen bei der 
% Expansion eine passende Definition benötigen.
%    \begin{macrocode}
\newcommand*\Misc@Expandable{%
  \let\Lettering\@firstofone%
  \let\emph\@firstofone%
  \let\texttt\@firstofone%
  \def\dots{...}%
  \def\_{_}%
  \protected\def~{~}%
}
%    \end{macrocode}
% \end{macro}^^A \Misc@Expandable
%
% \begin{macro}{\Distribution}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Distribution}
% Die Auszeichnung und der Indexeintrag einer \Lettering{LaTeX}-Distribution.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Distribution{s d|| d'' d() m}{#5}
\NewDocumentCommand\Distribution{s d|| d'' d() m}{%
  \Markup@SetFormat{\sbnfont}%
  \Process@Markup{\Distribution{#5}}(#4)'#3'|#2|%
  \Process@Index{#1}[main]{\Distribution{#5}}[Distribution](#4)|#2|%
}
%    \end{macrocode}
% \end{macro}^^A \@Distribution
% \end{macro}^^A \Distribution
% \begin{macro}{\Distro}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\@Distro}
% \begin{macro}{\Distro@IndexEntry}
% \begin{macro}{\Distro@@IndexEntry}
% Die Befehle zur Beschreibung einer allgemeinen \Lettering{LaTeX}-Distribution.
%    \begin{macrocode}
\NewDocumentCommand\Distro{s d||}{%
  \Lettering{LaTeX}\mbox{-}Distribution%
  \IfBooleanF{#1}{\Distro@IndexEntry{#2}}%
  \xspace%
}
\newcommand*\@Distro{LaTeX-Distribution}
\newcommand*\Distro@@IndexEntry{}
\edef\Distro@@IndexEntry{\@Distro\detokenize{@}{\Distro}}
\NewDocumentCommand\Distro@IndexEntry{o m}{%
  \if@tud@index\else
    \begingroup
      \IfValueTF{#2}{\edef\tud@res@a{|#2}}{\let\tud@res@a\@empty}%
      \expandafter\index\expandafter{\Distro@@IndexEntry\tud@res@a}%
      \IfValueT{#1}{%
        \expandafter\index\expandafter{\Distro@@IndexEntry!#1\tud@res@a}%
      }%
    \endgroup
  \fi
}
%    \end{macrocode}
% \end{macro}^^A \Distro@@IndexEntry
% \end{macro}^^A \Distro@IndexEntry
% \end{macro}^^A \@Distro
% \end{macro}^^A \Distro
% \begin{macro}{\MiKTeX}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\TeXLive}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\MacTeX}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\Distro@Wrapper}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Für die gebräuchlisten Distributionen werden spezifische Befehle definiert. 
% Diese erzeugen zusätzlich einen Untereintrag im Index.
%    \begin{macrocode}
\NewDocumentCommand\Distro@Wrapper{m m r|| r'' m}{%
  \begingroup
    \tud@toks@{\Distribution*'#4'}%
    \edef\tud@res@a{{#5\IfBooleanT{#2}{~Portable}}}%
    \addto@hook@expandafter\tud@toks@{\tud@res@a}%
    \edef\tud@res@b{\if@tud@index\BooleanTrue\else#1\fi}%
    \expandafter\IfBooleanF\expandafter{\tud@res@b}{%
      \preto\tud@res@a{\Distribution}%
      \Markup@Inner@Get\tud@res@a{\tud@res@a}%
      \Markup@Replace\tud@res@a[Distribution]{\tud@res@a}%
      \expandafter\tud@idx@get\tud@res@a%
      \edef\tud@res@b{\tud@idx@key\detokenize{@}\tud@idx@fmt}%
      \edef\tud@res@a{\Distro@IndexEntry[\tud@res@b]{#3}}%
%<*class>
      \tud@replace@@in\tud@res@b{~Portable}{}%
      \eappto\tud@res@a{\SeeEntry*{\tud@res@b}{\Distro}}%
%</class>
      \addto@hook@expandafter\tud@toks@{\tud@res@a}%
    }%
    \edef\tud@res@a{%
      \endgroup
      \the\tud@toks@%
    }%
  \tud@res@a\xspace%
}
\NewDocumentCommand\MiKTeX{s t+ d|| d''}{%
  \Distro@Wrapper{#1}{#2}|#3|'#4'{\Lettering{MiKTeX}}%
}
\NewDocumentCommand\TeXLive{s t+ d|| d''}{%
  \Distro@Wrapper{#1}{#2}|#3|'#4'{\Lettering{TeX~Live}}%
}
\NewDocumentCommand\MacTeX{s t+ d|| d''}{%
  \Distro@Wrapper{#1}{#2}|#3|'#4'{\Lettering{MacTeX}}%
}
%    \end{macrocode}
% \end{macro}^^A\Distro@Wrapper
% \end{macro}^^A \MacTeX
% \end{macro}^^A \TeXLive
% \end{macro}^^A \MiKTeX
% \begin{macro}{\Format}
% \changes{v2.05}{2015/11/04}{neu}^^A
% \begin{macro}{\@Format}
% \changes{v2.05}{2015/11/04}{neu}^^A
% Die Auszeichnung und der Indexeintrag für ein bestimmtes Textsatzsystem.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Format{s d|| d'' d() m}{#5}
\NewDocumentCommand\Format{s d|| d'' d() m}{%
  \Markup@SetFormat{\sbnfont}%
  \Process@Markup{\Format{\Lettering{#5}}}(#4)'#3'|#2|%
  \Process@Index{#1}[main]{\Format{#5}}[Textsatzsystem](#4)|#2|%
}
%    \end{macrocode}
% \end{macro}^^A \@Format
% \end{macro}^^A \Format
% \begin{macro}{\Bundle}
% \begin{macro}{\@Bundle}
% Die Auszeichnung und der Indexeintrag eines Bundles. Das optionale Argument 
% zwischen Apostrophen kann für die Formatierung eines Querverweises im Text
% genutzt werden, das optionale Argument zwischen senkrechten Strichen dient
% der Formatierung des Indexeintrages.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Bundle{s d|| d'' d() m}{#5}
\NewDocumentCommand\Bundle{s d|| d'' d() m}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Bundle{#5}}[Bundle]%
  \else%
%</class>
    \Markup@SetFormat{\sbnfont}%
    \Process@Markup{\Bundle{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[files]{\Bundle{#5}}[Bundle](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Bundle
% \end{macro}^^A \Bundle
% \begin{macro}{\Class}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Class}
% Die Auszeichnung und der Indexeintrag einer Klasse. Das optionale Argument 
% zwischen Apostrophen kann für die Formatierung eines Querverweises im Text
% genutzt werden, das optionale Argument zwischen senkrechten Strichen dient
% der Formatierung des Indexeintrages.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Class{s d|| d'' d() m}{#5}
\NewDocumentCommand\Class{s d|| d'' d() m}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Class{#5}}[Klasse]%
  \else%
%</class>
    \Markup@SetFormat{\sbnfont}%
    \Process@Markup{\Class{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[files]{\Class{#5}}[Klasse](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Class
% \end{macro}^^A \Class
% \begin{macro}{\Package}
% \changes{v2.02}{2014/07/10}{Ausgabe für Änderungsliste hinzugefügt}^^A
% \begin{macro}{\@Package}
% Für die Auszeichnungen von Paketen gelten vorherigen Aussagen äquivalent. 
% Für Pakete wird ergänzend ein Hyperlink auf CTAN erzeugt, wenn für dieses 
% kein Label im Dokument besteht. Genaueres ist der Beschreibung und Definition 
% von \cs{Process@Markup} zu entnehmen. Das optionale Argument in einfachen
% Guillemets dient zum Anpassen des CTAN-Links, welcher normalerweise aus
% obligatorischen Argument generiert wird.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Package{s d|| d'' d() m}{#5}
\NewDocumentCommand\Package{s d|| d'' d() m !d<>}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Package{#5}}[Paket]%
  \else%
%</class>
    \Markup@SetFormat{\sbnfont}%
    \IfValueTF{#6}{%
      \Process@Markup{\Package{#5}}(#4)<#6>'#3'|#2|%
    }{%
      \Process@Markup{\Package{#5}}(#4)<#5>'#3'|#2|%
    }%
    \Process@Index{#1}[files]{\Package{#5}}[Paket](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Package
% \end{macro}^^A \Package
% \begin{macro}{\Option}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\Option@Value}
% \changes{v2.05}{2015/11/02}{neu}^^A
% \begin{macro}{\@Option}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Im Gegensatz zu den vorherigen Befehlen, kann im Hauptargument ein spezieller 
% Wert für eine Option optional durch ein |=| getrennt angegeben werden. Durch
% den Argumentprozessor \cs{AP@MarkupKeyVal} wird dieses vom eigentlichen
% Schlüssel getrennt. Dabei wird der gegebene Schlüssel immer in der Form
% \marg{Schlüssel} ausgegeben. Sollte ein optionaler Wert gegeben worden sein, 
% wird dieser in der Form |=|\meta{Wert}|=| einfach angehängt und als optionales
% Argument von \cs{Option@Value} weiter verarbeitet. Mit dem optionalen Argument
% in runden Klammern kann ggf. auf eine Option aus einem \TUDScript-Paket
% verwiesen werden.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Option{s d|| d'' d() m}{#5}
\NewDocumentCommand\Option{s d|| d'' d() >{\AP@MarkupKeyVal}m}{%
  \Option@Value{#1}|#2|'#3'(#4)#5%
}
%    \end{macrocode}
% Für die interne Verwendung kann das optionale Argument für den Wert auch 
% direkt mit |=|\meta{Wert}|=| angehangen werden. Um die gleichzeitige 
% Verwendung beider Varianten zu unterdrücken, wird in diesem Fall ein Fehler 
% erzeugt.
% \ToDo{
%   Eigentlich sollte der Wert hier formatiert werden. Wünschenswert wäre die 
%   Angabe von \val{Option=Wert} und \val{Option=<Spezialwert>}, damit das 
%   Gezerre mit der Spezialbehandlung von \cs{PMisc} etc. wegfallen könnte,
%   siehe \cs{tud@declare@start}
% }[v2.??]
%    \begin{macrocode}
\NewDocumentCommand\Option@Value{m r|| r'' r() m d== d[]}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Option{#5}}=#6=[Option](#4)%
  \else%
%</class>
    \Markup@SetFormat{\ttfamily}%
    \Process@Markup{\Option{#5}}=#6=[{#7}](#4)'#3'|#2|%
    \Process@Index{#1}[options]{\Option{#5}}=#6=(#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Option
% \end{macro}^^A \Option@Value
% \end{macro}^^A \Option
% \begin{macro}{\Environment}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Environment}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Bei diesem Makro dient das optionale Argument für die Ausgabe der möglichen 
% Umgebungsargumente bzw. -parameter \emph{bei der Deklaration}. 
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Environment{s d|| d'' d() m}{#5}
\NewDocumentCommand\Environment{s d|| d'' d() >{\AP@MarkupKeyVal}m}{%
  \Environment@Value{#1}|#2|'#3'(#4)#5%
}
\NewDocumentCommand\Environment@Value{m r|| r'' r() m d// d== d[]}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Environment{#5}}/#6/=#7=[Umgebung](#4)%
  \else%
%</class>
%    \end{macrocode}
% Außerdem wird für den Fall, dass der \cs{Environment}-Befehl innerhalb der
% Umgebung \env{Declaration} verwendet wird, eine spezielle Ausgabe erzeugt. 
% Nur hier kommt das optionale Argument von \cs{Markup@SetFormat} nach dem
% Hauptargument zum Tragen. Die resultierende Ausgabe hat die Gesatlt:
%
% \begin{tabular}{l}
%   \cs{begin}\marg{Umgebung}\tabularnewline
%   \dots\tabularnewline
%   \cs{end}\marg{Umgebung}\tabularnewline
% \end{tabular}
%    \begin{macrocode}
    \IfValueTF{#6}{%
      \Markup@SetFormat{\ttfamily}[Parameter]%
    }{%
      \Markup@SetFormat{\ttfamily}(%
        \ttfamily\bsc{}begin\textbraceleft#5\textbraceright\IfValueT{#8}{#8}%
        \tabularnewline\ttfamily\dots%
        \tabularnewline\ttfamily\bsc{}end\textbraceleft#5\textbraceright%
      )%
    }%
    \Process@Markup{\Environment{#5}}/#6/=#7=[{#8}](#4)'#3'|#2|%
    \Process@Index{#1}[macros]{\Environment{#5}}/#6/=#7=[Umgebung](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Environment
% \end{macro}^^A \Environment
% \begin{macro}{\Macro}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Macro}
% \changes{v2.02}{2014/11/02}{neu}^^A
% Die Auszeichnung und der Indexeintrag eines Befehls. Das ordinäre optionale 
% Argument ist für das Anhängen von Parametern o.\,ä. nach dem eigentlichen 
% Makro zu verwenden. Das optionale Argument in runden Klammern dient dem
% Hyperlink zu einem Befehl aus einem anderen Paket oder einer anderen Klasse
% aus dem \TUDScript-Bundle.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Macro{s d|| d'' d() m}{#5}
\NewDocumentCommand\Macro{s d|| d'' d() >{\AP@MarkupKeyVal}m}{%
  \Macro@Value{#1}|#2|'#3'(#4)#5%
}
\NewDocumentCommand\Macro@Value{m r|| r'' r() m d// d== d[]}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Macro{#5}}/#6/=#7=[Befehl](#4)%
  \else%
%</class>
    \IfValueTF{#6}{%
      \Markup@SetFormat{\ttfamily}[Parameter]%
    }{%
      \Markup@SetFormat[\bsc]{\ttfamily}%
    }%
    \Process@Markup{\Macro{#5}}/#6/=#7=[{#8}](#4)'#3'|#2|%
    \Process@Index{#1}[macros]{\Macro{#5}}/#6/=#7=(#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Macro
% \end{macro}^^A \Macro
% \begin{macro}{\Length}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Length}
% Die Auszeichnung und der Indexeintrag einer \Lettering{LaTeX}-Länge.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Length{s d|| d'' d() m}{#5}
\NewDocumentCommand\Length{s d|| d'' d() m}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Length{#5}}[L\"ange](#4)%
  \else%
%</class>
    \Markup@SetFormat[\bsc]{\ttfamily}[L\"ange]%
    \Process@Markup{\Length{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[misc]{\Length{#5}}[L\"ange](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Length
% \end{macro}^^A \Length
% \begin{macro}{\Counter}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Counter}
% Die Auszeichnung und der Indexeintrag einer \Lettering{LaTeX}-Zählers.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Counter{s d|| d'' d() m}{#5}
\NewDocumentCommand\Counter{s d|| d'' d() m}{%
%<*class>
  \if@tud@changedat%
    \Process@ChangedAt{\Counter{#5}}[Z\"ahler](#4)%
  \else%
%</class>
    \Markup@SetFormat{\ttfamily}[Z\"ahler]%
    \Process@Markup{\Counter{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[misc]{\Counter{#5}}[Z\"ahler](#4)|#2|%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \@Counter
% \end{macro}^^A \Counter
% \begin{macro}{\Term}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Term}
% Die Auszeichnung und der Indexeintrag eines sprachabhängigen Bezeichners.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Term{s d|| d'' d() m}{#5}
\NewDocumentCommand\Term{s d|| d'' d() m}{%
  \if@tud@changedat%
    \Process@ChangedAt{\Term{#5}}[Bezeichner](#4)%
  \else%
    \Markup@SetFormat[\bsc]{\ttfamily}[Bezeichner]%
    \Process@Markup{\Term{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[terms]{\Term{#5}}(#4)|#2|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Term
% \end{macro}^^A \Term
% \begin{macro}{\PageStyle}
% \changes{v2.02}{2014/07/25}{neu}^^A
% \begin{macro}{\@PageStyle}
% Die Auszeichnung und der Indexeintrag eines Seitenstils.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@PageStyle{s d|| d'' d() m}{#5}
\NewDocumentCommand\PageStyle{s d|| d'' d() m}{%
  \if@tud@changedat%
    \Process@ChangedAt{\PageStyle{#5}}[Seitenstil](#4)%
  \else%
    \Markup@SetFormat{\ttfamily}[Seitenstil]%
    \Process@Markup{\PageStyle{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[elements]{\PageStyle{#5}}[Seitenstil](#4)|#2|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@PageStyle
% \end{macro}^^A \PageStyle
% \begin{macro}{\Font}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Font}
% Die Auszeichnung und der Indexeintrag eines Schriftelementes.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Font{s d|| d'' d() m}{#5}
\NewDocumentCommand\Font{s d|| d'' d() m}{%
  \if@tud@changedat%
    \Process@ChangedAt{\Font{#5}}[Schriftelement](#4)%
  \else%
    \Markup@SetFormat{\ttfamily}[Schriftelement]%
    \Process@Markup{\Font{#5}}(#4)'#3'|#2|%
    \Process@Index{#1}[elements]{\Font{#5}}[Schriftelement](#4)|#2|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Font
% \end{macro}^^A \Font
% \begin{macro}{\Color}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Color}
% Die Auszeichnung und der Indexeintrag einer Farbe des \CDs. Das optionale 
% Argument kann sowohl bei der Deklaration als auch im Fließtext für das 
% Anhängen eines Suffix verwendet werden. Alle mit \cs{Color} ausgezeichneten 
% Farben referenzieren standardmäßig auf das Paket \pkg{tudscrcolor}.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Color{s d|| d'' d() m}{#5}
\NewDocumentCommand\Color{%
    s d|| d'' D(){\Package{tudscrcolor}} >{\AP@MarkupAppend}m%
}{%
  \Color@Value{#1}|#2|'#3'(#4)#5%
}
\NewDocumentCommand\Color@Value{m r|| r'' r() m d[]}{%
  \if@tud@changedat%
    \Process@ChangedAt{\Color{#5}}[Farbe](#4)%
  \else%
    \Markup@SetFormat{\ttfamily}[Farbe](%
      \begingroup\ttfamily{#5\IfValueT{#6}{~(#6)}}\endgroup%
    )%
    \Process@Markup{\Color{#5}}[{#6}](#4)'#3'|#2|%
    \Process@Index{#1}[elements]{\Color{#5}}[Farbe](#4)|#2|%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \@Color
% \end{macro}^^A \Color
% \begin{macro}{\Application}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@Application}
% Die Auszeichnung und der Indexeintrag einer Anwendungssoftware.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Application{s d|| d'' d() m}{#5}
\NewDocumentCommand\Application{s d|| d'' d() m !d<>}{%
  \Markup@SetFormat{\sbifont}%
  \Process@Markup{\Application{#5}}(#4)<#6>'#3'|#2|%
  \Process@Index{#1}[main]{\Application{#5}}[Anwendungssoftware](#4)|#2|%
}
%    \end{macrocode}
% \end{macro}^^A \@Application
% \end{macro}^^A \Application
% \begin{macro}{\Tutorial}
% \begin{macro}{\@Tutorial}
% Die Auszeichnung und der Indexeintrag eines Tutorials.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@Tutorial{s d|| d'' d() m}{#5}
\NewDocumentCommand\Tutorial{s d|| d'' d() >{\AP@Underscore}m}{%
  \Markup@SetFormat{\sbnfont}%
  \Process@Markup{\Tutorial{#5}}(#4)'#3'|#2|%
  \Process@Index{#1}[files]{\Tutorial{#5}}[Tutorial](#4)|#2|%
}
%    \end{macrocode}
% \end{macro}^^A \@Tutorial
% \end{macro}^^A \Tutorial
% \begin{macro}{\File}
% \changes{v2.02}{2014/10/08}{überarbeitet}^^A
% \begin{macro}{\@File}
% Die Auszeichnung und der Indexeintrag einer Datei.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@File{s d|| d'' d() m}{#5}
\NewDocumentCommand\File{s d|| d'' d() >{\AP@Underscore}m}{%
  \Markup@SetFormat{\ttfamily}%
  \Process@Markup{\File{#5}}(#4)'#3'|#2|%
  \Process@Index{#1}[files]{\File{#5}}[Datei](#4)|#2|%
}
%    \end{macrocode}
% \end{macro}^^A \@File
% \end{macro}^^A \File
%
% \subsection{Namensraum für unterschiedliche Entitäten}
%
% Um eventuell identisch benannte Befehle und die dazu passenden Indexeinträge 
% für unterschiedliche Entitäten zu ermöglichen, wird ein Namensraum für diese 
% eingeführt.
%
% \begin{environment}{Entity}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@ety@crnt}
% \changes{v2.05}{2015/08/04}{neu}^^A
% \begin{macro}{\tud@ety@dflt}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@ety@gnrl}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Diese Makros werden für das Definieren eines Entitätelements und ggf. das 
% Prüfen des selbigen benötigt.
% \ToDo{Suffixe wie Klasse, Paket etc. lokalisieren (locale)}[v2.??]
%    \begin{macrocode}
\newcommand*\tud@ety@crnt{}
\newcommand*\tud@ety@dflt{\Bundle{tudscr}}
\newcommand*\tud@ety@gnrl{+general+}
%    \end{macrocode}
% Die Umgebung \env{Entity} kann nicht verschachtelt werden und prüft zuerst 
% dementsprechend die Verwendung. Anschließend wird lediglich das Makro 
% \cs{tud@ety@crnt} auf das übergebene Argument gesetzt, um innerhalb der 
% Umgebung erstellte Label und Indexeinträge zu beeinflussen.
%    \begin{macrocode}
\NewDocumentEnvironment{Entity}{m}{%
  \def\tud@ety@crnt{#1}%
  \ignorespaces%
}{%
  \aftergroup\ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \tud@ety@gnrl
% \end{macro}^^A \tud@ety@dflt
% \end{macro}^^A \tud@ety@crnt
% \end{environment}^^A Entity
%
% \subsection{Erstellung und Validierung von Labeln}
%
% Für Entitätsbefehle sollen korrespondierende Label generiert werden, um diese 
% einerseits zu setzen und im Fließtext automatisch auf diese zu referenzieren.
%
% \begin{macro}{\tud@lbl@get}
% \changes{v2.05}{2015/11/03}{neu}^^A
% \changes{v2.06p}{2022/11/04}{reimplementiert}^^A
% \begin{macro}{\tud@lbl@@get}
% \begin{macro}{\tud@lbl@@@get}
% \begin{macro}{\tud@lbl@tmp}
% \changes{v2.05}{2015/11/03}{neu}^^A
% Mit \cs{tud@lbl@get} wird anhand des im zweiten obligatorischen Argument 
% gegebenen Entitätsbefehls ein Label generiert.
%    \begin{macrocode}
\newcommand*\tud@lbl@tmp{}
\NewDocumentCommand\tud@lbl@get{m m}{%
  \begingroup%
    \Markup@Inner@Get\tud@res@a{#2}%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\tud@lbl@@get#1}{\expandonce\tud@res@a}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Bei \cs{tud@lbl@@get} handelt es sich quasi um die interne Variante, der im 
% zweiten obligatorischen Argument alle zur Labelgenerierung gewünschten 
% Argumente in der internen Nomenklatur übergeben werden müssen.
%    \begin{macrocode}
\NewDocumentCommand\tud@lbl@@get{m m}{%
  \begingroup%
    \tud@lbl@@@get#2%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\detokenize\expandafter{\tud@lbl@tmp}}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\tud@lbl@@@get{m d// d== o d() d<> d'' d||}{%
  \begingroup%
    \IfValueTF{#5}{\protected@edef\tud@res@a{#5}}{\let\tud@res@a\tud@ety@crnt}%
    \ifx\tud@res@a\tud@ety@gnrl\else%
      \let\tud@res@b\@empty%
      \def\tud@res@c##1##2\@nil{%
        \ifx\tud@res@b\@empty\else%
          \appto\tud@res@b{+}%
        \fi%
        \eappto\tud@res@b{\expandafter\@gobble\string##1(##2)}%
      }%
      \@for\tud@res@d:=\tud@res@a\do{%
        \trim@spaces@in\tud@res@d%
        \ifx\tud@res@d\@empty\else%
          \expandafter\tud@res@c\tud@res@d\@nil%
        \fi%
      }%
      \ifx\tud@res@b\@empty%
        \let\tud@res@a\tud@ety@gnrl
      \else%
        \let\tud@res@a\tud@res@b
      \fi%
    \fi%
    \Parameter@Expandable%
    \Misc@Expandable%
    \protected@edef\tud@res@d{#1}%
    \def\tud@res@b##1##2\@nil{%
      \edef\tud@res@b{\expandafter\@gobble\string##1}%
      \appto\tud@res@b{:##2}%
    }%
    \expandafter\tud@res@b\tud@res@d\@nil%
    \let\tud@res@c\@empty
    \tud@doifPValue{#3}{\unexpanded{\def\tud@res@c}{\trim@spaces{#3}}}%
    \protected@edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def\tud@lbl@tmp}{%
        \tud@res@a:\tud@res@b%
        \IfValueT{#2}{/#2}%
        \ifx\tud@res@c\@empty\else=\tud@res@c\fi%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@lbl@tmp
% \end{macro}^^A \tud@lbl@@@get
% \end{macro}^^A \tud@lbl@@get
% \end{macro}^^A \tud@lbl@get
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\tud@lbl@declare}
% \changes{v2.06p}{2022/11/08}{neu}^^A
% \begin{macro}{\tud@lbl@@declare}
% \changes{v2.06p}{2022/11/08}{neu}^^A
% Diese Befehle dienen zum gemeinsamen Definieren von Textankern sowie Labeln 
% für die Entitätsbefehle (\cs{tud@lbl@@get}). Die Sternversion wird von 
% \cs{entitylabel} genutzt und setzt für \opt{destlabel=true} keinen Textanker 
% sondern nur ein Label.
% \ToDo{use categories, especially \val{declaration}}[v2.06]
% \ToDo{set \cs{@currentlabelname} manually?}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\tud@lbl@declare{s m}{%
  \begingroup
    \edef\tud@res@a{%
      \endgroup
      \noexpand\tud@lbl@@declare{#1}{#2}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% Nachdem die Argumente vollständig expandiert wurden, werden Textanker und 
% Label für die Entität gesetzt. Durch \pkg{hyperref} werden einige generische 
% Textanker (\emph{target})~-- beispielsweise für Überschriften~-- gesetzt. Mit 
% der Option \opt{destlabel} werden diese mit dem nächsten gesetzten Label 
% korreliert, um diese beispielsweise über externe Links mit einer bekannten 
% und nicht der generischen Bezeichnung aufrufen zu können. Sollte der letzten 
% generischen Anker jedoch die Deklaration einer Entität folgen, ist dies nicht 
% gewünscht, weshalb \cs{\HyperDestRename} hier deaktiviert wird.
%
% Die Verwendung von \cs{detokenize} ist notwendig, damit mögliche Unterschiede 
% bei den catcodes von Labeln ignoriert und nur die Strings selbst verglichen
% werden.
%    \begin{macrocode}
\tud@auxlist@register(\detokenize\expandafter){tud@lbl@alias}
\NewDocumentCommand\tud@lbl@@declare{s m !d==}{%
  \begingroup
    \IfBooleanF{#1}{%
      \tud@hyperdef{#2}%
      \let\HyperDestRename\@gobbletwo%
    }%
    \label{#2}%
    \tud@trace@lbl@add{created}{#2}%
%    \end{macrocode}
% Nach der Definition des eigentlichen Labels werden noch mögliche Aliaslabel 
% definiert. Das aktuell erstellte Label ist definitiv kein Alias und wird 
% dementsprechend aus der Liste zu erstellender Aliaslabel entfernt. Danach 
% wird das Basislabel aus dem aktuellen in \cs{tud@res@a} extrahiert. In 
% \cs{tud@res@b} werden alle nachfolgend erstellten Aliaswerte gesichert, um 
% diese ganz zum Schluss noch zu validieren.
%    \begin{macrocode}
    \tud@auxlist@remove{tud@lbl@alias}{#2}%
    \edef\tud@res@a{#2}%
    \def\tud@res@c##1=##2\@nil{\def\tud@res@a{##1}}%
    \expandafter\tud@res@c\tud@res@a==\@nil%
    \let\tud@res@b\@empty%
%    \end{macrocode}
% Für die während der Deklaration in \cs{tud@alias@values} abgelegten Werte 
% werden Aliaslabel erzeugt.
%    \begin{macrocode}
    \ifx\tud@alias@values\@nnil\else%
      \@for\tud@res@c:=\tud@alias@values\do{%
        \trim@spaces@in\tud@res@c%
        \ifx\tud@res@c\@empty\else%
          \listeadd\tud@res@b{\tud@res@c}%
          \tudhyper@alias@values{\tud@res@a=\tud@res@c}%
        \fi%
      }%
    \fi%
%    \end{macrocode}
% Dies gilt auch für die Deklaration als boolscher Schalter.
%    \begin{macrocode}
    \IfValueT{#3}{%
      \listadd\tud@res@b{#3}%
      \ifstrequal{\PBoolean}{#3}{%
        \tudhyper@alias@values{\tud@res@a=true}%
        \tudhyper@alias@values{\tud@res@a=false}%
      }{}%
    }%
%    \end{macrocode}
% Zum Schluss wird noch geprüft, ob ein boolscher Werte auch in der gewünschten 
% Notation angegeben wurden.
%    \begin{macrocode}
    \def\tud@res@c##1{%
      \tud@if@strbool{##1}{\@tud@res@swatrue}{\@tud@res@swatrue}{\@tud@res@swafalse}%
      \if@tud@res@swa%
        \ifboolexpr{%
          (test {\ifstrequal{##1}{true}} or test {\ifstrequal{##1}{false}})%
        }{\@tud@res@swafalse}{\@tud@res@swatrue}%
        \if@tud@res@swa%
          \ClassWarning{tudscrmanual}{%
            Boolean values should only be referred with\MessageBreak%
            'true/false' but '##1' was used%
          }%
        \fi%
      \fi%
    }%
    \expandafter\forlistloop\expandafter\tud@res@c\expandafter{\tud@res@b}%
  \endgroup
}
%    \end{macrocode}
% Nicht verwirren lassen! Das Aliaslabel wird zunächst der Exportliste 
% hinzugefügt. Anschließend wird geprüft, ob es in der importierten Liste 
% enthalten ist.
%    \begin{macrocode}
\newcommand*\tudhyper@alias@values[1]{%
  \tud@auxlist@add{tud@lbl@alias}{#1}%
  \tud@auxlist@ifin{#1}{tud@lbl@alias}{%
    \Hy@raisedlink{\tud@hyperdef{#1}}\ignorespaces%
    \label{#1}%
    \tud@trace@lbl@add{created}{#1\space(alias)}%
  }{}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@lbl@@declare
% \end{macro}^^A \tud@lbl@declare
%
% \iffalse
%</class>
% \fi
%
% \begin{macro}{\tudhyperref}
% \changes{v2.02}{2014/10/27}{neu}^^A
% \begin{macro}{\tud@lbl@ref}
% \changes{v2.06p}{2022/11/08}{neu}^^A
% Hiermit wird auf die zuvor definierten Textanker der Entitäten referenziert.
%    \begin{macrocode}
%<*class>
\newrobustcmd*\tud@lbl@ref[2]{\tud@hyperref{#1}{#2}}
\NewDocumentCommand\entitylabel{o m}{\IfValueT{#1}{\label{#1}}}
%</class>
%    \end{macrocode}
% Mit \cs{tudhyperref} kann in Tutorials auf Labels im Handbuch verwiesen 
% werden. Um auf Deklarationen von Entitäten im Handbuch zu referenzieren, 
% wird intern \cs{tud@lbl@ref} genutzt.
% \ToDo{\cs{tudhyperref} umbenennen in \cs{manualref}}[v2.06]
% \ToDo{\pkg{xr-hyper} (zum prüfen der Labels) nutzen?}[v2.07]
% \ToDo{Anwenderbefehl für Dateipfad, an \cs{externaldocument} übergeben}[v2.07]
% \ToDo{\pkg{xr-hyper} zusammen mit \cs{nameref} verwenden}[v2.07]
%    \begin{macrocode}
%<*package>
\newrobustcmd*\tudhyperref[2]{\tud@lbl@ref{#1}{#2}}
\newrobustcmd*\tud@lbl@ref[2]{\hyperref{../tudscr.pdf}{}{#1}{#2}}
%</package>
%    \end{macrocode}
% \end{macro}^^A \tud@lbl@ref
% \end{macro}^^A \tudhyperref
%
% \begin{macro}{\tud@if@lbl@exists}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{tud@if@lbl@exists} wird abhängig davon, ob ein~-- möglicherweise via 
% \cs{tud@lbl@get} generiertes~-- Label definiert ist, verzweigt.
% \ToDo{für \pkg{xr-hyper} anpassen}[v2.07]
%    \begin{macrocode}
%<*class>
\newcommand*\tud@if@lbl@exists[3]{%
  \begingroup%
    \protected@edef\tud@res@a{%
      \endgroup%
      \noexpand\ifcsundef{r@#1}%
    }%
  \tud@res@a{#3}{#2}%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \tud@if@lbl@exists
%
% \subsection{Verarbeitung der Entitätsbefehle}
%
% Die Festlegung des individuellen Markups der spezifischen Entitäten erfolgt 
% bei der Definition mit \cs{Markup@SetFormat}. Bei der Verwendung der 
% Entitätsbefehle im Fließtext wird zum einen das in \cs{Markup@Format}
% individuell definierte Markup umgesetzt und zum anderen wird dabei gleich
% automatisch ein Eintrag für das Element im Index erzeugt.
%
% In der Klasse \cls{tudscrmanual} werden die Entitätsbefehle zusätzlich auch 
% als Argument der Umgebung \env{Declaration} genutzt. Für diese Verwendung
% kommt die Definition von \cs{Markup@Declare} und ggf. \cs{Markup@Suffix} zum 
% Einsatz. 
%
% \begin{macro}{\Process@Markup}
% \changes{v2.02}{2014/10/08}{Markup für Index und Fließtext getrennt}^^A
% \changes{v2.05}{2015/11/05}{Neuimplementierung}^^A
% \changes{v2.06p}{2022/11/04}{Signatur und Labelgenerierung angepasst}^^A
% \begin{macro}{\Markup@Suppress}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@@Suppress}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{Process@Markup} ist das Herzstück der Auszeichnungen aller
% Elemente. Das obligatorische Argument ist das auszuzeichnende Element selbst,
% welches im weiteren Verlauf der Abarbeitung expandiert wird. Darauf folgen 
% mehrere optionale Argumente. Mit |=|\meta{Wert}|=| kann ein Wert für einen
% Schlüssel angegeben werden. Darauf folgend kann in einem ordinären optionalen 
% Argument ein Suffix für die Fließtextausgabe angegeben werden.
%
% Mit dem optionalen Argument in runden Klammern kann eine Klasse oder ein 
% Paket aus dem \TUDScript-Bundle angegeben werden, auf welche sich das
% aktuelle auszuzeichnende Element bezieht und ggf. das Label und der
% Indexeintrag dementsprechend erzeugt werden sollen. Verwendet wird es mit: 
% |(\Class|\marg{Klasse}|)| oder |(\Package|\marg{Paket}|)| 
%
% Das optionale Argument in Guillemets wird von \cs{Package} benötigt, um ggf.
% die automatisch generierten Links auf CTAN anzupassen. Zuletzt kann mit 
% |'|\meta{Referenzvariante}|'| der automatisch erzeugte Querverweis in
% verschiedenen Varianten formatiert werden. Der vollständige Funktionsaufruf:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@Markup}\marg{Element}|=|\meta{Wert}|=|^^A
%   \oarg{Ausgabesuffix}\parg{Entität}^^A
%   |<|\meta{CTAN-Paket}|>||'|\meta{Referenzvariante}|'|^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%
% In eingen Fällen ist es beim Aufruf eines Entitätsbefehls nicht erwünscht, 
% dass dieser auch tatsächlich ausgegeben wird. Für diesen Fall wird gleich zu
% Beginn der Befehl \cs{Markup@Suppress} definiert, der dies ermöglicht.
%    \begin{macrocode}
\newcommand*\Markup@Suppress{\let\Process@Markup\Markup@@Suppress}
\NewDocumentCommand\Markup@@Suppress{m d// d== o d() d<> d'' d||}{}
%    \end{macrocode}
% Nun folgt die eigentliche Befehlsdefinition.
% \ToDo{e\val{\{\textbar\}} und \val{d<>} anstelle \val{d''}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Process@Markup{m d// d== o d() d<> d'' d||}{%
%    \end{macrocode}
% Zu Beginn wird mit dem Schalter \cs{if@tud@declare} geprüft, ob der 
% Entitätsbefehl in einer der Deklarationsumgebungen oder anderweitig genutzt 
% wird. Für den ersten Fall erfolgt die Weiterverarbeitung der Argumente mit
% \cs{Process@@MarkupDeclare}, andernfalls kommt \cs{Process@@MarkupInline} 
% zum Einsatz. Da beide Makros die gleiche Reihenfolge der Argumente verlangen,
% wird der jeweilige Befehlsaufruf über ein Token-Register realisiert, womit
% das Zusammensetzen der notwendigen Übergabewerte erleichtert wird. 
%
% Die Fallunterscheidung betrifft des Weiteren die Erzeugung des Labels. Für 
% eine Deklaration wird das mit \cs{tud@lbl@@get} aus den gegebenen Argumenten 
% erzeugte Label direkt verwendet. Ist keine Deklaration aktiv, wird nach einem 
% weniger spezifischen aber gültigen Label gesucht. Das generierte Label wird
% anschließend als erstes Argument für das weiterverabeitende Makro genutzt.
%    \begin{macrocode}
  \tud@lbl@@get\tud@lbl@tmp{{#1}/#2/=#3=(#5)}%
%<*class>
  \if@tud@declare%
    \tud@toks@{\Process@@MarkupDeclare}%
  \else%
    \tud@toks@{\Process@@MarkupInline}%
    \tud@if@lbl@exists\tud@lbl@tmp{}{%
      \tud@truncate@value\tud@lbl@tmp{\tud@lbl@tmp}%
    }%
    \tud@if@lbl@exists\tud@lbl@tmp{}{%
      \IfValueF{#5}{%
        \tud@lbl@@get\tud@lbl@tmp{{#1}/#2/=#3=(\tud@ety@dflt)}%
        \tud@if@lbl@exists\tud@lbl@tmp{}{%
          \tud@truncate@value\tud@lbl@tmp{\tud@lbl@tmp}%
          \tud@if@lbl@exists\tud@lbl@tmp{}{%
            \tud@lbl@@get\tud@lbl@tmp{{#1}/#2/(\tud@ety@gnrl)}%
          }%
        }%
      }%
    }%
  \fi%
%</class>
%<*package>
  \tud@toks@{\Process@@MarkupInline}%
%</package>
  \addto@hook@expandafter\tud@toks@{\expandafter{\tud@lbl@tmp}}%
%    \end{macrocode}
% Danach wird der Inhalt des im ersten Argument übergebenen Entitätsbefehls in 
% einer Gruppe ein temporäres Makro expandiert und als zweites Argument für die 
% Weiterverarbeitung genutzt.
%    \begin{macrocode}
  \begingroup%
    \Markup@Expandable*%
    \protected@edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand\tud@reserved{\IfValueTF{#2}{#2}{#1}}%
    }%
  \tud@reserved%
  \addto@hook@expandafter\tud@toks@{\expandafter{\tud@reserved}}%
%    \end{macrocode}
% Es folgen gegebenenfalls die optionalen Argument |=|\meta{Wert}|=| sowie
% \oarg{Ausgabesuffix}~-- falls diese angegeben wurden.
%    \begin{macrocode}
  \IfValueT{#3}{\addto@hook\tud@toks@{=#3=}}%
  \IfValueT{#4}{\addto@hook\tud@toks@{[{#4}]}}%
%    \end{macrocode}
% Erfolgt gerade eine Deklaration, wird mit dem Schalter \cs{if@openindex} 
% eigentlich unterschieden, ob ein öffnender oder ein schließender Indexeintrag
% erzeugt werden soll. Dieser wird mit \cs{Process@@Index} erstellt. Um den 
% schließenden Indexeintrag zu erzeugen, ist die Ausführung des Hauptargumentes 
% der Deklarationsumgebung am Ende dieser notwendig. Dabei soll allerdings das
% Markup nicht noch ein weiteres Mal ausgegeben werden. Deshalb wird der
% Schalter hier genutzt, um lediglich zu Beginn einer Deklaration der Entität 
% das Markup auszuführen. Dabei Angaben für eine |'|\meta{Referenzvariante}|'|
% nicht erlaubt.
%    \begin{macrocode}
%<*class>
  \if@tud@declare%
    \if@openindex%
      \IfValueT{#7}{%
        \@tud@res@swatrue
        \IfValueT{#6}{\tud@if@strequal{#7}{url}{\@tud@res@swafalse}{}}%
        \if@tud@res@swa
          \ClassWarning{tudscrmanual}{%
            It is not possible to use any cross-reference\MessageBreak%
            shorthand like '#7' within the arguments\MessageBreak%
            of the environment `Declaration'%
          }%
        \fi
      }%
%    \end{macrocode}
% Für ein eventuell notwendiges Debugging, wird \cs{Process@@MarkupDeclare} mit
% seinen Argumenten ggf. in das Log-File geschrieben.
%    \begin{macrocode}
      \tud@trace@ety@add{declared}{\the\tud@toks@}%
    \else%
      \tud@toks@{\relax}%
    \fi%
%    \end{macrocode}
% Findet der Auszeichnungsbefehl außerhalb einer Umgebung für Deklarationen
% Verwendung, werden die optionalen Argumente für einen CTAN-Link 
% |<|\meta{CTAN-Paketname}|>| sowie die Formatierung des Querverweise
% |'|\meta{Referenzvariante}|'| hinzugefügt~-- falls vorhanden. Dies geschieht
% jedoch nur, wenn das Markup nicht innerhalb eines Index erfolgt, da hier
% URL-Hyperlinks und formatierte Querverweise unerwünscht sind. Mit der Angabe
% eines leeren Argumentes |<>| wird gar kein Hyperlink erstellt.
%    \begin{macrocode}
  \else%
%</class>
    \if@tud@index\else%
      \IfValueT{#5}{\addto@hook\tud@toks@{(#5)}}%
      \IfValueT{#6}{%
        \tud@if@strblank{#6}%
          {}%
          {\addto@hook\tud@toks@{<http://www.ctan.org/pkg/#6>}}%
      }%
      \IfValueT{#7}{\addto@hook\tud@toks@{'#7'}}%
    \fi%
%<*class>
%    \end{macrocode}
% Auch hier wird ggf. ein Debug-Eintrag ins Log-File geschrieben. 
%    \begin{macrocode}
    \tud@trace@ety@add{output}{\the\tud@toks@}%
  \fi%
%    \end{macrocode}
% Ganz zum Schluss wird noch für beide Fälle geprüft, ob \parg{Entität} 
% angegeben wurde. Ist dies der Fall, wird zum einen die \meta{Entität}
% zur Überprüfung ggf. in das Log-File geschrieben, zum anderen wird geprüft, 
% ob für das \meta{Element} überhaupt ein Link definiert wurde, der verwendet
% werden soll. Ist dies nicht der Fall, wird eine Warnung ausgegeben. Dies ist 
% möglich, da durch die automatische Labelgenerierung normalerweise alle nicht 
% existierenden Labels mit \meta{Entitätpräfix} auf \cs{tud@ety@dflt} verweisen
% müssten. Für die wenigen Fälle, in denen gezielt auf einen Querverweis 
% verzichtet werden soll, kann ein leeres Argument \parg{} angegeben werden.
%    \begin{macrocode}
  \if@tud@index\else%
  \fi%
%    \end{macrocode}
% Nun erfolgt mit \cs{Process@@MarkupDeclare} bzw. \cs{Process@@MarkupInline} 
% die Ausführung der eigentlichen Auszeichnung.
%    \begin{macrocode}
%</class>
  \the\tud@toks@%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@@Suppress
% \end{macro}^^A \Markup@Suppress
% \end{macro}^^A \Process@Markup
% \begin{macro}{\Process@@MarkupDeclare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{Process@@MarkupDeclare} wird die formatierte Ausgabe der Deklaration 
% realisiert. Wie diese genau gestaltet ist, wird durch \cs{tud@declare@num}
% bestimmt. Folgende Werte sind möglich:
% \ToDo{\val{-1/-2} dokumentieren}[v2.07]
% \begin{description}
%   \item[\val{0}:] Ausgabe von Markup, Erzeugen eines Labels
%   \item[\val{1}:] Ausgabe von Markup, kein Label
%   \item[\val{2}:] keine Ausgabe, aber Erzeugen eines Labels
%   \item[\val{3}:] keine Ausgabe, Erzeugen eines nach oben verschobenen Labels
% \end{description}
% Normalerweise kommt die erste Variante zum Einsatz. Die zweite Variante wird 
% genutzt, wenn mit mit der Umgebung \env{Cessation} zwar eine Ausgabe aber 
% kein Label erstellt werden soll. Dies wird verwendet, um bei der Beschreibung 
% veralteter Werte oder Parameter diese im Kontext ihrer Option oder Umgebung
% bzw. ihres Befehls anzugeben.
%
% Die dritte Version kommt bei Erklärungen mit der Umgebung \env{DeclareEntity*}
% zum Einsatz, welche im Fließtext verwendet wird und kein Markup, wohl aber
% eine Label für das beschriebene Element erzeugt werden soll. Für die vierte
% Variante, welche die Umgebung \env{DeclareEntity} betrifft, gilt dies im 
% Prinzip gleichermaßen. Allerdings wird diese Umgebung zu Beginn der 
% Deklarationen einer Entität direkt nach einer Überschrift verwendet. Hier 
% soll der erzeugte Link direkt auf der Höhe der Überschrift platziert werden.
%
% Das erste Argument enthält das zu definierende Label, gefolgt vom Element, 
% welches ausgezeichnet werden soll. Die tatsächliche Ausgabe erfolgt mit dem 
% Makro \cs{Markup@Output}. An dieses werden die beiden optionalen Argumente 
% |=|\meta{Wert}|=| und \oarg{Ausgabesuffix} direkt weitergereicht.
%
% Vor der eigentlichen Ausführung wird mit \cs{Markup@CheckFormat} geprüft, ob 
% für das auszuzeichnende Element mit \cs{Markup@SetFormat} überhaupt eine 
% Ausgabeformatierung defineirt wurde. Nach der Ausgabe wird diese Formatierung 
% mit \cs{Markup@ClearFormat} zurückgesetzt.
%    \begin{macrocode}
%<*class>
\NewDocumentCommand\Process@@MarkupDeclare{m m d== o d()}{%
  \Markup@CheckFormat%
  \ifcase\tud@declare@num\relax%
    \tud@lbl@declare{#1}%
    \Markup@Output{#2}=#3=[{#4}]%
  \or%
    \Markup@Output{#2}=#3=[{#4}]%
  \or%
    \tud@lbl@declare{#1}%
  \or%
    \tud@lbl@declare*{#1}%
  \else%
    \tud@lbl@declare{#1}%
    \Markup@Output{#2}=#3=[{#4}]%
  \fi%
  \Markup@ClearFormat%
}
%</class>
%    \end{macrocode}
% \end{macro}^^A \Process@@MarkupDeclare
% \begin{macro}{\Process@@MarkupInline}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit \cs{Process@@MarkupInline} wird die formatierte Ausgabe außerhalb der 
% Deklarationsumgebungen umgesetzt. Die ersten vier Argument entsprechen denen
% des Befehls \cs{Process@@MarkupDeclare} und werden bis auf das Label ebenso an
% \cs{Markup@Output} übergeben, nachdem mit dem Befehl \cs{Markup@CheckFormat} 
% auf eine existierende Markup-Definition geprüft wurde.
% \ToDo{
%   Hyperlinks auf erläuterte Element innerhalb der Umgenung \env{Declaration}
%   unterbinden? Könnte \cs{tud@declaration@list} genutzt werden?
% }[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\Process@@MarkupInline{m m d== o d() d<> d''}{%
  \Markup@CheckFormat%
%    \end{macrocode}
% Um die aktuelle Definition der temporären Makros nicht zu ändern, erfolgt die
% formatierte Ausgabe in einer Gruppe. Dabei wird in \cs{@tempc} die minimale 
% Variante gesichert.
%    \begin{macrocode}
  \begingroup%
    \def\@tempc{\Markup@Output{#2}=#3=[{#4}]}%
%    \end{macrocode}
% Danach wird eine Fallunterscheidung anhand des im ersten Argument übergebenen 
% Labels getroffen. Existiert dieses, soll das Element als Hyperlink ausgegeben 
% werden. Die Definition dafür wird in \cs{@tempa} gespeichert.
%    \begin{macrocode}
%<*class>
    \tud@if@lbl@exists{#1}{%
      \def\@tempa{\tud@lbl@ref{#1}{\@tempc}}%
%    \end{macrocode}
% Anschließend wird \cs{@tempb} ggf. für den erweiterten Querverweis verwendet.
% Wurde ein Format für den Querverweis gesetzt, muss dieses validiert werden. 
% Gültige Kürzel sind |'|\val{auto}|'|, |'|\val{page}|'| und |'|\val{full}|'|. 
% Damit werden die erzeugten Querverweise um den Gliederungsabschnitt, die
% Seite oder beides ergänzt. Außerdem kann mit |'|\val{none}|'| der Hyperlink 
% komplett unterbunden werden. Für den Befehl \cs{Package} kann mit zusätzlich 
% |'|\val{url}|'| noch der CTAN-Link forciert werden, auch wenn eigentlich ein
% Label für das Paket existiert.
%    \begin{macrocode}
      \let\@tempb\relax%
      \IfValueT{#7}{%
        \def\@tempb{%
          \ClassWarning{tudscrmanual}{%
            You've used the unknown cross-reference\MessageBreak%
            shorthand '#7'. Only 'auto', 'page' and 'full'\MessageBreak%
            as well as 'none' \IfValueT{#6}{or 'url' }are valid%
          }%
        }%
        \tud@if@strequal{#7}{auto}{\def\@tempb{ in \autoref{#1}}}{%
        \tud@if@strequal{#7}{ref}{\def\@tempb{ in \autoref{#1}}}{
        \tud@if@strequal{#7}{page}{\def\@tempb{ \vpageref{#1}}}{%
        \tud@if@strequal{#7}{ppage}{\def\@tempb{ \reftextfaraway{#1}}}{%
        \tud@if@strequal{#7}{full}{\def\@tempb{ in \fullref{#1}}}{%
        \tud@if@strequal{#7}{none}{\let\@tempa\@tempc\let\@tempb\relax}{}}}}}}%
        \IfValueT{#6}{%
          \tud@if@strequal{#7}{url}%
            {\def\@tempa{\href{#6}{\@tempc}}\let\@tempb\relax}%
            {}%
        }%
      }%
      \tud@trace@lbl@add{matched}{#1}%
    }{%
%</class>
%    \end{macrocode}
% Existiert kein Label, so wird einfach die minimale Markup-Variante verwendet. 
% Für Pakete wird ein CTAN-Link erzeugt.
%    \begin{macrocode}
      \let\@tempa\@tempc%
      \IfValueT{#6}{\def\@tempa{\href{#6}{\@tempc}}}%
%    \end{macrocode}
% Ein Querverweis kann logischerweise nicht erstellt werden. Wurde dennoch im 
% letzten optionalen Argument eine |'|\meta{Referenzvariante}|'| für den
% Querverweis angegeben, wird eine Warnung erzeugt.
%    \begin{macrocode}
      \let\@tempb\relax%
      \IfValueT{#7}{%
        \tud@if@strequal{#7}{none}{\let\@tempa\@tempc}{%
%<*package>
        \tud@if@strequal{#7}{manual}{\def\@tempa{\tud@lbl@ref{#1}{\@tempc}}}{%
%</package>
          \def\@tempb{%
%<*class> 
            \ClassWarning{tudscrmanual}%
%</class>
%<*package>
            \PackageWarning{tudscrmanual}%
%</package>
            {%
%<*class>
              Label #1\MessageBreak%
              is missing, no cross-reference created%
%</class>
%<*package>
              You've used the unknown cross-reference\MessageBreak%
              shorthand '#7'. Only 'none' and 'manual'\MessageBreak%
              are valid%
%</package>
            }%
          }%
%<package>        }%
        }%
      }%
%    \end{macrocode}
% Um im Zweifel nach allen fehlenden Labels im Log-File prüfen zu können, gibt 
% es den passenden Debug-Befehl.
%    \begin{macrocode}
%<*class>
      \tud@trace@lbl@add{missing}{#1}%
    }%
%</class>
%    \end{macrocode}
% Ganz zum Schluss erfolgt die Ausgabe als Hyperlink mit optional erweitertem 
% Querverweis nicht, wenn gerade eine Überschrift gesetzt wird.
%    \begin{macrocode}
    \if@tud@sec%
      \@tempc%
    \else%
      \@tempa\@tempb%
    \fi%
%    \end{macrocode}
% Zum Schluss wird die Formatierung mit \cs{Markup@ClearFormat} zurückgesetzt.
%    \begin{macrocode}
  \endgroup%
  \Markup@ClearFormat%
}
%    \end{macrocode}
% \end{macro}^^A \Process@@MarkupInline
% \begin{macro}{\Markup@Output}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@@Output}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Der Befehl \cs{Markup@Output} wird für die formatierte Markup-Ausgabe von den
% beiden Makros \cs{Process@@MarkupDeclare} sowie \cs{Process@@MarkupInline}
% aufgerufen. Das erste Argument enthält dabei das auszuzeichnende Element.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Output{m r== r[]}{%
%<*class>
  \if@tud@declare%
    \tud@toks@{\Markup@Declare}%
  \else%
%</class>
    \tud@toks@{\Markup@Inline}%
%<*class>
  \fi%
%</class>
  \def\@tempa{#1}%
%    \end{macrocode}
% Die beiden optionalen Argumente werden ggf. in der gleichen Formatierung 
% ausgegeben. 
%    \begin{macrocode}
  \IfValueT{#2}{\appto\@tempa{=#2}}%
  \IfValueT{#3}{\appto\@tempa{#3}}%
  \addto@hook@expandafter\tud@toks@{\expandafter{\@tempa}}%
  \the\tud@toks@%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@@Output
% \end{macro}^^A \Markup@Output
% \begin{macro}{\Markup@Inline}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@Declare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\Markup@@Declare}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Die Ausgabe selbst ist alles andere als spektakulär. Die zur Formatierung 
% verwendeten Makros \cs{Markup@Format} und \cs{Markup@Suffix} werden durch
% \cs{Markup@SetFormat} für jede Entität individuell definiert.
%    \begin{macrocode}
\newcommand*\Markup@Inline[1]{\mbox{\Markup@Format{#1}}}
%<*class>
\newcommand*\Markup@Declare{}
\newcommand*\Markup@@Declare[1]{\Markup@Format{#1}\Markup@Suffix}
%</class>
%    \end{macrocode}
% \end{macro}^^A \Markup@@Declare
% \end{macro}^^A \Markup@Declare
% \end{macro}^^A \Markup@Inline
%
% \subsubsection{Extraktion von Argumenten der Entitätsbefehle}
%
% Die Entitätsbefehle nutzen zum einen sämtliche optionalen Argumenten vor dem
% obligatorischen, um auch expandierbaren Varianten bereitstellen zu können.
% Zum anderen werden die Inhalte des obligatorischen Argumentes intern in
% mehrere Argumente zerlegt. Die folgenden Makros dienen zur Wandlung von der
% externen in die interne Darstellung und vice versa.
%
% \begin{macro}{\Markup@Inner@Get}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\Markup@Inner@@Get}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Alle Entitätsbefehle nutzen \cs{Process@Markup}, was sich hier zunutze 
% gemacht wird, indem \cs{Markup@Inner@@Get} mit der gleichen Signatur
% definiert wird, um die übergebenen Argumente einzusammeln. Hierfür muss
% \cs{Markup@Inner@Get} mit dem ursprünglichen Markup des Entitätsbefehls im 
% zweiten obligatorischen Argument aufgerufen werden.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Inner@Get{m m}{%
  \begingroup
    \RenewDocumentCommand\Process@Index{m r[] m d// d== o d() d||}{}%
    \let\Process@Markup\Markup@Inner@@Get%
    #2%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def#1}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Markup@Inner@@Get{m d// d== o d() d<> d'' d||}{%
  \tud@toks@{{#1}/#2/=#3=[#4](#5)<#6>'#7'|#8|}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Inner@@Get
% \end{macro}^^A \Markup@Inner@Get
%
% \begin{macro}{\Markup@Outer@Get}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\Markup@Outer@@Get}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Hiermit lässt sich die interne Darstellung in die ursprüngliche Signatur 
% zurückwandeln. Dies ist beispielsweise für das Schreiben von Indexeinträgen 
% notwendig. Hierfür muss \cs{Markup@Outer@Get} mit der internen Signatur von 
% \cs{Process@Markup} im zweiten obligatorischen Argument aufgerufen werden.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Outer@Get{m m}{%
  \begingroup%
    \protected@edef\tud@res@a{\noexpand\Markup@Outer@@Get#2}%
    \tud@res@a%
    \edef\tud@res@a{%
      \endgroup%
      \unexpanded{\def#1}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Markup@Outer@@Get{m d// d== o d() d<> d'' d||}{%
  \expandafter\def\expandafter\tud@res@a\expandafter{\@firstoftwo#1}%
  \IfValueT{#8}{\appto\tud@res@a{|#8|}}%
  \IfValueT{#7}{\appto\tud@res@a{'#7'}}%
  \IfValueT{#5}{\appto\tud@res@a{(#5)}}%
  \tud@toks@\expandafter{\tud@res@a}%
  \expandafter\def\expandafter\tud@res@b\expandafter{\@secondoftwo#1}%
  \IfValueT{#2}{\appto\tud@res@b{/#2}}%
  \IfValueT{#3}{\appto\tud@res@b{=#3}}%
  \addto@hook@expandafter\tud@toks@{\expandafter{\tud@res@b}}%
  \IfValueT{#4}{\addto@hook\tud@toks@{[#4]}}%
  \IfValueT{#6}{\addto@hook\tud@toks@{<#6>}}%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@Outer@@Get
% \end{macro}^^A \Markup@Outer@Get
%
% \begin{macro}{\Markup@Replace}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\Markup@@Replace}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Hiermit können einzelne optionale Argumente der inneren Signatur aus dem 
% zweiten obligatorischen Argument ausgetauscht werden, wobei die Sternversion 
% nur Argumente überschreibt, welche bisher nicht gesetzt (\val{-No-Value-}) 
% sind. Die einzusetzenden Werte sind über die optionalen Argumente von 
% \cs{Markup@Replace} anzugeben.
%    \begin{macrocode}
\NewDocumentCommand\Markup@Replace{s m d// d== o d() d'' d|| m}{%
  \begingroup
    \protected@edef\tud@res@a{\Markup@Replace#9}%
    \DeclareDocumentCommand\Markup@Replace{m d// d== o d() d<> d'' d||}{%
      \tud@toks@{{##1}}%
      \Markup@@Replace{#1}{//}{#3}{##2}%
      \Markup@@Replace{#1}{==}{#4}{##3}%
      \Markup@@Replace{#1}{[]}{#5}{##4}%
      \Markup@@Replace{#1}{()}{#6}{##5}%
      \addto@hook\tud@toks@{<##6>}%
      \Markup@@Replace{#1}{''}{#7}{##7}%
      \Markup@@Replace{#1}{||}{#8}{##8}%
    }%
    \tud@res@a%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def#2}{\the\tud@toks@}%
    }%
  \tud@res@a%
}
\NewDocumentCommand\Markup@@Replace{m m m m}{%
  \begingroup
    \def\tud@res@a{#4}%
    \IfValueT{#3}{%
      \IfBooleanTF{#1}{%
        \IfValueF{#4}{\edef\tud@res@a{#3}}%
      }{%
        \edef\tud@res@a{#3}%
      }%
    }%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\addto@hook\tud@toks@}{%
        \@firstoftwo#2\expandonce\tud@res@a\@secondoftwo#2%
      }%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Markup@@Replace
% \end{macro}^^A \Markup@Replace
%
% \subsubsection{Erstellen von Indexeinträgen}
%
% \begin{macro}{\Process@Index}
% \changes{v2.05}{2015/11/15}{neu}^^A
% \changes{v2.06p}{2022/11/04}{Signatur angepasst}^^A
% \begin{macro}{\Process@@Index}
% \changes{v2.05}{2015/11/15}{neu}^^A
% \changes{v2.06p}{2022/11/04}{Signatur angepasst}^^A
% Mit \cs{Process@Index} wird geprüft, ob mit dem im zweiten obligatorischen 
% Argument enthaltenen Entitätsbefehl ein Indexeintrag erzeugt werden soll. 
% Ein Indexeintrag kann mit der Sternversion eines Entitätsbefehls explizit 
% unterdrückt werden, wobei der boolesche Wert im ersten obligatorischen 
% Argument an \cs{Process@Index} zu Prüfung übergeben wird. Außerdem wird für
% obsolete Deklarationen ebenso wie bei aktiviertem Schalter \cs{if@tud@index} 
% kein Eintrag erstellt. In allen genannten Fällen passiert beim Aufruf von 
% \cs{Process@Index} nichts, andernfalls wird \cs{Process@@Index} ausgeführt.
%
% Die auf die zwei obligatorischen Argumente folgenden optionalen sind in der
% Nomenklatur identisch zu den bisherigen Erläuterungen, der vollständige 
% Funktionsaufruf lautet:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@Index}\marg{Stern?}\marg{Element}^^A
%   |=|\meta{Wert}|=|\oarg{Anmerkung}\parg{Entität}^^A
%   \verb+|+\meta{Indexmarkup}\verb+|+^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\Process@Index{m r[] m d// d== o d() d||}{%
  \ifboolexpr{%
%<class>    bool {@tud@index} or bool {@tud@obsolete}%
%<package>    bool {@tud@index}%
  }{}{%
    \IfBooleanTF{#1}{%
      \IfValueT{#8}{%
%<*class>
        \ClassWarning{tudscrmanual}%
%</class>
%<*package>
        \PackageWarning{tudscrmanual}%
%</package>
        {%
          You've used the starred version. No index entry\MessageBreak%
          for `\detokenize{#3}' is created. The\MessageBreak%
          optional argument |#8| will be ignored%
        }%
      }%
    }{%
      \Process@@Index[#2]{#3}/#4/=#5=[{#6}](#7)|#8|%
    }%
  }%
}
%    \end{macrocode}
% Mit \cs{Process@@Index} erfolgt die eigentliche Erzeugung des Indexeintrages.
%    \begin{macrocode}
\NewDocumentCommand\Process@@Index{r[] m r// r== r[] r() r||}{%
%    \end{macrocode}
% Dabei erledigt \cs{tud@idx@get} einen Großteil der Aufgabe. Mit besagtem 
% Makro werden Schlüssel und Format für den gewünschten Indexeintrag erzeugt.
% Sollte optional ein spezieller |=|\meta{Wert}|=| für einen Schlüssel gegeben
% sein, so wird ggf. auch der passende Haupteintrag erstellt.
%    \begin{macrocode}
%<*class>
  \if@tud@declare%
    \tud@idx@get{#2}/#3/=#4=[{#5}](#6)|declare|%
  \else%
%</class>
    \tud@idx@get{#2}/#3/=#4=[{#5}](#6)|#7|%
%<*class>
  \fi%
%</class>
  \edef\tud@lbl@tmp{#1}%
%    \end{macrocode}
% Entitätsbefehle, welche in Deklarationen verwendet wurden, werden für eine 
% höhere Priorisierung in einem speziellen Index angelegt, wobei hier die 
% Formatierung dieses Eintrags fest vorgegeben ist.
%    \begin{macrocode}
%<*class>
  \if@tud@declare%
    \if@openindex%
      \IfValueT{#7}{%
        \ClassWarning{tudscrmanual}{%
          It is not possible to use any indexing format\MessageBreak%
          like |#7| within the arguments of the\MessageBreak%
          environments `Declaration' or `DeclareEntity*'%
        }%
      }%
%    \end{macrocode}
% Jetzt folgt~-- abhängig vom Schalter \cs{if@openindex}~-- der öffnende oder 
% schließende Indexeintrag der Deklaration. Für den schließenden ist dabei eine 
% Formatierung des Schlüssels nicht notwendig.
%    \begin{macrocode}
      \index[\tud@lbl@tmp-declare]{%
        \tud@idx@val\tud@idx@key @\tud@idx@fmt|(!%
      }%
    \else%
      \index[\tud@lbl@tmp-declare]{%
        \tud@idx@val\tud@idx@key @\tud@idx@fmt|!)%
      }%
    \fi%
%    \end{macrocode}
% Für Entitätsbefehle außerhalb von Deklarationsumgebungen wird ein einfacher 
% Eintrag in den Index erzeugt, wobei auch im Fließtext über das Indexmarkup 
% \verb+|+\val{declare}\verb+|+ eine Quasi-Deklaration verwendet werden kann. 
% Dies wird beispielsweise für \KOMAScript-Optionen genutzt, um diese in der 
% gewünschten Formatierung im Index erscheinen zu lassen.
%    \begin{macrocode}
  \else%
%</class>
    \IfValueT{#7}{%
%<*class>
      \tud@if@strequal{#7}{declare}{%
        \appto\tud@lbl@tmp{-declare}%
        \appto\tud@idx@fmt{|!}%
      }{%
        \appto\tud@idx@fmt{|#7}%
      }%
%</class>
%<*package>
      \appto\tud@idx@fmt{|#7}%
%</package>
    }%
    \index[\tud@lbl@tmp]{\tud@idx@val\tud@idx@key @\tud@idx@fmt}%
%<*class>
  \fi%
%</class>
}
%    \end{macrocode}
% \end{macro}^^A \Process@@Index
% \end{macro}^^A \Process@Index
%
% \subsubsection{Formatierung von Indexeinträgen}
%
% \begin{macro}{\tud@idx@get}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \changes{v2.06p}{2022/11/04}{Signatur angepasst}^^A
% \begin{macro}{\tud@idx@key}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@fmt}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@val}
% \changes{v2.05}{2015/11/05}{neu}^^A
% \begin{macro}{\tud@idx@ety}
% \changes{v2.05}{2015/11/05}{neu}^^A
% Mit dem Makro \cs{tud@idx@get} wird die Formatierung eines Indexeintrags für 
% einen Entitätsbefehl realisiert. Für das Sortieren der Indexeinträge kommt 
% \app{texindy} zum Einsatz. Um die Indexeinträge wie gewünscht zu Formatieren, 
% gibt es zwei Möglichkeit. 
%
% Bei der ersten Variante würde der Indexeintrag einfach direkt mit den 
% Entitätsbefehlen erstellt und in der \app{texindy}-Stildatei wird für alle
% Auszeichnungsbefehle die passende |merge-rule| erstellt, um die korrekte 
% Sortierung zu gewährleisten. Tatsächlich war in einer früheren Version genau
% das der Ansatz. Allerdings können die manuell erstellten RegExp-Regeln durch 
% \hrfn{http://sourceforge.net/p/xindy/bugs/22/}{\app{texindy} nicht korrekt}
% genutzt werden, weshalb der Ansatz verworfen wurde.
%
% Damit das Sortieren verlässlich funktioniert, werden die Einträge für den 
% Index deshalb in der gewohnten Syntax von \app{makeindex} in der Form
% \meta{Schlüsselwort}|@|\meta{Markup} erstellt. Diese Syntax kann auch mit
% \app{texindy} genutzt werden. 
%
% An \cs{tud@idx@get} werden vier obligatorische gefolgt von vier optionalen 
% Argumenten übergeben. Die ersten beiden Argumente sind die Makros, in welche
% \meta{Schlüsselwort}~-- für gewöhnlich \cs{tud@idx@key}~-- sowie die 
% Formatierung \meta{Markup}~-- normalerweise \cs{tud@idx@fmt}~-- expandiert 
% werden. Mit dem Makro im dritten Argument wird es möglich, Untereinträge zu 
% einem \meta{Schlüsselwort} für beispielsweise Parameter von Umgebungen oder
% Befehlen sowie spezielle Schlüsselwerte von Optionen zu erzeugen.
% Dabei wird vor der Erstellung des Untereintrages der direkt zuvor generierte
% Indexhaupteintrag ins dritte Argument~-- normalerweise \cs{tud@idx@val}~--
% gesichert. Das vierte und letzte obligatorische Argument enthält schließlich 
% den eigentlichen Entitätsbefehl, für welchen der Indexeintrag erzeugt werden 
% soll. 
%
% Daran schließen sich vier optionale Argumente an, mit denen die Formatierung 
% des Indexeintrags differenziert werden kann. Das erste optionale Argument 
% |=|\meta{Wert}|=| kann wie bereits gewohnt für das Hinzufügen eines
% Schlüsselwertes genutzt werden. Das zweite, ordinäre optionale Argument 
% \oarg{Anmerkung} fügt dem Eintrag in den Index eine zusätzliche Anmerkung
% hinzu. Soll der Indexeintrag für ein spezifisches Paket oder eine Klasse aus
% dem \TUDScript-Bundle erstellt werden, wird das optionale Argument in runden 
% Klammern \parg{\string\Class\marg{Klasse}/\string\Package\marg{Paket}} für 
% einen Verweis auf das \parg{Entität} verwendet, der in \cs{@idxbundle} 
% gespeichert wird. Das Argument \verb+|+\meta{Indexmarkup}\verb+|+ wird bei
% Deklarationen zur Unterdrückung von Untereinträgen verwendet.
% Der vollständige Funktionsaufruf lautet:
% \newline\begingroup\scriptsize^^A
%   \cs{tud@idx@get}\cs{tud@idx@key}\cs{tud@idx@fmt}^^A
%   \cs{tud@idx@val}\marg{Elem.}|=|\meta{Wert}|=|\oarg{Anm.}^^A
%   \parg{Entität}\verb+|+\meta{Indexmark.}\verb+|+^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\newcommand*\tud@idx@key{}
\newcommand*\tud@idx@fmt{}
\newcommand*\tud@idx@val{}
\newcommand*\tud@idx@ety{}
\NewDocumentCommand\tud@idx@get{s m r// r== r[] r() d<> d'' d||}{%
%    \end{macrocode}
% Die Änderungen an allerhand temporären Makros sollen lokal bleibens.
%    \begin{macrocode}
  \begingroup%
%    \end{macrocode}
% In einer weiteren Gruppe wird der Entitätsbefehl des vierten obligatorischen
% Arguments ausgewertet. Es wird eine Fallunterschiedung durchgeführt, ob es 
% sich dabei um einen Parameter handelt oder nicht. Ist dies der
% Fall, wird für diesen Parameter der hier nachfolgend formatierte Indexeintrag
% als Untereintrag verwendet.
%    \begin{macrocode}
    \begingroup%
%    \end{macrocode}
% Nachdem ein möglicher Haupteintrag für Parameter erzeugt wurde, folgt nun 
% der formatierte Indexeintrag für die aktuelle Entität. Um diesen zu 
% erstellen, wird für \meta{Schlüsselwort} zunächst nur der Inhalt des
% Hauptargumentes benötigt. Dieser wird hier in das zweite Argument
% expandiert, der ggf. erzeugte Haupteintrag in das vierte.
%    \begin{macrocode}
      \Markup@Expandable%
      \edef\tud@reserved{%
        \noexpand\endgroup%
        \def\noexpand\tud@idx@key{#2}%
      }%
    \tud@reserved%
%    \end{macrocode}
% Die Auszeichnung für den Indexeintrag besteht in erster Linie aus dem 
% Entitätsbefehl selbst. Damit ein |@|"~Zeichen beispielsweise in einem 
% Makronamen korrekt verarbeitet wird, wird dieses im Stil von \app{makeindex} 
% mit |"| maskiert.
%    \begin{macrocode}
    \def\tud@idx@fmt{#2}%
    \tud@replace@@in\tud@idx@key{@}{"@}%
    \tud@replace@@in\tud@idx@fmt{@}{"@}%
    \let\tud@idx@val\@empty%
%    \end{macrocode}
% In \cs{@idxbundle} wird ggf. das Paket oder die Klasse gespeichert, für die 
% der aktuelle Eintrag erzeugt werden soll. Eine explizite Angabe wird in jedem 
% Fall genutzt,\dots
%    \begin{macrocode}
    \let\tud@idx@ety\tud@ety@dflt%
    \IfValueTF{#6}{%
      \def\tud@idx@ety{#6}%
    }{%
%    \end{macrocode}
% \dots eine implizite nur, wenn auch tatsächlich das passende Label existiert, 
% da sonst mit Sicherheit falsche Einträge im Index erscheinen würden.
%    \begin{macrocode}
%<*class>
      \ifx\tud@ety@crnt\tud@ety@dflt\else
        \tud@lbl@@get\tud@lbl@tmp{{#2}/#3/(\tud@ety@crnt)}%
        \tud@if@lbl@exists{\tud@lbl@tmp}{%
          \let\tud@idx@ety\tud@ety@crnt%
%    \end{macrocode}
% Sollte der Eintrag selbst dem Suffix für Paket oder Klasse entsprechen, wird
% dieser ignoriert.
%    \begin{macrocode}
          \def\tud@reserved{#2}%
          \ifx\tud@reserved\tud@idx@ety%
            \let\tud@idx@ety\tud@ety@dflt%
          \fi%
        }{}%
      \fi
%</class>
    }%
%    \end{macrocode}
% Nachfolgend wird für den zu erzeugenden Indexeintrag die Zugehörigkeit des
% aktuellen Elements zu einem Paket oder einer Klasse aus dem \TUDScript-Bundle 
% durch das Anhängen des jeweiligen \TUDScript-Bundle-Elements signalisiert.
% Dabei werden für die Anpassung von Schlüssel und Formatierung des Eintrags
% die temporären Makros \cs{@tempa}~(Schlüssel) und \cs{@tempb}~(Formatierung)
% gespeichert. In \cs{@tempc} wird der Inhalt von \cs{@tempb} zwischenzeitlich
% zur späteren Verwendung gesichert.
%    \begin{macrocode}
    \let\@tempa\@empty%
    \let\@tempb\@empty%
    \let\@tempc\@empty%
%    \end{macrocode}
% Der temporäre Schalter \cs{@tempswa} wird genutzt, um das Hinzufügen der 
% Ergänzungen zu steuern. Diese sollen nur für Elemente, welche nicht zu den 
% Hauptklassen gehören, erfolgen.
%    \begin{macrocode}
    \@tempswatrue%
    \ifx\tud@idx@ety\tud@ety@dflt%
      \@tempswafalse%
    \else%
      \IfBooleanT{#1}{\@tempswafalse}%
      \let\@tempc\tud@idx@ety
    \fi%
%    \end{macrocode}
% Der Indexeintrag kann zur besseren Kenntnisnahme außerdem standardmäßig mit 
% einer Beschreibung versehen werden.
%    \begin{macrocode}
    \IfValueT{#5}{%
      \appto\@tempa{ #5}%
      \appto\@tempb{\suffix{#5}}%
    }%
%    \end{macrocode}
% Wird die Anmerkung gesetzt, ist für den Schlüssel nur der Inhalt des in 
% \cs{@idxbundle} gesicherten Entitätsbefehls relevant. Dieser wird in der 
% folgenden Gruppe extrahiert und \cs{@tempa} angehangen. Für die Formatierung 
% bleibt das Markup erhalten und wird \cs{tempb} hinzugefügt.
%    \begin{macrocode}
    \if@tempswa%
      \begingroup%
        \Markup@Expandable%
        \edef\tud@reserved{%
          \noexpand\endgroup%
          \ifx\tud@idx@ety\@empty\else
            \noexpand\appto\noexpand\@tempa{\space\tud@idx@ety}%
          \fi
        }%
      \tud@reserved%
      \ifx\tud@idx@ety\@empty\else
        \eappto\@tempb{\suffix{\expandonce\tud@idx@ety}}%
      \fi
    \fi%
%    \end{macrocode}
% Sollte mit |=|\meta{Wert}|=| ein spezieller Schlüsselwert angegeben worden
% sein, wird für diesen normalerweise ein separater Untereintrag erstellt. Der
% Schalter \cs{@tempswa} wird genutzt, um das Erzeugen dieses Untereintrages im
% Zweifel zu unterdrücken und diesen stattdessen als normalen Eintrag zu
% setzen. Dies ist zum einen bei Deklarationen und zum anderen in der
% Änderungsliste notwendig. Außerdem kann dies auch mit der Angabe von 
% \val{default} als Indexargument erzwungen werden.
%    \begin{macrocode}
    \@tempswafalse%
    \let\@tempd\@empty%
    \IfBooleanT{#1}{%
      \@tempswatrue%
      \def\@tempd{: Parameter angepasst}%
    }%
    \IfValueT{#9}{%
      \tud@if@strequal{#9}{declare}{%
        \@tempswatrue%
        \tud@doifPValue{#4}{\noexpand\@tempswafalse}%
      }{}%
      \tud@if@strequal{#9}{default}{\@tempswatrue}{}%
    }%
%    \end{macrocode}
% In diesem Fall werden die Ergänzungen für Schlüssel und Formatierung ggf. um 
% die speziellen Schlüsselwerte für das Element ergänzt.
%    \begin{macrocode}
    \if@tempswa%
      \tud@doifPValue{#4}{\noexpand\appto\noexpand\tud@idx@key{=#4}}%
      \IfValueTF{#3}{%
        \tud@idx@hacky@fmt{#2}%
        \let\@tempb\@empty%
        \edef\tud@idx@val{%
          \expandonce\tud@idx@key\expandonce\@tempa\@tempd @%
          \expandonce\tud@idx@fmt\@tempd!%
        }%
        \begingroup
          \Markup@Expandable%
          \edef\tud@reserved{%
            \endgroup
            \def\noexpand\tud@idx@key{#3}%
          }%
        \tud@reserved%
        \tud@idx@hacky@fmt/#3/=#4={#2}%
        \IfBooleanT{#1}{\appto\tud@idx@fmt{\suffix{Parameter}}}%
      }{%
        \eappto\tud@idx@key{\expandonce\@tempa}%
        \tud@idx@hacky@fmt=#4={#2}%
      }%
%    \end{macrocode}
% Andernfalls wird geprüft, ob ein verwertbarer Schlüsselwert angegeben wurde.
%    \begin{macrocode}
    \else%
      \tud@doifPValue{#4}{\noexpand\@tempswatrue}%
%    \end{macrocode}
% Ist dies der Fall, wird aus den bisherigen Eingaben der Haupteintrag und 
% daran anschließend der dazugehörige Untereintrag erstellt\dots
%    \begin{macrocode}
      \if@tempswa%
        \tud@idx@hacky@fmt{#2}%
        \let\@tempb\@empty%
        \edef\tud@idx@val{%
          \expandonce\tud@idx@key\expandonce\@tempa\@tempd @%
          \expandonce\tud@idx@fmt\@tempd!%
        }%
        \IfValueT{#3}{%
          \begingroup
            \Markup@Expandable%
            \edef\tud@reserved{%
              \endgroup
              \def\noexpand\tud@idx@key{#3}%
            }%
          \tud@reserved%
          \tud@idx@hacky@fmt/#3/{#2}%
          \eappto\tud@idx@val{%
            \expandonce\tud@idx@key @%
            \expandonce\tud@idx@fmt!%
          }%
        }%
        \appto\tud@idx@key{=#4}%
        \tud@idx@hacky@fmt/#3/=#4={#2}%
%    \end{macrocode}
% \dots andernfalls bleibt es bei einem normalem Eintrag in den Index.
%    \begin{macrocode}
      \else%
        \tud@idx@hacky@fmt{#2}%
        \let\@tempb\@empty%
        \IfValueTF{#3}{%
          \edef\tud@idx@val{%
            \expandonce\tud@idx@key\expandonce\@tempa\@tempd @%
            \expandonce\tud@idx@fmt\@tempd!%
          }%
          \begingroup
            \Markup@Expandable%
            \edef\tud@reserved{%
              \endgroup
              \def\noexpand\tud@idx@key{#3}%
            }%
          \tud@reserved%
          \tud@idx@hacky@fmt/#3/=#4={#2}%
          \IfBooleanT{#1}{\appto\tud@idx@fmt{\suffix{Parameter}}}%
        }{%
          \eappto\tud@idx@key{\expandonce\@tempa}%
        }%
      \fi%
    \fi%
%    \end{macrocode}
% Die Erzeugung eines formatierten Indexeintrages ist beendet, das Resultat 
% wird nach der letzten Gruppe definiert.
%    \begin{macrocode}
    \let\emph\@firstofone%
    \protected@edef\tud@reserved{%
      \noexpand\endgroup%
      \def\noexpand\tud@idx@key{\tud@idx@key}%
      \def\noexpand\tud@idx@fmt{\tud@idx@fmt}%
      \def\noexpand\tud@idx@val{\tud@idx@val}%
    }%
  \tud@reserved%
}
\NewDocumentCommand\tud@idx@hacky@fmt{d// d== m}{%
  \begingroup
    \let\emph\@firstofone%
    \protected@edef\tud@res@c{#3}%
    \expandafter\def\expandafter\tud@res@a\expandafter%
      {\expandafter\@firstoftwo\tud@res@c}%
    \expandafter\def\expandafter\tud@res@b\expandafter%
      {\expandafter\@secondoftwo\tud@res@c}%
          \ifx\@tempc\@empty\else\eappto\tud@res@a{(\expandonce\@tempc)}\fi%
          \IfValueT{#1}{\appto\tud@res@b{/#1}}%
          \IfValueT{#2}{\appto\tud@res@b{=#2}}%
    \edef\tud@res@c{%
      \endgroup
      \unexpanded{\def\tud@idx@fmt}{%
        \expandonce\tud@res@a{\expandonce\tud@res@b}%
        \expandonce\@tempb%
      }%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \tud@idx@ety
% \end{macro}^^A \tud@idx@val
% \end{macro}^^A \tud@idx@fmt
% \end{macro}^^A \tud@idx@key
% \end{macro}^^A \tud@idx@get
%
% \iffalse
%<*class>
% \fi
%
% \subsubsection{Erstellen der Einträge für die Änderungsliste}
%
% Um dem Anwender einen schnellen Überblick zu Änderungen der aktuellen Version 
% bereitstellen zu können, werden Befehle zur automatisierten Erzeugung einer 
% solchen Liste definiert. Die Änderungsliste ist der Klasse \cls{tudscrmanual} 
% vorbehalten.
%
% Änderungsnotizen lassen sich auf zwei unterschiedlichen Wegen generieren. 
% Entweder über die Nutzung von \cs{ChangedAt} oder über das optionale Argument
% einer der Deklarationsumgebungen. Diese sind in der Form 
% \meta{Versionsnummer}|:|\meta{Änderungsnotiz} anzugeben. Die alleinige Angabe
% der Versionsnummer ohne Änderungsnotiz ist ebenso möglich.
%
% Wird die Änderungsnotiz für ein bestimmtes Element wie eine Option oder ein 
% Befehl erstellt, wie es bei den Deklarationsumgebungen implizit oder bei der 
% Verwendung von \cs{ChangedAt} mit optionalem Argument geschieht, gibt es die 
% zusätzliche Möglichkeit, einen Untereintrag zu erstellen. Dabei ist dieser 
% nach Versionsnummer und vor Änderungsnotiz in folgender Form anzugeben: 
% \meta{Versionsnummer}|!|\meta{Untereintrag}|:|\meta{Änderungsnotiz}. Der
% Untereintrag ist für die explizite Angabe eines Schlüssel-Wert-Paares gedacht.
%
% Das Erstellen von Änderungsnotizen erfolgt in zwei Schritten. Diese werden 
% zuerst mit dem Befehl \cs{Changed@At@CreateList} in einer standardisierten 
% Form in der temporären Liste \cs{tud@changedat@list} gespeichert und später 
% mit dem Makro \cs{Changed@At@CreateEntry} verarbeitet. Dieses Vorgehen liegt
% in den Umgebungen für Deklarationen begründet, welche verschachtelt werden
% können, jedoch einmalig mit \cs{printdeclarationlist} abgearbeitet werden.
%
% \begin{macro}{\if@tud@changedat}
% \begin{macro}{\Process@ChangedAt}
% \changes{v2.02}{2014/07/25}{erweitert}^^A
% \changes{v2.02}{2014/10/08}{Sternversion ergänzt}^^A
% Der Schalter \cs{if@tud@changedat} wird im weiteren Verlauf dazu verwendet, 
% das Standardverhalten der einzelnen Entitätsbefehle kurzeitig zu ändern und
% anstelle der Makros \cs{Process@Markup} und \cs{Process@Index} den Befehl 
% \cs{Process@ChangedAt} auszuführen, mit welchem die Formatierung der Einträge 
% der Änderungsliste erfolgt.
%    \begin{macrocode}
\tud@newif\if@tud@changedat
%    \end{macrocode}
% Die Formatierung der Änderungseinträge erfolgt~-- wie auch für den Index~-- 
% mit dem Makro \cs{tud@idx@get}, wobei die Sternversion für die Identifikation
% als Änderungseintrag fungiert. Aufgerufen wird \cs{Process@ChangedAt} während 
% der Erstellung der Änderungseinträge mit \cs{Changed@At@CreateEntry}. Der
% Aufruf des Makros erfolgt dabei in gewohnter Form mit einem obligatorischen 
% gefolgt von drei optionalen Argumenten:
% \newline\begingroup\scriptsize^^A
%   \cs{Process@ChangedAt}\marg{Element}|=|\meta{Wert}|=|^^A
%   \oarg{Ausgabesuffix}\parg{Entität}^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\Process@ChangedAt{m d// d== o d()}{%
  \tud@idx@get*{#1}/#2/=#3=[{#4}](#5)%
}
%    \end{macrocode}
% \end{macro}^^A \Process@ChangedAt
% \end{macro}^^A \if@tud@changedat
% \begin{macro}{\ChangedAt}
% \changes{v2.02}{2014/07/25}{erweitert}^^A
% \changes{v2.02}{2014/10/15}{Sternversion neu (keine Randnotiz)}^^A
% \changes{v2.06}{2018/09/03}{optionale Angabe der Entität}^^A
% \begin{macro}{\@ChangedAt}
% \changes{v2.06}{2019/06/24}{neu}^^A
% \begin{length}{\tud@dim@changedatvskip}
% \changes{v2.04}{2015/06/08}{neu}^^A
% Der Befehl \cs{ChangedAt} kann im Fließtext für das Erstellen einer freien 
% Änderungsnotiz genutzt werden. Das obligatorische Argument sollt wie kurz 
% zuvor beschrieben verwendet werden.
%
% Eine Änderungsnotiz wird für die angegebene Versionsnummer normalerweise im
% Abschnitt \enquote{Allgemein} aufgeführt. Soll jedoch eine Notiz explizit für
% eine Option, eine Umgebung, einen Befehlt etc. erstellt werden, kann dieses 
% Element vor dem obligatorischen im optionalen Argument angegeben werden. Der 
% Eintrag erfolgt dann im Abschnitt \enquote{Implementierung} für das gegebene
% Element. Im obligatorischen Argument können auch mehrere Änderungsnotizen 
% gleichzeitig erzeugt werden. Hierfür sind diese mit Semikolon voneinander zu 
% trennen. Das Erzeugen der Liste erfolgt mit \cs{Changed@At@CreateList}.
%
% Normalerweise wird bei der Nutzung von \cs{ChangedAt} zusätzlich zum Eintrag
% in die Änderungsliste eine Randnotiz mit den angegebenen Versionsnummern
% erzeugt. Mit dem letzten optionalen Argument nach dem obligatorischen kann
% ein vertikaler Versatz dieser angegeben werden. Die Sternversion des Befehls 
% unterdrückt die Ausgabe der Randnotiz. 
%    \begin{macrocode}
\tud@newdim\tud@dim@changedatvskip
\NewDocumentCommand\ChangedAt{s o d() m !O{\tud@dim@changedatvskip}}{%
  \Changed@At@CreateList{#4}[{#2}](#3)%
%    \end{macrocode}
% Nach dem Erstellen der Liste wird diese abgearbeitet und ggf. die Randnotiz 
% ausgegeben.
%    \begin{macrocode}
  \print@changedatlist{#1}{#5}%
}
%    \end{macrocode}
% Die expandierbare Version des Befehls ist innerhalb von Überschriften nötig.
%    \begin{macrocode}
\NewExpandableDocumentCommand\@ChangedAt{s o d() m}{}
\AfterPackage*{hyperref}{%
  \pdfstringdefDisableCommands{%
    \let\ChangedAt\@ChangedAt%
  }%
}
\tud@addtocontents@initialize*{\let\ChangedAt\@ChangedAt}
%    \end{macrocode}
% \end{length}^^A \tud@dim@changedatvskip
% \end{macro}^^A \@ChangedAt
% \end{macro}^^A \ChangedAt
%
% \begin{macro}{\tud@changedat@list}
% \changes{v2.02}{2014/07/25}{neu}^^A
% Hier werden die Liste \cs{tud@changedat@list} sowie das Makro \cs{forssvlist} 
% für die Aufspaltung der semikolongetrennten Änderungsnotizen definiert.
%    \begin{macrocode}
\newcommand*\tud@changedat@list{}
\let\tud@changedat@list\relax
%    \end{macrocode}
% \end{macro}^^A \tud@changedat@list
% \begin{macro}{\Changed@At@CreateList}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\Changed@At@@CreateList}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \begin{macro}{\Changed@At@@@CreateList}
% \begin{macro}{\Changed@At@@@@CreateList}
% Mit diesen Befehlen wird eine Liste im Format von \pkg{etoolbox} erzeugt, 
% welche alle notwendigen Angaben für das Erzeugen der Änderungshistorie in 
% Form eines Indexes mit \cs{Changed@At@CreateEntry} enthält.
%
% Der Befehl \cs{Changed@At@CreateList} kann nach dem obligatorischen Argument 
% mit einem ordinären optionalen Argument verwendet werden, in welchem ein 
% Makro, eine Umgebung, eine Option etc. angegeben wird. Ist dies der Fall, so 
% wird der Eintrag in die Änderungsliste für dieses Element generiert, sonst 
% wird eine allgemeiner Eintrag erzeugt. Das optionale Argument in runden 
% Klammern wird lediglich verwendet, wenn für eine der beiden Spezialumgebungen 
% \env{DeclareEntity} bzw. \env{DeclareEntity*} eine Änderungsnotiz erstellt 
% wird, um diese für das jeweilige \TUDScript-Bundle-Element in den
% entsprechenden Abschnitt der Änderungsliste einzutragen. Das Hauptargument
% verarbeitet eine semikolongetrennte Liste und reicht jeden Bestandteil
% zusammen mit den beiden optionalen Argumenten an \cs{Changed@At@@CreateList}
% weiter. 
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@CreateList{m !o !d()}{%
  \IfValueT{#1}{\forssvlist{\Changed@At@@CreateList[{#2}](#3)}{#1}}%
}
%    \end{macrocode}
% Mit \cs{Changed@At@@CreateList} wird lediglich die Versionsnummer von der 
% eigentlichen Änderungsnotiz getrennt.
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@@CreateList{r[] r() >{\SplitArgument{1}{:}}m}{%
  \Changed@At@@@CreateList[{#1}](#2)#3%
}
%    \end{macrocode}
% Zuletzt wird durch \cs{Changed@At@@@CreateList} ein möglicher Untereintrag
% in ein separates Argument abgetrennt und \cs{Changed@At@@@@CreateList} mit
% allen Argumenten aufgerufen.
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@@@CreateList{%
  r[] r() >{\SplitArgument{1}{!}}m m%
}{%
  \Changed@At@@@@CreateList[{#1}](#2)#3{#4}%
}
%    \end{macrocode}
% Der Befehl \cs{Changed@At@@@@CreateList} übernimmt nun die Erstellung des 
% Eintrags in die Liste \cs{tud@changedat@list}. Wie bereits erwähnt, enthalten 
% die beiden ersten Argumente ggf. Markup-Befehl und \TUDScript-Bundle-Element. 
% Danach folgt die Versionsnummer der Änderungsnotiz, der mögliche Untereintrag 
% für einen Markup-Befehl sowie die Änderungsnotiz selbst. 
%
% Die oberste Gliederungsebene der Änderungshistorie ist die Versionsnummer. 
% Unter dieser werden für jedes \TUDScript-Bundle-Element die Änderungsnotizen 
% separat ausgegeben, wobei diese nochmal in einen allgemeinen Teil und einen 
% zur Implementierung getrennt werden. 
%
% Der im Folgenden erzeugte Eintrag für die Liste \cs{tud@changedat@list} wird
% in zwei unterschiedlichen Varianten generiert:
% \begin{description}
%   \item[\meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}]\strut\newline
%     allgemeine Änderungsnotiz
%   \item[\meta{Versionsnummer}|!Implementierung!|\meta{Markup}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}]\strut\newline
%     Änderungsnotiz für Implementierung eines Befehls, Option etc.
% \end{description}
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@@@@CreateList{r[] r() m m m}{%
%    \end{macrocode}
% Die Aufteilung der Änderungsliste in die einzelnen \TUDScript-Bundle-Elemente 
% erfolgt entweder anhand des explizit angegebenen optionalen Argumentes in
% runden Klammern oder aber implizit über den gegenwärtigen Inhalt des Makros
% \cs{tud@ety@crnt}. Dafür wird das Makro \cs{@tempa} so definiert, dass es
% das angegebene Argument in einer Box ausführt und die gesuchte Entität 
% in \cs{@tempb} gespeichert ist.
%    \begin{macrocode}
  \def\@tempa##1{%
    \sbox\z@{%
      \let\tud@idx@fmt\relax%
      \@tud@changedattrue##1\@tud@changedatfalse%
      \ifx\tud@idx@fmt\relax%
        \def\@tempb{##1}%
      \else%
        \let\@tempb\tud@idx@fmt%
      \fi%
      \trim@spaces@in\tud@res@b%
      \global\let\@tempb\@tempb
    }%
  }%
  \let\@tempb\@empty%
  \IfValueTF{#2}{%
    \@tempa{#2}%
  }{%
    \ifx\tud@ety@crnt\tud@ety@dflt\else
      \expandafter\@tempa\expandafter{\tud@ety@crnt}%
    \fi
  }%
%    \end{macrocode}
% Nachdem klar ist, für welche Entität ggf. der Änderungslisteneintrag 
% erzeugt werden soll, wird nun bestimmt, ob dieser im allgemeinen Teil oder in 
% den zur Implementierung erscheinen soll. Dies wird an der Existenz des ersten
% Argumentes entschieden. Ist es vorhanden, handelt es sich um einen Eintrag 
% für den Implementierungsteil, welcher in \cs{tud@changedat@list} in der Form 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Implementierung!|\meta{Entitätsbefehl}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% gespeichert wird, wobei der Untereintrag auch leer bleiben kann.
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
  \IfValueTF{#1}{%
    \toks@{#3!Implementierung }%
%    \end{macrocode}
% Hier erfolgt ggf. der Eintrag des \TUDScript-Bundle-Elements, danach folgt 
% der Entitätsbefehl.
%    \begin{macrocode}
    \ifx\@tempb\@empty\else
      \addto@hook\toks@{\space}%
      \addto@hook@expandafter\toks@{\@tempb}%
    \fi
    \addto@hook\toks@{!#1!}%
%    \end{macrocode}
% Wurde ein Untereintrag angegeben, wird dieser hier gefolgt von der 
% eigentlichen Änderungsnotiz eingefügt. Für obsolete Deklarationen für die 
% Änderungsnotiz in jedem Fall ignoriert, da beim späteren Aufruf des Makros 
% \cs{Changed@At@CreateEntry} eine Standardmeldung ausgegeben wird.
%    \begin{macrocode}
    \IfValueT{#4}{\addto@hook\toks@{#4}}%
    \addto@hook\toks@{!}%
    \if@tud@obsolete\else%
      \IfValueT{#5}{\addto@hook\toks@{#5}}%
    \fi%
  }{%
%    \end{macrocode}
% Handelt es sich um einen allgemeinen Änderungseintrag, wird dieser in der Form
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% in der Liste \cs{tud@changedat@list} gespeichert. Für den allgemeinen Teil 
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
% wird mit der Angabe eines \TUDScript-Bundle-Elements etwas anders verfahren.
% Wurde dieses~-- wenn auch nur indirekt über eine der beiden Spezialumgebungen
% \env{DeclareEntity} bzw. \env{DeclareEntity*}~-- angegeben, so wird der 
% Eintrag in den allgemeinen Hauptteil als Untereintrag erzeugt. Erfolgte die
% Verwendung jedoch innerhalb einer \TUDScript-Bundle-Deklaration, so erscheint
% der Eintrag im allgemeinen Teil für die explizite engegebene Entität.
%    \begin{macrocode}
    \toks@{#3!Allgemein}%
    \IfValueTF{#2}{%
      \addto@hook\toks@{!}%
      \ifx\@tempb\@empty\else
        \addto@hook@expandafter\toks@{\@tempb}%
      \fi
      \addto@hook@expandafter\toks@{:\space}%
      \IfValueTF{#5}{%
        \addto@hook\toks@{#5}%
      }{%
        \addto@hook\toks@{neu}%
      }%
    }{%
      \ifx\@tempb\@empty\else
        \addto@hook\toks@{\space}%
        \addto@hook@expandafter\toks@{\@tempb}%
      \fi
      \addto@hook\toks@{!}%
      \addto@hook\toks@{#5}%
    }%
    \IfValueT{#4}{%
      \ClassError{tudscrmanual}{Using !#4 isn't allowed for a change notice}{%
        At least, it has to be implemented!%
      }%
    }%
  }%
  \listeadd\tud@changedat@list{\the\toks@}%
}
%    \end{macrocode}
% \end{macro}^^A \Changed@At@@@@CreateList
% \end{macro}^^A \Changed@At@@@CreateList
% \end{macro}^^A \Changed@At@@CreateList
% \end{macro}^^A \Changed@At@CreateList
%
% \begin{macro}{\tud@chg@entry@validate}
% \changes{v2.06p}{2022/09/20}{neu}^^A
% Der Befehl teilt das Argument \meta{Version}|:|\meta{Text} aus dem dritten 
% Argument und schreibt das Ergebnis in die übergebenen Makros der ersten 
% beiden Argumente. Dabei wird der vordere Teil auf eine gültige Versionsangabe 
% geprüft.
%    \begin{macrocode}
\newcommand*\tud@chg@entry@validate[3]{%
  \begingroup%
    \in@{:}{#3}%
    \ifin@%
      \def\tud@res@c##1:##2\@nil{%
        \def\tud@res@a{##1}%
        \def\tud@res@b{##2}%
        \trim@spaces@in\tud@res@b%
      }%
      \tud@res@c#3\@nil%
    \else%
      \def\tud@res@a{#3}%
      \let\tud@res@b\@empty%
    \fi%
    \tud@v@validate\tud@res@a{\tud@res@a}%
    \edef\tud@res@c{%
      \endgroup%
      \unexpanded{\def#1}{v\tud@res@a}%
      \unexpanded{\def#2}{\expandonce\tud@res@b}%
    }%
  \tud@res@c%
}
%    \end{macrocode}
% \end{macro}^^A \tud@chg@entry@validate
%
% \subsubsection{Erzeugen der Änderungseinträge}
%
% Mit den nachfolgenden Makros erfolgt das eigentliche Eintragen der 
% Änderungseinträge aus der Liste \cs{tud@changedat@list} in den entsprechenden 
% Index~\val{changelog}. 
%
% \begin{macro}{\Changed@At@CreateEntry}
% \changes{v2.02}{2014/09/02}{neu}^^A
% \begin{macro}{\Changed@At@@CreateEntry}
% \changes{v2.02}{2014/09/02}{neu}^^A
% Mit diesen Makros erfolgt das eigentliche Eintragen der Änderungen aus der 
% Liste \cs{tud@changedat@list} in den Index~\val{changelog}. Der Befehl
% \cs{Changed@At@CreateEntry} wird durch \cs{@printchangedatlist} aufgerufen
% und teilt die gegebene Liste am Delimiter Ausrufezeichen |!| in fünf
% Argumente auf und reicht sie an \cs{Changed@At@@CreateEntry} weiter. Sind
% weniger als vier Ausrufezeichen vorhanden, so werden die ungenutzten 
% Argumente mit dem~-- durch das Paket \pkg{xparse} definierten~-- leeren Wert
% \val{-NoValue-} an den Befehl \cs{Changed@At@@CreateEntry} übergeben.
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@CreateEntry{>{\SplitArgument{4}{!}}m}{%
  \Changed@At@@CreateEntry#1%
}
%    \end{macrocode}
% Mit \cs{Changed@At@@CreateEntry} wird der Eintrag in die Änderungshistorie
% erzeugt, falls denn überhaupt ein Eintrag generiert werden soll. Dies wird
% daran erkannt, ob das dritte Argument dew Wert \val{-NoValue-} entspricht 
% oder eben nicht. Der zweite Fall tritt auf, wenn lediglich eine Randnotiz
% gesetzt werden soll. Die in \cs{tud@changedat@list} gespeicherten Einträge 
% haben die Form 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Allgemein!|\meta{Änderungsnotiz}^^A
% \endgroup\newline^^A
% oder 
% \newline\begingroup^^A
%   \meta{Versionsnummer}|!Implementierung!|\meta{Entitätsbefehl}^^A
%   |!|\meta{Untereintrag}|!|\meta{Änderungsnotiz}^^A
% \endgroup
% \ToDo{vorherige doc überarbeiten oder raus}[v2.07]
%    \begin{macrocode}
\newcommand*\Changed@At@@CreateEntry[5]{%
  \IfValueT{#3}{%
%    \end{macrocode}
% Bei der Deklaration von Optionen, Befehlen etc. werden diese automatisch in 
% der Liste der Änderungen im Bereich \enquote{Implementierung} vor der
% gegebenen Erklärung selbst ausgegeben. Hierfür wird die Existenz des vierten
% Arguments geprüft. Ist dieses vorhanden\dots
%    \begin{macrocode}
    \IfValueTF{#4}{%
%    \end{macrocode}
% \dots befindet sich im dritten Argument der Entitätsbefehl für den Eintrag im
% Implementierungsteil. Mit dem zwischenzeitlichen Aktivieren des Schalters
% \cs{if@tud@changedat} wird beim nachfolgenden Aufruf des Entitätsbefehls das 
% Makro \cs{Process@ChangedAt} ausgeführt und dadurch auch \cs{tud@idx@get*} 
% aufgerufen, wodurch in den Makros \cs{tud@idx@key}, \cs{tud@idx@fmt} und
% \cs{tud@idx@val} die passend formatierten Indexeinträge enthalten sind.
%    \begin{macrocode}
      \@tud@changedattrue#3\@tud@changedatfalse%
%    \end{macrocode}
% Das vierte Argument erstellt in der Änderungsliste einen Untereintrag für den
% im dritten Argument gegebenen Entitätsbefehl. Dies wird für Anmerkungen zu 
% expliziten Schlüssel-Wert-Paaren bei Optionen oder Parametern genutzt. 
%    \begin{macrocode}
      \tud@if@strblank{#4}{}{%
%    \end{macrocode}
% Hierfür wird die zuvor erhaltene Formatierung des Entitätsbefehls des dritten
% Argumentes an den Haupteintrag \cs{tud@idx@val} mit der zusätzlichen
% Anmerkung \enquote{Werte angepasst} angehängt.
%    \begin{macrocode}
        \eappto\tud@idx@val{%
          \expandonce\tud@idx@key: Werte angepasst@%
          \expandonce\tud@idx@fmt: Werte angepasst!%
        }%
%    \end{macrocode}
% Anschließend werden die Formatierungsbefehle des vierten Arguments genutzt, 
% wobei vom Befehl \cs{suffix} nur das Argument selbst benötigt wird. Um den 
% Inhalt von \cs{tud@idx@val} zu schützen, erfolgt das ganze in einer Gruppe.
%    \begin{macrocode}
        \begingroup%
          \@tud@changedattrue#4\@tud@changedatfalse%
          \let\suffix\@gobble%
          \protected@edef\tud@reserved{%
            \noexpand\endgroup%
            \def\noexpand\tud@idx@key{\tud@idx@key}%
            \def\noexpand\tud@idx@fmt{\tud@idx@fmt}%
          }%
        \tud@reserved%
      }%
%    \end{macrocode}
% Nachdem die Formatierung der Haupt- und Untereinträge soweit zusammengebaut 
% wurden, wird die eigentliche Änderungsnotiz des fünften Arguments angehangen. 
% Dabei wird für den Fall, dass \emph{keine} Erklärung angegeben wurde, in der 
% Änderungsliste vermerkt, ob es sich bei dem Entitätsbefehl respektive dessen 
% Untereintrag um eine \emph{neue} bzw. eine \emph{obsolete} Variante handelt.
%    \begin{macrocode}
      \tud@if@strblank{#5}{%
        \if@tud@obsolete%
          \appto\tud@idx@fmt{: entf\"allt}%
        \else%
          \appto\tud@idx@fmt{: neu}%
        \fi%
%    \end{macrocode}
% Existiert ein Eintrag, wird dieser für Schlüssel und Format verwendet.
%    \begin{macrocode}
      }{%
        \appto\tud@idx@key{: #5}%
        \appto\tud@idx@fmt{: #5}%
      }%
%    \end{macrocode}
% Nachdem alles abgearbeitet wurde, wird der Indexeintrag erstellt.
%    \begin{macrocode}
      \index[changes-#1]{#2!\tud@idx@val\tud@idx@key @\tud@idx@fmt}%
%    \end{macrocode}
% Existiert das vierte Argument nicht, handelt es sich um einen allgemeinen 
% Eintrag in der Änderungshistorie. Dieser wird direkt ausgeführt.
% \ToDo{temporären Workaround auflösen; mit Index zusammenführen?!}[v2.06]
%    \begin{macrocode}
    }{%
      \def\tud@idx@fmt{#3}%
      \tud@replace@@in\tud@idx@fmt{"=}{""=}%
      \tud@replace@@in\tud@idx@fmt{"~}{""~}%
      \index[changes-#1]{#2!\tud@idx@fmt}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \Changed@At@@CreateEntry
% \end{macro}^^A \Changed@At@CreateEntry
%
% \subsubsection{Spezielle Einträge für die Änderungsliste}
%
% \begin{macro}{\Changed@At@Special}
% \changes{v2.06p}{2022/09/20}{neu}^^A
% Hiermit lassen sich zusätzliche Einträge am Ende der Änderungsliste für die 
% angegebene Version erstellen.
% \ToDo{temporären Workaround auflösen; mit Index zusammenführen?!}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\Changed@At@Special{o m d<> m}{%
  \begingroup%
    \def\do##1{%
      \tud@chg@entry@validate\tud@res@a\tud@res@b{##1}%
      \IfValueTF{#3}%
        {\def\tud@res@c{#2\detokenize{@}\hyperref[{#3}]{#2}}}%
        {\def\tud@res@c{#2}}%
      \tud@unique@xadd\tud@changedat@list{\tud@res@a}%
      \tud@replace@@in\tud@res@b{"=}{""=}%
      \tud@replace@@in\tud@res@b{"~}{""~}%
      \index[{changes-\tud@res@a}]{\tud@res@c!\tud@res@b}%
    }%
    \dossvlist{#4}%
    \edef\tud@res@a{%
      \endgroup%
      \noexpand\printchangedatlist\IfValueT{#1}{\unexpanded{[{#1}]}}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \Changed@At@Special
%
% \begin{macro}{\Hint}
% Erstellen von Einträgen für den Abschnitt \enquote{Tipps \& Tricks}. Diese 
% erhalten einen separaten Abschnitt in der Änderungsliste.
%    \begin{macrocode}
\NewDocumentCommand\Hint{O{\expandonce\@currentlabelname} m}{%
  \Changed@At@Special{Tipps \& Tricks}<sec:tips>%
    {#2:#1\detokenize{@}\hyperref{}{}{\@currentHref}{#1}}%
}
%    \end{macrocode}
% \end{macro}^^A \Hint
%
% \subsubsection{Ausgabe der Änderungsnotizen}
%
% Ähnlich wie für den Index wird auch für die Änderungsliste bei der Ausgabe 
% verfahren. 
%
% \begin{macro}{\printchangedatlist}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Damit werden Änderungsnotizen der Umgebungen \env{DeclareEntity} und 
% \env{DeclareEntity*} ausgegeben.
%    \begin{macrocode}
\NewDocumentCommand\printchangedatlist{s O{\z@}}{%
  \print@changedatlist{#1}{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \printchangedatlist
% \begin{macro}{\print@changedatlist}
% \changes{v2.02}{2014/10/09}{neu}^^A
% Die Einträge in der Liste der Änderungen \cs{tud@changedat@list} werden mit 
% dem Makro \cs{Changed@At@CreateList} abgearbeitet, sortiert und erstellt. Das 
% zweite obligatorische Argument von \cs{@printchangedatlist} steuert den 
% vertikalen Versatz der Randnotiz. Wird im ersten Argument das boolesche Flag 
% zu \cs{BooleanTrue} gesetzt, wird die Randnotiz unterdrückt.
%    \begin{macrocode}
\newcommand*\print@changedatlist[2]{%
  \ifx\tud@changedat@list\relax\else%
    \begingroup%
%    \end{macrocode}
% In \cs{tud@res@a} wird eine Liste aller angegebenen Versionsnummern 
% gespeichert, die nach dem Setzen der Änderungseinträge sortiert als Randnotiz 
% ausgegeben wird. Um diese zu erhalten, wird diese von jedem Eintrag aus 
% \cs{tud@changedat@list} mit \cs{tud@res@b} respektive \cs{tud@res@c}
% extrahiert.
%    \begin{macrocode}
      \let\tud@res@a\@empty%
      \def\tud@res@b##1!##2\@nil{%
        \ifinlist{##1}{\tud@res@a}{}{\listadd\tud@res@a{##1}}%
        \Changed@At@CreateEntry{##1!##2}%
      }%
      \def\tud@res@c##1{%
        \in@{!}{##1}%
        \ifin@
          \tud@res@b##1\@nil%
        \else
          \tud@res@b##1!\@nil%
        \fi
      }%
      \forlistloop\tud@res@c{\tud@changedat@list}%
      \global\let\tud@changedat@list\relax%
%    \end{macrocode}
% Nach der Verarbeitung der Einräge sind in \cs{tud@res@a} alle angegebenen
% Versionsnummern genau einmal enthalten. Mit \cs{tud@list@sort} werden diese 
% in die richtige Reihenfolge sortiert und anschließend als Randnotiz in einer
% Tabelle ausgegeben, falls nicht die Sternversion verwendet wurde. Hierfür 
% wird für jede Versionsnummer ein Tabellenzeileneintrag generiert, der einen 
% Link auf den entsprechenden Abschnitt in der Änderungsliste enthält. Daran 
% anschließend wird die eigentliche Tabelle in der Randnotiz ausgegeben.
%    \begin{macrocode}
    \IfBooleanF{#1}{%
      \tud@list@sort\tud@res@a%
      \let\tud@res@b\@empty%
      \def\tud@res@c##1{%
        \appto\tud@res@b{%
          \ignorespaces%
          \hyperref[idx:changes-##1]{##1}%
          \tabularnewline%
        }%
      }%
      \forlistloop\tud@res@c{\tud@res@a}%
      \strut%
      \marginnote{%
        \begin{tabular}{|l|}%
          \hline%
          \tud@res@b%
          \hline%
        \end{tabular}%
      }[{#2}]%
      \aftergroup\ignorespaces%
    }%
    \endgroup%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \print@changedatlist
%
% \subsection{Deklarationsumgebungen für die Klasse \cls{tudscrmanual}}
%
% Die Umgebungen \env{Declaration}, \env{Declaration*} und \env{Cessation} 
% sowie \env{DeclareEntity}, \env{DeclareEntity*} werden wie auch der Befehl 
% \cs{InlineDeclaration} für die Beschreibung von Optionen, Umgebungen, 
% Befehlen etc. verwendet, welche von \TUDScript oder einer anderen Entität dem
% Anwender zur Verfügung gestellt werden.
%
% Anschließend folgen einige Umgebungen, mit welchen bestimmte Aspekte oder 
% Pakete im Handbuch erläutert werden.
%
% \begin{environment}{Declaration}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{environment}{Declaration*}
% \changes{v2.06p}{2022/09/22}{neu}^^A
% \begin{macro}{\tud@alias@values}
% \changes{v2.07}{2019/11/08}{neu}^^A
% Die \env{Declaration}-Umgebung dient zur Deklaration von Optionen, Umgebungen,
% Befehlen, Parametern, Bezeichnern, Längen, Schriftelementen und Farben. Diese 
% werden mit den entsprechenden Auszeichnungsbefehlen als obligatorisches 
% Argument übergeben. Zuvor kann noch vorher im ersten optionalen Argument eine
% Beschreibung für die Änderungsliste in der Form \oarg{Verison!Beschreibung}
% angegeben werden. Danach kann im dritten Argument~-- das zweite optionale~-- 
% die Voreinstellung für eine Option oder dergleichen angegeben werden. Das
% nächste optionale Argument erlaubt die Angabe einer bedingten Voreinstellung, 
% also einer anderen Voreinstellung als der zuerst angegeben unter bestimmten
% Voraussetzungen. Diese wird in der Form \oarg{Bedingung:Voreinstellung}
% angegeben. Das letzte Argument ist ebenfalls optional, wird aber in der Form
% \marg{Zusatz} angegeben und enthält ggf. zusätzliche Informationen.
% \ToDo{doc überprüfen}[v2.06]
% \ToDo{alle Umgebungen bzgl noindentafter und \cs{unksip} prüfen}[v2.06]
%    \begin{macrocode}
\newcommand*\tud@alias@values{\@nil}
\NewDocumentEnvironment{Declaration}{m d() d<> o D''{\noexpand\@nil}}{%
  \listeadd\tud@declaration@list{%
    \def\noexpand\tud@alias@values{#5}%
    \unexpanded{#1}%
  }%
  \tud@declare@start[{#4}]{#1}(#2){#3}%
}{%
  \tud@declare@end{#1}%
}
\NewDocumentEnvironment{Declaration*}{m d() d<>}{%
  \@tud@obsoletetrue
  \listadd\tud@declaration@list{%
    \tud@declare@num=\@ne\relax%
    #1%
    \tud@declare@num=\z@\relax%
  }%
  \tud@declare@start{#1}(#2){#3}%
  \@tud@obsoletefalse
}{%
  \tud@declare@end{\@tud@obsoletetrue#1\@tud@obsoletefalse}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@alias@values
% \end{environment}^^A Declaration*
% \end{environment}^^A Declaration
% \begin{environment}{Cessations}
% \changes{v2.06p}{2022/09/22}{neu}^^A
% \begin{environment}{Cessation}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@cessations@version}
% \changes{v2.06p}{2022/09/22}{neu}^^A
% Die Umgebung \env{Cessations} dient als Mantel für konsekutive Umgebungen 
% \env{Cessation}. Für diese wird die relevante Versionsnummer gesetzt. 
% Weiterhin wird ein Link in der Änderungsliste erzeugt und über das optionale 
% Argument können allgemeine Änderungsnotizen erzeugt werden.
%    \begin{macrocode}
\newcommand*\tud@cessations@version{}
\AtBeginDocument{\undef\tud@cessations@version}
\NewDocumentEnvironment{Cessations}{m o}{%
  \ifundef\tud@cessations@version{%
    \tud@v@validate\tud@cessations@version{#1}%
    \edef\tud@cessations@version{v\tud@cessations@version}%
  }{%
    \ClassError{tudscrmanual}{Nested environment `Cessations'}{%
      The environment `Cessations' must not be nested, but\MessageBreak%
      Version `\tud@cessations@version' is currently processed.
    }%
    \undef\tud@cessations@version%
  }%
  \ifundef\tud@cessations@version{}{%
    \begingroup%
      \edef\tud@res@a{%
        \unexpanded{Anpassungen f\"ur \TUDScript~}\tud@cessations@version%
      }%
      \edef\tud@lbl@tmp{sec:cessations:\tud@cessations@version}%
      \let\tud@res@b\@empty%
      \IfValueT{#2}{%
        \def\do##1{%
          \eappto\tud@res@b{\tud@cessations@version:}%
          \appto\tud@res@b{##1;}%
        }%
        \dossvlist{#2}%
      }%
      \edef\tud@res@a{%
        \endgroup%
        \noexpand\subsection[nonumber=true]{%
          \expandonce\tud@res@a%
          \noexpand\label{\tud@lbl@tmp}%
          \noexpand\index[changes-\tud@cessations@version]{%
            Allgemein!""@\noexpand\hyperref[\tud@lbl@tmp]{%
              \unexpanded{Anpassungen gegen\"uber der vorhergehenden Version}%
            }%
          }%
          \noexpand\ChangedAt*{\expandonce\tud@res@b}%
        }%
      }%
    \tud@res@a%
  }%
}{}
%    \end{macrocode}
% Die Umgebung \env{Cessation} ist ähnlich zu \env{Declaration}, wird allerdings
% für die Deklaration veralteter Befehle, Umgebungen, Optionen etc. verwendet.
% \ToDo{doc überprüfen}[v2.06]
% Für diese sieht die Eingabe etwas anders aus. Das 
% erste obligatorische Argument sollte eine Versionsnummer enthalten, ab wann
% die Deklaration veraltet ist. Das erste optionale Argument wird genutzt, wenn 
% für eine weiterhin gültige Deklaration lediglich ein bestimmter Wert 
% entfällt. Wird das erste Argument leer gelassen, erfolgt lediglich die 
% Ausgabe der Deklaration ohne einen Eintrag in die Änderungsliste. Dies ist 
% für Umgebungen und Befehle gedacht, bei denen lediglich ein oder mehrere 
% Parameter geändert wurden bzw. entfallen.
%    \begin{macrocode}
\NewDocumentEnvironment{Cessation}{o m d() d<> d''}{%
  \ifundef\tud@cessations@version{%
    \ClassError{tudscrmanual}{Missing environment `Cessations'}{%
      The environment `Cessation' must be nested\MessageBreak%
      within environment `Cessations'!%
    }%
    \edef\tud@cessations@version{v\TUDScriptVersion@Number}%
  }{}%
  \@tud@obsoletetrue%
  \listadd\tud@declaration@list{#2}%
%    \end{macrocode}
% Ohne eine zusätzliche Angabe im optionalen Argument |<>| wird standardmäßig
% der Entfall der Deklaration angegeben. Alternativ dazu kann im ersten 
% Argument der Versionsangabe mit einem Dopppelpunkt von dieser getrennt eine 
% neue bzw. aktuell gültige Deklaration als Querverweis angegeben werden.
% \ToDo{doc überprüfen}[v2.06]
%    \begin{macrocode}
  \let\tud@res@d\@empty
  \IfValueTF{#5}{%
    \tud@declare@start{#2}(#3){#5}%
  }{%
    \toks@{\tud@declare@start{#2}(#3)}%
    \def\tud@res@d{entf\"allt}%
    \IfValueT{#4}{%
      \begingroup
        \Markup@Inner@Get\tud@res@a{#4}%
        \Markup@Replace\tud@res@a'page'{\tud@res@a}%
        \Markup@Outer@Get\tud@res@a{\tud@res@a}%
        \edef\tud@res@a{%
          \endgroup
          \unexpanded{\appto\tud@res@d}{, \noexpand\seeplain{\tud@res@a}}%
        }%
      \tud@res@a%
    }%
    \addto@hook@expandafter\toks@{\expandafter{\tud@res@d}}%
    \the\toks@%
  }%
%    \end{macrocode}
% Wurde ein optionales Argument angegeben, bezieht sich der Änderungseintrag 
% auf ebendieses Argument, die eigentliche, obsolete Deklaration wird als 
% Untereintrag genutzt.
%    \begin{macrocode}
  \IfValueTF{#1}{%
    \Changed@At@CreateList{\tud@cessations@version!#2}[{#1}]%
  }{%
    \Changed@At@CreateList{\tud@cessations@version}[{#2}]%
  }%
  \@tud@obsoletefalse%
  \RenewDocumentCommand\printdeclarationlist{o d()}{%
    \@tud@obsoletetrue%
    \tud@print@declarationlist*[{##1}](##2)%
    \@tud@obsoletefalse%
  }%
}{%
  \tud@declare@end{\@tud@obsoletetrue#2\@tud@obsoletefalse}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@cessations@version
% \end{environment}^^A Cessation
% \end{environment}^^A Cessations
% \begin{macro}{\if@tud@declare}
% \begin{macro}{\if@tud@obsolete}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\if@openindex}
% \begin{macro}{\tud@declaration@list}
% \begin{macro}{\tud@declare@num}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Dies sind ein paar Hilfsmakros zur Steuerung des Markup sowie der Ausgabe von 
% Deklarationen, Index und Änderungsliste, welche bei den nächsten Befehlen und 
% Umgebungen genutzt werden. Mit \cs{if@tud@declare} wird festgelegt, ob die 
% Befehle für das Markup in der Ausgabe als Deklaration oder anderweitig 
% erfolgt. Zusätzlich wird mit \cs{tud@declare@num} definiert, wie genau das 
% Markup sich darstellen soll. Die möglichen Werte sind bei der Beschreibung 
% von \cs{Process@@MarkupDeclare} zu finden. Der Schalter \cs{if@openindex} 
% wird zu Beginn einer Deklaration auf \val{true} gesetzt und vor dem Beenden 
% auf \val{false}. Damit wird bestimmt, ob ein öffnender oder ein schließender 
% Indexeintrag erzeugt werden soll.
%    \begin{macrocode}
\tud@newif\if@tud@declare
\tud@newif\if@tud@obsolete
\tud@newif\if@openindex
\newcommand*\tud@declaration@list{}
\let\tud@declaration@list\relax
%    \end{macrocode}
% Das Makro \cs{tud@declare@num} bestimmt innerhalb einer Deklaration, wie 
% das Markup erfolgen soll. Die möglichen Werte sind bei der Beschreibung von
% \cs{Process@@MarkupDeclare} zu finden.
%    \begin{macrocode}
\tud@newcount\tud@declare@num
%    \end{macrocode}
% \end{macro}^^A \tud@declare@num
% \end{macro}^^A \tud@declaration@list
% \end{macro}^^A \if@openindex
% \end{macro}^^A \if@tud@obsolete
% \end{macro}^^A \if@tud@declare
% \begin{macro}{\tud@preset@list}
% \begin{macro}{\if@tud@preset@list}
% \begin{macro}{\tud@additional@list}
% \begin{macro}{\if@tud@additional@list}
% Dies sind die temporären listen, die für alle Deklarationen verwendet werden.
%    \begin{macrocode}
\newcommand*\tud@preset@list{}
\let\tud@preset@list\relax
\tud@newif\if@tud@preset@list
\newcommand*\tud@additional@list{}
\let\tud@additional@list\relax
\tud@newif\if@tud@additional@list
%    \end{macrocode}
% \end{macro}^^A \if@tud@additional@list
% \end{macro}^^A \tud@additional@list
% \end{macro}^^A \if@tud@preset@list
% \end{macro}^^A \tud@preset@list
% \begin{macro}{\tud@declare@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@index}
% Dies sind die Makros für die eigentliche Abarbeitung der Deklarationsbefehle 
% zu Beginn und Ende der Umgebungen \env{Declaration}, \env{Declaration*} und 
% \env{Cessation}. Zu Beginn wird nichts weiter ausgegeben sondern lediglich 
% alle übergebenen Argumente in jeweiligen Listen gesammelt. Die eigentliche 
% Ausgabe der Deklaration erfolgt mit dem Befehl \cs{printdeclarationlist}.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@start{o m >{\AP@PresetParser}r() m}{%
%    \end{macrocode}
% Die optional angegebenen Änderungen werden mit \cs{Changed@At@CreateList} in 
% der Liste \cs{tud@changedat@list} gesichert und später sowohl für die
% Randnotiz als auch die Änderungsliste verarbeitet.
%    \begin{macrocode}
  \Changed@At@CreateList{#1}[{#2}]%
%    \end{macrocode}
% Hier noch die Listen für Voreinstellungen\dots
%    \begin{macrocode}
  \IfValueTF{#3}{%
    \@tud@preset@listtrue%
    \listadd\tud@preset@list{#3}%
  }{%
    \listadd\tud@preset@list{\relax}%
  }%
%    \end{macrocode}
% \dots sowie zusätliche Informationen.
%    \begin{macrocode}
  \IfValueTF{#4}{%
    \@tud@additional@listtrue%
    \listadd\tud@additional@list{#4}%
    \in@{\Environment}{#2}%
    \ifin@%
      \@expandtwoargs\in@{/}{\@secondoftwo#2}%
      \ifin@\else
        \listadd\tud@additional@list{\tabularnewline}%
      \fi
    \fi%
  }{%
    \listadd\tud@additional@list{\relax}%
    \in@{\Environment}{#2}%
    \ifin@%
      \@expandtwoargs\in@{/}{\@secondoftwo#2}%
      \ifin@\else
        \listadd\tud@additional@list{\relax}%
        \listadd\tud@additional@list{\relax}%
      \fi
    \fi%
  }%
}
%    \end{macrocode}
% Am Ende der Umgebungen wird das übergebenen Hauptargument erneut ausgeführt,
% was zum Beenden der Indexeinträge für die jeweilige Deklaration führt
% (\cs{@openindexfalse}, siehe \cs{Process@Index}). Dafür werden die Makros 
% für die Angabe obligatorischer und optionaler Parameter lokal umdefiniert.
%    \begin{macrocode}
\newcommand*\tud@declare@end[1]{%
  \ifvmode\removelastskip\else\@killglue\fi
  \tud@declare@index%
  \global\let\tud@declare@index\@empty%
  \ifx\tud@declaration@list\relax\else%
    \ClassError{tudscrmanual}{\string\printdeclarationlist\space is missing}{%
      \string\tud@declaration@list\space is not empty. Did you\MessageBreak%
      forget to print this list with\MessageBreak%
      \string\printdeclarationlist?%
    }%
  \fi%
  \@tud@declaretrue\@openindexfalse#1\@tud@declarefalse%
  \par%
}
%    \end{macrocode}
% Das automatische Setzen von Indexeinträgen über Seitenbreische ist aufgrund 
% \href{https://tex.stackexchange.com/q/384931}{eines Bugs von \app{texindy}} 
% nicht ohne weiteres möglich. Als Workaround werden alle Indexeinträge einer 
% Deklaration via \cs{tud@print@declarationlist} in \cs{tud@declare@index} 
% gespeichert und über den Haken \val{shipout/after} bei der Ausgabe einer 
% Seite erzeugt. Beim Beenden einer Deklaration wird \cs{tud@declare@index} 
% wieder geleert. Dies erzeugt zwar etwas mehr Indexeinträge als eigentlich 
% notwendig, erlaubt \app{texindy} das selbstständige Bilden der gewünschten 
% Seitenbereiche.
%    \begin{macrocode}
\newcommand*\tud@declare@index{}
\AddToHook{shipout/after}{\tud@declare@index}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@index
% \end{macro}^^A \tud@declare@end
% \end{macro}^^A \tud@declare@start
% \begin{macro}{\AP@PresetParser}
% \changes{v2.06p}{2022/09/21}{neu}^^A
% \begin{macro}{\tud@preset@parser@bar}
% \changes{v2.06p}{2022/09/21}{neu}^^A
% \begin{macro}{\tud@preset@parser@colon}
% \changes{v2.06p}{2022/09/21}{neu}^^A
% Mit diesem Makro die für Deklarationen angegebenen Voreinstellungen |d()| 
% im zweiten Argument ausgewertet sowie formatiert und das Ergebnis in das 
% Makro im ersten Argument geschrieben. Dabie ist die angabe von bedingten 
% Voreinstellunen möglich. Das übergebene Format sollte dabei der Form 
% [\meta{Text}|:|]\meta{Einst.}[\verb+|+\meta{Bedingung}|:|\meta{Einst.}]
% enstprechen, wobei die optionalen Teile zu beachten sind. Entfällt die Angabe 
% von \meta{Text} wird stattdessen \enquote{Voreinstellungen} ausgegeben. Der 
% Teil für bedingte Voreinstellungen ist optional. Sollte dieser verwendet 
% werden, muss dies vollständig mit \verb+|+\meta{Bedingung}|:|\meta{Einst.} 
% erfolgen.
%    \begin{macrocode}
\newcommand*\AP@PresetParser[1]{%
  \begingroup
    \let\tud@res@a\@empty
    \def\tud@res@b{#1}%
    \let\tud@res@c\@empty
    \let\tud@res@d\@empty
%    \end{macrocode}
% Zur Überprüfung, ob die Angabe vollständig war, wird ein Zähler verwendet, 
% welcher für jedes benötigte und angegebene Feld dekrementiert wird.
%    \begin{macrocode}
    \trim@spaces@in\tud@res@b%
    \ifx\tud@res@b\@empty\tud@res@cnt=\z@\else\tud@res@cnt=\tw@\fi
    \@expandtwoargs\in@{|}{\expandonce\tud@res@b}%
    \ifin@
      \advance\tud@res@cnt\tw@
      \expandafter\tud@preset@parser@bar\tud@res@b\@nil\tud@res@b\tud@res@c%
    \fi
    \@expandtwoargs\in@{:}{\expandonce\tud@res@b}%
    \ifin@
      \expandafter\tud@preset@parser@colon\tud@res@b\@nil\tud@res@a\tud@res@b%
    \else
      \def\tud@res@a{Voreinstellung}%
    \fi
    \@expandtwoargs\in@{:}{\expandonce\tud@res@c}%
    \ifin@
      \expandafter\tud@preset@parser@colon\tud@res@c\@nil\tud@res@c\tud@res@d%
    \fi
%    \end{macrocode}
% In den temporären Makros sind jetzt in der entsprechenden Reihenfolge die 
% Werte der maximal vier Bestandteile der Angabe zu Voreinstellungen gesetzt.
% Für jedes gefüllte Feld wird bei der Auswertung der Zähler dekrementiert.
%    \begin{macrocode}
    \trim@spaces@in\tud@res@a%
    \trim@spaces@in\tud@res@b%
    \trim@spaces@in\tud@res@c%
    \trim@spaces@in\tud@res@d%
    \ifx\tud@res@b\@empty\else
      \advance\tud@res@cnt\m@ne
      \ifx\tud@res@a\@empty\else\advance\tud@res@cnt\m@ne\fi
      \eappto\tud@res@a{%
        \ifx\tud@res@a\@empty\else:\space\fi
        \noexpand\PValue{\expandonce\tud@res@b}%
      }%
    \fi
    \ifx\tud@res@d\@empty\else
      \advance\tud@res@cnt\m@ne
      \ifx\tud@res@c\@empty\else\advance\tud@res@cnt\m@ne\fi
      \eappto\tud@res@c{%
        \ifx\tud@res@c\@empty\else:\space\fi
        \noexpand\PValue{\expandonce\tud@res@d}%
      }%
    \fi
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def\ProcessedArgument}{%
        \expandonce\tud@res@a%
        \ifx\tud@res@c\@empty\else\noexpand\txb\expandonce\tud@res@c\fi
      }%
      \ifnum\tud@res@cnt>\z@\noexpand\@firstofone\else\noexpand\@gobble\fi
    }%
%    \end{macrocode}
% Sollten nicht alle nötigen Felder gesetzt gewesen sein, erfolgt eine Warnung.
%    \begin{macrocode}
  \tud@res@a{%
    \ClassWarning{tudscrmanual}{%
      Wrong format for (conditional) preset. Given is\MessageBreak%
      `#1'\MessageBreak%
      but should be `prefixtext:preset|condition:preset'\MessageBreak%
      whereas the conditional part needs both elements%
    }%
  }%
}
%    \end{macrocode}
% Die Hilfsmakros, um die Argumentbestandteile an |:| und \verb+|+ zu trennen.
%    \begin{macrocode}
\newcommand*\tud@preset@parser@bar{}
\def\tud@preset@parser@bar#1|#2\@nil#3#4{%
  \def#3{#1}%
  \def#4{#2}%
}
\newcommand*\tud@preset@parser@colon{}
\def\tud@preset@parser@colon#1:#2\@nil#3#4{%
  \def#3{#1}%
  \def#4{#2}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@preset@parser@colon
% \end{macro}^^A \tud@preset@parser@bar
% \end{macro}^^A \AP@PresetParser
% \begin{macro}{\printdeclarationlist}
% \begin{macro}{\tud@print@declarationlist}
% Mit dem Befehl \cs{printdeclarationlist} erfolgt die eingentliche Ausgabe 
% aller Deklarationen. Zweck ist es, mehrere \env{Declaration}-Umgebungen 
% ineinander verschachteln zu können und eine Ausgabe aller auf einmal zu 
% erzeugen. Die durch die ggf. nacheinander folgenden Deklarationen wurden in 
% entsprechenden Listen gesammelt und werden hier jetzt formatiert ausgegben.
%    \begin{macrocode}
\NewDocumentCommand\printdeclarationlist{o d()}{%
  \tud@print@declarationlist[{#1}](#2)%
}
\NewDocumentCommand\tud@print@declarationlist{s o d()}{%
  \tud@setglue\tud@res@glue{\medskipamount}%
  \ifx\tud@declaration@list\relax\else%
    \ifhmode%
      \vskip\tud@res@glue%
    \else%
%    \end{macrocode}
% Im vertikalen modus wird dann einfach vom eigentlich gewünschten Abstand der 
% durch \cs{label} bzw. \cs{index} erzwungene vertikale Freiraum abgezogen. 
% Sollte dann noch ein positiver Wert bestehen, wird dieser einfach zusätzlich
% gesetzt.
%    \begin{macrocode}
      \addpenalty{\@beginparpenalty}%
      \addvspace{\tud@res@glue}%
    \fi%
%    \end{macrocode}
% Die deklarierten Optionen, Umgebungen, Befehle etc. werden umrahmt. Dabei
% erfolgt die Ausgabe mithilfe einer Box, um die Größe des Deklarationsrahmens
% zu speichern und die Änderungsmarkierung am Seitenrand auf die richtige Höhe
% zu platzieren. Da innerhalb von Tabellen der Wert von \cs{baselineskip} auf
% \val{0pt}~gesetzt wird, muss für einen richtig platzierten Link dieser in 
% \cs{HyperRaiseLinkDefault} gesichert werden. Die Größe der Tabelle wird 
% später noch benötigt, deshalb wird diese in einer Box gesetzt.
% \ToDo{Größe der Box direkt annschließend in tud@res@... sichern}[v2.06]
%    \begin{macrocode}
    \@tud@declaretrue\@openindextrue%
    \noindent\null%
    \def\@tempa##1{\ignorespaces##1\tabularnewline}%
    \sbox\z@{%
      \edef\HyperRaiseLinkDefault{\the\dimexpr1\baselineskip\relax}%
      \begin{tabular}{|l|}%
        \hline%
        \forlistloop\@tempa{\tud@declaration@list}%
        \hline%
      \end{tabular}%
    }\usebox\z@%
    \@tud@declarefalse%
%    \end{macrocode}
% Erzeugen der Indexeinträge. Solange die Deklaration aktiv ist, werden diese 
% über den Haken \val{shipout/after} bei der Ausgabe jeder Seite gesetzt.
%    \begin{macrocode}
    \let\tud@declare@index\@empty
    \IfValueT{#2}{%
      \tud@index@csv\tud@declare@index{#2}%
      \tud@declare@index%
    }%
    \global\let\tud@declare@index\tud@declare@index
%    \end{macrocode}
% Danach werden ggf. die Voreinstellungen und Zusatzinformationen in etwas 
% kleinerer Schrift gesetzt.
%    \begin{macrocode}
    \ifboolexpr{bool {@tud@preset@list} or bool {@tud@additional@list}}{%
      \def\@tempa##1{\small\ignorespaces##1\tabularnewline}%
      \hskip1.2em%
      \if@tud@preset@list%
        \begin{tabular}{@{}l@{}}%
          \forlistloop\@tempa{\tud@preset@list}%
        \end{tabular}%
        \hspace{\tabcolsep}%
      \fi%
      \if@tud@additional@list%
        \begin{tabular}{@{}l@{}}%
          \forlistloop\@tempa{\tud@additional@list}%
        \end{tabular}%
      \fi%
    }{}%
%    \end{macrocode}
% Alle für die Deklaration verwendeten Listen werden nach ihrer Abarbeitung 
% zurückgesetzt.
%    \begin{macrocode}
    \global\let\tud@declaration@list\relax%
    \global\let\tud@preset@list\relax%
    \global\let\tud@additional@list\relax%
    \global\@tud@preset@listfalse%
    \global\@tud@additional@listfalse%
%    \end{macrocode}
% Die Einträge in der Änderungsliste sowie die dazugehörige Randnotiz werden
% innerhalb der Deklaration mit \cs{printchangedatlist} erzeugt. Das optionale 
% Argument sorgt für die Verschiebung der Randnotiz auf die richtige Höhe, um 
% den Höhenversatz zwischen Randnotiz und Deklarationsrahmen auszugleichen.
%    \begin{macrocode}
    \print@changedatlist{#1}{%
      \dimexpr(\ht\strutbox+\dp\strutbox-\ht0-\dp0)/2\relax%
    }%
%    \end{macrocode}
% Zum Schluss wird das optionale Argument (in runden Klammern) neben der
% Deklarationsbox ausgegeben.
%    \begin{macrocode}
    \IfValueT{#3}{#3}%
    \par\nobreak%
    \vskip\medskipamount%
    \@afterindentfalse\@afterheading%
  \fi%
}
%    \end{macrocode}
% \end{macro}^^A \tud@print@declarationlist
% \end{macro}^^A \printdeclarationlist
% \begin{macro}{\InlineDeclaration}
% \changes{v2.06p}{2022/09/20}{neu}^^A
% \begin{macro}{\Inline@Declaration}
% \changes{v2.06p}{2022/10/06}{neu}^^A
% Mit dem Befehl \cs{InlineDeclaration} kann eine Deklaration auch im Fließtext 
% erfolgen, ohne das hierfür die tabellarische Darstellung gewählt wird. 
% Vielmehr erscheint der Entitätsbefehl in seiner gewöhnlichen Fließtextform, 
% allerdings werden zusätzlich ein Anker und ein Deklarationsindexeintrag 
% erstellt. Die Sternform erzeugt hierbei einen untergeordneten Indexeintrag. 
% Das optionale Argument kann für Änderungsnotizen genutzt werden.
%    \begin{macrocode}
\NewDocumentCommand\InlineDeclaration{s o m}{%
  \Inline@Declaration[{#2}]{#3}[\IfBooleanTF{#1}{-2}{-1}]%
}
\NewDocumentCommand\Inline@Declaration{o m !O{-1}}{%
  \tud@declare@special@start[{#1}]{#2}{#3}%
  \printchangedatlist%
  \tud@declare@special@end{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}^^A \Inline@Declaration
% \end{macro}^^A \InlineDeclaration
% \begin{environment}{DeclareEntity}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die Umgebung \env{DeclareEntity} wird verwendet, wenn eine Entität 
% dokumentiert wird. Mit \cs{tud@declare@special@start} werden Label, 
% Indexeintrag und gegebenenfalls Änderungsnotizen erzeugt. Die Verwendung von 
% \env{Entity} führt dazu, dass die innerhalb von \env{DeclareEntity} erzeugten 
% Indexeinträge und Links standardmäßig auf die deklarierte Entität verweisen.
%    \begin{macrocode}
\NewDocumentEnvironment{DeclareEntity}{m o}{%
  \tud@declare@special@start*[{#2}]{#1}{3}%
  \printchangedatlist*%
  \begin{Entity}{#1}%
}{%
  \end{Entity}%
  \tud@declare@special@end{#1}{3}%
}
%    \end{macrocode}
% \end{environment}^^A DeclareEntity
% \begin{environment}{DeclareEntity*}
% \changes{v2.02}{2014/10/09}{neu}^^A
% \changes{v2.05}{2015/08/04}{Indexaufteilung/-markup für Klassen und Pakete}^^A
% Die Sternversion der Umgebung \env{DeclareEntity*} ist für die vereinfachte 
% Deklaration von Klassen, Paketen etc. gedacht, bei denen keine Ausgabe 
% sondern lediglich Hyperlink, Indexeintrag und Änderungsnotiz erzeugt werden 
% sollen. Hierbei werden die beiden Befehle \cs{tud@declare@special@start} und 
% \cs{tud@declare@special@end} genutzt, wobei der Anker des erzeugten Labels
% nicht erhöht sondern auf der aktuellen Grundlinie erzeugt wird.
%    \begin{macrocode}
\NewDocumentEnvironment{DeclareEntity*}{m o}{%
  \tud@declare@special@start[{#2}]{#1}{2}%
}{%
  \tud@declare@special@end{#1}{2}%
}
%    \end{macrocode}
% \end{environment}^^A DeclareEntity*
% \begin{macro}{\tud@declare@special@start}
% \changes{v2.05}{2015/11/01}{neu}^^A
% \begin{macro}{\tud@declare@special@end}
% \changes{v2.05}{2015/11/01}{neu}^^A
% Die beiden Befehle dienen zur vereinfachten Deklaration. Sollte eine Ausgabe 
% erfolgen, so erfolgt diese im Fließtext und nicht tabelarisch. In jedem Fall 
% werden Hyperlink, Indexeintrag und Änderungsnotiz erzeugt. Das optionale
% Argument dient einem Änderungseintrag, das erste obligaotrische gilt der
% eigentlichen Deklaration, das zweite zur Anpassung von \cs{tud@declare@num}, 
% mit welchem das Verhalten für das Erzeugen von Ausgabe und Label gesteuert 
% wird. Die Sternvariante wird von der Umgebung \env{DeclareEntity} 
% genutzt, um Einträge in der Änderungsliste in den allgemeinen Teil zu
% schreiben.
%    \begin{macrocode}
\NewDocumentCommand\tud@declare@special@start{s r[] m m}{%
  \tud@declare@num=#4\relax%
  \@tud@declaretrue%
  \IfBooleanTF{#1}{%
    \Changed@At@CreateList{#2}(#3)%
  }{%
    \Changed@At@CreateList{#2}[{#3}]%
  }%
  \@openindextrue#3%
  \@tud@declarefalse%
  \tud@declare@num=\z@\relax%
}
\newcommand*\tud@declare@special@end[2]{%
  \ifx\tud@changedat@list\relax\else%
    \ClassError{tudscrmanual}{\string\printchangedatlist\space is missing}{%
      \string\tud@changedat@list\space is not empty. Did you\MessageBreak%
      forget to print this list with \string\printchangedatlist?%
    }%
  \fi%
  \tud@declare@num=#2\relax%
  \@tud@declaretrue\@openindexfalse#1\@tud@declarefalse%
  \tud@declare@num=\z@\relax%
}
%    \end{macrocode}
% \end{macro}^^A \tud@declare@special@end
% \end{macro}^^A \tud@declare@special@start
%
% \subsubsection{Tabelle für mehrsprachigen Bezeichner}
%
% \begin{macro}{\TermTable}
% \begin{macro}{\Term@Table}
% \begin{macro}{\Term@@Table}
% Für sprachabhängige Bezeichner wird zusätzlich der Befehl \cs{TermTable} 
% definiert, dem eine kommaseparierte Liste übergeben werden kann. Anhand 
% dieser Liste werden die enthalten Begriffe für die Sprachen Deutsch und
% English in einer Tabelle ausgegeben. Die Sternversion dieses Befehls nutzt
% dafür die \env{tabularx}-Umgebung. Für diese kann ein zweites Argument
% angegeben werden, welches die gewünschte Breite der Tabelle angibt.
% \ToDo{replace \cs{selectlanguage} with \env{otherlanguage}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\TermTable{o m}{%
  \ifhmode\par\fi%
  \vskip\medskipamount%
  \@afterindentfalse\@afterheading%
  \begingroup%
    \IfValueTF{#1}{%
      \begin{tabularx}{\dimexpr\glueexpr#1\relax\relax}{lXX}%
        \Term@Table{-\ht\strutbox}{#2}%
      \end{tabularx}%
    }{%
      \begin{tabular}{lll}%
        \Term@Table{\z@}{#2}%
      \end{tabular}%
    }%
  \endgroup%
  \par\addvspace{\medskipamount}%
}
\newcommand*\Term@Table[2]{%
  \toprule%
  \textbf{Bezeichner} & \textbf{Deutsch} & \textbf{Englisch}\tabularnewline%
  \midrule%
  \forcsvlist{\Term@@Table{#1}}{#2}%
  \bottomrule%
}
\newcommand*\Term@@Table[2]{%
  \Term'none'{#2} & %
  \tud@if@strempty{\csuse{#2}}{\PName{leer}}{\csuse{#2}} & %
  \selectlanguage{english}\vspace*{#1}%
  \tud@if@strempty{\csuse{#2}}{\PName{empty}}{\csuse{#2}}\tabularnewline%
}
%    \end{macrocode}
% \end{macro}^^A \Term@@Table
% \end{macro}^^A \Term@Table
% \end{macro}^^A \TermTable
%
% \subsubsection{Auflistung gültiger Werte von Optionen und Parametern}
%
% \begin{environment}{DeclareValues}
% \begin{macro}{\tud@val@index}
% \changes{v2.06p}{2022/10/09}{neu}^^A
% \begin{macro}{\tud@val@declare}
% \changes{v2.06p}{2022/10/09}{neu}^^A
% Die Umgebung \env{DeclareValues} dient zum Benennen möglicher Werte für 
% einen bestimmten Schlüssel. Im Handbuch kommt diese Liste vor allem bei 
% Optionen aber ggf. auch bei bestimmten Befehls- und Optionsparametern zum 
% Einsatz. Diese ummantelt die Liste \env{Declare@Values}, damit zum einen 
% ein optionales Argument für Indexeinträge zum Einsatz kommen kann~-- das 
% Vorgehen ist äquivalent zu \cs{tud@declare@index}~-- und zum anderen wird die
% zu beschreibende Option bzw. das Makro im \emph{obligatorischen} Argument 
% angegeben werden kann und in \cs{tud@val@declare} gesichert wird.
%    \begin{macrocode}
\newcommand*\tud@val@index{}
\AddToHook{shipout/after}{\tud@val@index}
\newcommand*\tud@val@declare{}
\NewDocumentEnvironment{DeclareValues}{o m}{%
  \begin{Declare@Values}%
  \let\tud@val@index\@empty
  \IfValueT{#1}{%
    \tud@index@csv\tud@val@index{#1}%
    \tud@val@index%
  }%
  \def\tud@val@declare{#2}%
}{%
  \ifvmode\removelastskip\else\@killglue\fi
  \tud@val@index%
  \end{Declare@Values}%
}
\NoIndentAfterEnv{DeclareValues}
%    \end{macrocode}
% \end{macro}^^A \tud@val@declare
% \end{macro}^^A \tud@val@index
% \end{environment}^^A DeclareValues
% \begin{environment}{Declare@Values}
% \begin{macro}{\itemval}
% \begin{macro}{\tud@val@item}
% \begin{macro}{\tud@val@before}
% \begin{macro}{\tud@val@format}
% \changes{v2.06p}{2022/10/09}{neu}^^A
% \begin{macro}{\tud@val@main}
% \changes{v2.06p}{2022/10/09}{neu}^^A
% \begin{macro}{\tud@val@addon}
% \changes{v2.06p}{2022/10/09}{neu}^^A
% Innerhalb von \env{DeclareValues} kann mit \cs{itemval} das resultierende 
% Verhalten für die Wertzuweisung an eine Option respektive einen Parameter 
% beschrieben werden. Mit der Sternversion lässt sich dabei die Einstellung 
% für den Säumniswert hervorheben.
% \ToDo{Änderungsnotizen über Argument auf gleiche Höhe wie Label}[v2.06]
%    \begin{macrocode}
\newcommand*\itemval{}
\AtBeginDocument{\undef\itemval}
\newcommand*\tud@val@before{%
  \let\itemval\tud@val@item%
  \let\NR@gettitle\@gobble%
  \tud@setdim\tud@dim@changedatvskip{-1\baselineskip}%
}
\tud@list@create[before=\tud@val@before]{Declare@Values}{description}{1}
%    \end{macrocode}
% Im obligatorischen Argument können die möglichen Werte 
% einer Option oder eines Parameters angegeben werden. Sind mehrere Werte
% gleichbedeutend verwendbar, so sind diese mit Komma zu trennen, wobei der 
% erste angegebene Wert für den Untereintrag in den Index verwendet wird. Das 
% erste optionale Argument kann genutzt werden, falls sich der Säumniswert
% beispielsweise für eine Klasse unterscheidet.
%    \begin{macrocode}
\NewDocumentCommand\tud@val@item{s m d() d<>}{%
  \begingroup
%    \end{macrocode}
% Zunächst werden die Werte aus dem obligatorischen Argument formatiert. Der 
% erste Eintrag wird für den Indexeintrag benötigt und in \cs{tud@val@main} 
% gesichert, alle weiteren Einträge werden formatiert in 
% \cs{tud@val@addon} gespeichert und lediglich im Fließtext aufgelistet.
%    \begin{macrocode}
    \tud@val@format\tud@val@main\tud@val@addon{#1}{#2}%
%    \end{macrocode}
% Erstellen des Säumniswertes aus optionalen Argumenten.
%    \begin{macrocode}
    \let\tud@res@d\@empty%
    \IfValueTF{#3}{%
      \appto\tud@res@d{\suffix{S\"aumniswert f\"ur #3}}%
    }{%
      \IfBooleanT{#1}{\appto\tud@res@d{\suffix{S\"aumniswert}}}%
    }%
    \IfValueT{#4}{\appto\tud@res@d{\suffix{#4}}}%
%    \end{macrocode}
% Die in \cs{tud@val@declare} gespeicherte, zu beschreibende Entität und der 
% erste im optionalen Argument angegebene Wert werden verwendet, um ein Label 
% zu erstellen.
%    \begin{macrocode}
    \tud@lbl@@get\tud@lbl@tmp{{\tud@val@declare}=\tud@val@main=(\tud@ety@crnt)}%
%    \end{macrocode}
% Jetzt beginnt die Formatierung der Ausgabe. Zuerst wird die zu beschreibende 
% Entität in der internen Repräsentation in \cs{tud@res@a} abgelegt. Danach 
% wird der zuerst verwendete Wert eingefügt, wobei dieser für die Sternversion 
% als Säumniswert mit \cs{emph} hervorgehoben wird. Zuletzt wird dafür Sorge 
% getragen, dass auf den anschließend erzeugten Eintrag selbst kein Hyperlink 
% erzeugt wird und dieser im passenden Index fettmarkiert erscheint.
%    \begin{macrocode}
    \Markup@Inner@Get\tud@res@a{\tud@val@declare}%
    \edef\tud@res@b{\IfBooleanTF{#1}{\emph}{\@firstofone}{\tud@val@main}}%
    \Markup@Replace\tud@res@a=\tud@res@b='none'|!|{\tud@res@a}%
    \Markup@Outer@Get\tud@res@a{\tud@res@a}%
%    \end{macrocode}
% Abschließend erfolgt die Ausgabe des generierten Eintrags mit \cs{item}. 
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup
      \noexpand\item[{%
        \noexpand\tud@lbl@declare{\tud@lbl@tmp}%
        \expandonce\tud@res@a\expandonce\tud@val@addon\expandonce\tud@res@d%
      }]%
    }%
  \tud@res@a%
  \strut\ignorespaces%
}
%    \end{macrocode}
% Mit diesem Makro wird die kommaseparierte Liste möglicher Werte im letzten 
% Argument formatiert.
%    \begin{macrocode}
\newcommand*\tud@val@format[4]{%
  \begingroup
    \let\tud@res@d\@empty%
    \protected@edef\tud@res@a{#4}%
%    \end{macrocode}
% Die kommaseparierte Liste wird nach boolschen Werten durchsucht. Diese werden 
% bei der Ausgabe immer als erstes gesetzt.
%    \begin{macrocode}
    \@for\tud@res@a:=\tud@res@a\do{%
      \trim@spaces@in\tud@res@a%
      \ifx\tud@res@a\@empty\else%
        \TUD@set@ifkey{}{@tempswa}{\tud@res@a}%
        \ifx\FamilyKeyState\FamilyKeyStateProcessed%
          \if@tempswa%
            \preto\tud@res@d{true,on,yes,}%
          \else%
            \preto\tud@res@d{false,off,no,}%
          \fi%
        \else%
          \eappto\tud@res@d{,\expandonce\tud@res@a}%
        \fi%
      \fi%
    }%
    \let\tud@res@a\@empty%
    \let\tud@res@b\@empty%
    \def\do##1{%
      \def\tud@res@d{##1}%
      \ifx\tud@res@d\@empty\else%
        \ifx\tud@res@a\@empty%
          \let\tud@res@a\tud@res@d%
        \else%
%    \end{macrocode}
% Alle weiteren Werte werden gegebenenfalls mit \cs{emph} hervorgehoben.
%    \begin{macrocode}
          \eappto\tud@res@b{%
            \noexpand\PValue{\slc}%
            \IfBooleanTF{#3}{\noexpand\emph}{\@firstofone}{%
              \noexpand\PValue{\expandonce\tud@res@d}%
            }%
          }%
        \fi%
      \fi%
    }%
    \expandafter\docsvlist\expandafter{\tud@res@d}%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\def#1}{\expandonce\tud@res@a}%
      \unexpanded{\def#2}{\expandonce\tud@res@b}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@val@addon
% \end{macro}^^A \tud@val@main
% \end{macro}^^A \tud@val@format
% \end{macro}^^A \tud@val@before
% \end{macro}^^A \tud@val@item
% \end{macro}^^A \itemval
% \end{environment}^^A Declare@Values
%
% \subsubsection{Kurzbeschreibung von Paketen}
%
% \begin{environment}{DeclarePackages}
% \begin{macro}{\tud@pkg@index}
% \changes{v2.06p}{2022/10/05}{neu}^^A
% Ähnlich wie für die Auflistung von Werten eines Schlüssels wird auch mit der 
% Charakterisierung von Paketen verfahren. Diese werden in der Auflistung 
% \env{Declare@Packages} speziell gekennzeichnet. Um über ein optionales 
% Argument einen oder mehrere Indexeinträge angeben zu können, wird diese 
% Umgebung von \env{DeclarePackages} ummantelt, wobei das Vorgehen äquivalent 
% zu \cs{tud@declare@index} ist.
%    \begin{macrocode}
\newcommand*\tud@pkg@index{}
\AddToHook{shipout/after}{\tud@pkg@index}
\NewDocumentEnvironment{DeclarePackages}{o}{%
  \begin{Declare@Packages}%
  \let\tud@pkg@index\@empty
  \IfValueT{#1}{%
    \tud@index@csv\tud@pkg@index{#1}%
    \tud@pkg@index%
  }%
}{%
  \ifvmode\removelastskip\else\@killglue\fi
  \tud@pkg@index%
  \end{Declare@Packages}%
}
\NoIndentAfterEnv{DeclarePackages}
%    \end{macrocode}
% \end{macro}^^A \tud@pkg@index
% \end{environment}^^A DeclarePackages
% \begin{environment}{Declare@Packages}
% \begin{macro}{\itempkg}
% \changes{v2.02}{2014/10/09}{optionales Argument für CTAN-Link}^^A
% \changes{v2.04}{2015/03/12}{optionales Argument für weitere Pakete}^^A
% \begin{macro}{\tud@pkg@item}
% \begin{macro}{\tud@pkg@before}
% \begin{macro}{\tud@pkg@declare}
% \changes{v2.06p}{2022/10/05}{neu}^^A
% \begin{macro}{\tud@pkg@@declare}
% \changes{v2.06p}{2022/10/05}{neu}^^A
% Innerhalb von \env{Declare@Packages} kann mit \cs{itempkg} ein oder mehrere
% Pakete erläutert werden. Des Weiteren werden Textanker definiert, auf die 
% in der Dokumentation gegebenenfalls automatisch verlinkt wird.
%    \begin{macrocode}
\newcommand*\itempkg{}
\AtBeginDocument{\undef\itempkg}
\newcommand*\tud@pkg@before{%
  \let\itempkg\tud@pkg@item%
  \let\NR@gettitle\@gobble%
}
\tud@list@create[before=\tud@pkg@before]{Declare@Packages}{description}{2}
%    \end{macrocode}
% Im obligatorischen Argument werden die namentlich genannten Pakete deklariert 
% und ausgegeben. Mit |(|\meta{Markup}|)| lassen sich auch andere Entitäten 
% angeben und in gleicher Weise deklarieren, |<|\meta{Markup}|>| unterdrückt 
% die Ausgabe erzeugt allerding Textanker und Indexeinträge. Das letzte 
% optionale Argument akzeptiert eine Änderungsnotiz.
%    \begin{macrocode}
\NewDocumentCommand\tud@pkg@item{m d() d<> o d''}{%
  \begingroup
    \let\tud@res@a\@empty
    \forcsvlist{\tud@pkg@declare\tud@res@a<#5>}{#1}%
    \IfValueT{#2}{%
      \forcsvlist{\tud@pkg@@declare\tud@res@a<#5>}{#2}%
    }%
    \IfValueT{#3}{%
      \forcsvlist{\tud@pkg@@declare*\tud@res@a<#5>}{#3}%
    }%
%    \end{macrocode}
% Paketbeschreibungen erhalten einen separaten Abschnitt in der Änderungsliste.
% Zunächst wird die Ausgabe der gegebenen Pakete in \cs{tud@res@c} definiert.
%    \begin{macrocode}
    \let\tud@res@b\@empty
    \IfValueT{#4}{%
      \let\tud@res@c\@empty
      \def\do##1{%
        \eappto\tud@res@c{%
          \ifx\tud@res@c\@empty\else\slc\fi
          \noexpand\Package{\trim@spaces{##1}}%
        }%
      }%
      \docsvlist{#1}%
%    \end{macrocode}
% Danach werden die Änderungsnotizen ausgewertet. Wurde lediglich eine Version 
% ohne die Spezifizierung eines Textes angegeben, wird einfach die zuvor 
% definierte Liste der Pakete ausgegeben.
%    \begin{macrocode}
      \def\do##1{%
        \ifx\tud@res@b\@empty\else\appto\tud@res@b{;}\fi
        \appto\tud@res@b{##1}%
        \in@{:}{##1}%
        \ifin@\else
          \eappto\tud@res@b{:\expandonce\tud@res@c}%
        \fi
      }%
      \dossvlist{#4}%
      \edef\tud@res@b{%
        \noexpand\Changed@At@Special[-1\baselineskip]%
          {Paketbeschreibungen}<sec:packages:recommended>%
          {\expandonce\tud@res@b}%
      }%
    }%
%    \end{macrocode}
% Die Deklarationen werden durchgeführt und ausgegeben, die Änderungsnotizen 
% werden erzeugt und die Liste der aktuell deklarierten Label für diesen 
% Eintrag geändert.
% \ToDo{set \cs{@currentlabelname} manually?}[v2.06]
%    \begin{macrocode}
    \edef\tud@res@a{%
      \endgroup
      \noexpand\item[{\expandonce\tud@res@a}]%
      \noexpand\strut\expandonce\tud@res@b%
    }%
  \tud@res@a%
  \ignorespaces%
}
%    \end{macrocode}
% Hiermit erfolgt die eigentliche Deklaration (Textanker, Indexeinträg) und 
% gegebenenfalls die Ausgabe.
%    \begin{macrocode}
\NewDocumentCommand\tud@pkg@declare{m r<> m}{%
  \tud@pkg@@declare{#1}<#2>'url'{\Package{#3}}%
}
\NewDocumentCommand\tud@pkg@@declare{s m r<> d'' >{\TrimSpaces}m}{%
  \eappto#2{\IfBooleanF{#1}{\ifx#2\@empty\else\slc\fi}}%
  \begingroup
    \Markup@Inner@Get\tud@res@a{#5}%
    \Markup@Replace\tud@res@a'#4'{\tud@res@a}%
    \Markup@Outer@Get\tud@res@a{\tud@res@a}%
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\appto#2}{\Inline@Declaration\IfBooleanT{#1}{*}{\tud@res@a}}%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@pkg@@declare
% \end{macro}^^A \tud@pkg@declare
% \end{macro}^^A \tud@pkg@before
% \end{macro}^^A \tud@pkg@item
% \end{macro}^^A \itempkg
% \end{environment}^^A Declare@Packages
%
% \iffalse
%</class>
% \fi
%
% \subsection{Erläuterungen und weiterführende Ergänzungen}
%
% Definition einiger Makros und Umgebungen für ein zweckmäßiges Markup.
%
% \begin{macro}{\Path}
% Zur Ausgabe von beliebigen Pfaden ohne zusätzliches Markup.
%    \begin{macrocode}
\NewDocumentCommand\Path{>{\AP@Underscore}m}{\mbox{\textttit{#1}}}
%    \end{macrocode}
% \end{macro}^^A \Path
%
% \begin{macro}{\GitHubFile}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Hiermit kann eine über ein GitHub-Repository zum Download bereitgestellte 
% Datei zusätzlich im Index eintragen und~-- falls \val{!} als Argument genutzt 
% wurde~-- mit einem Label deklarieren. Die optionalen Argumente werden an 
% \cs{GitHubDownload} respektive \cs{File} durchgereicht.
% \ToDo{invalid argument for \pkg{tudscrmanual}}[v2.06]
%    \begin{macrocode}
\NewDocumentCommand\GitHubFile{s t! d<> d'' d() m}{%
  \begingroup
    \def\tud@res@a{\File}%
    \IfBooleanT{#1}{\appto\tud@res@a{*}}%
    \appto\tud@res@a{(#5){#6}}%
%<*class>
    \IfBooleanT{#2}{\edef\tud@res@a{\InlineDeclaration{\expandonce\tud@res@a}}}%
%</class>
    \edef\tud@res@a{%
      \endgroup
      \unexpanded{\GitHubDownload<#3>'#4'}[\expandonce\tud@res@a]%
    }%
  \tud@res@a{#6}%
}
%    \end{macrocode}
% \end{macro}^^A \GitHubFile
%
% \begin{macro}{\TUDScriptTutorial}
% \changes{v2.02}{2014/08/22}{neu}^^A
% \changes{v2.06p}{2022/11/13}{Reimplementierung}^^A
% \begin{macro}{\tud@tutorial@list}
% \changes{v2.06p}{2022/11/13}{neu}^^A
% \begin{macro}{\tud@tutorial@compile}
% \changes{v2.06p}{2022/11/13}{neu}^^A
% \begin{macro}{\tud@bash@write}
% Die gegebenenfalls notwendige Kompilierung und die Referenzierung eines 
% \TUDScript-Tutorials aus dem Handbuch erfolgt mit \cs{TUDScriptTutorial}. 
% Um mit verschachtelten Aufrufen von \app{pdflatex} umgehen zu können, wird 
% das ganze Prozedere in ein Skript ausgelagert. Somit können die Aufrufe von 
% \app{pdflatex} für die Tutorials aus dem entsprechenden Ordner und mit den 
% notwendigen Optionen erfolgen.
%
% Da die Tutorials gegebenenfalls sich gegenseitig referenzieren, werden diese 
% nicht nacheinander sondern schrittweise kompiliert. Hierfür werden die zu 
% erzeugenden Tutorials in die Liste \cs{tud@tutorial@list} geschrieben und 
% nach dem Handbuch kompiliert.
% \ToDo{generate via \app{make}}[v2.06]
% \ToDo{direkter Link im Index oder auf label im Dokument?!}[v2.06]
%    \begin{macrocode}
%<*class>
\tud@newwrite\tud@bash@write
\newcommand*\tud@tutorial@list{}
\newrobustcmd*\TUDScriptTutorial[1]{%
  \filemodCmp{tutorials/#1.pdf}{tutorials/#1.tex}{}{%
    \tud@unique@xadd\tud@tutorial@list{#1}%
    \tud@file@check{tutorials/#1.pdf}%
  }%
  \href[pdfnewwindow]{tutorials/#1.pdf}{\Tutorial'none'(\tud@ety@dflt){#1}}%
}
\AfterReadingMainAux{%
  \ifnum\pdf@shellescape=\@ne\relax
    \ifx\tud@tutorial@list\@empty\else\tud@tutorial@compile\fi
  \fi
}%
\newrobustcmd*\tud@tutorial@compile{%
  \immediate\openout\tud@bash@write=tutorials.sh\relax%
  \def\tud@res@a##1{\immediate\write\tud@bash@write{##1}}%
  \tud@res@a{cd tutorials}%
  \let\tud@res@b\@empty
  \ifdefined\tudfinalflag\appto\tud@res@b{\def\noexpand\tudfinalflag{}}\fi
  \ifdefined\tudprintflag\appto\tud@res@b{\def\noexpand\tudprintflag{}}\fi
  \edef\tud@res@b##1{%
    \expandonce\tud@res@b\unexpanded{\noexpand\input}{##1.tex}%
  }%
%    \end{macrocode}
% Zuerst wird jedes Tutorial einmal kompiliert und~-- falls vorhanden~-- das 
% Literaturverzeichnis erstellt. Das von \app{biber} erstellte Log ist etwas
% vermüllt, weshalb stattdessen die erzeugte Ausgabe geloggt wird.
%    \begin{macrocode}
  \def\do##1{%
    \tud@res@a{\tud@latex@ext -shell-escape "\tud@res@b{##1}"}%
    \def\tud@res@c{biber --nolog -V ##1 > ##1.blg\space2>\string&1}%
    \ifwindows
      \tud@res@a{if exist ##1.bcf \tud@res@c}%
    \else
      \tud@res@a{[ -f ##1.bcf ] && \tud@res@c}%
    \fi
    \tud@res@a{\tud@latex@ext "\tud@res@b{##1}"}%
  }%
  \dolistloop{\tud@tutorial@list}%
%    \end{macrocode}
% Die Glossare werden ebenso erzeugt. Dies wird mehrmals ausgeführt, weil sich 
% durch deren Einbindung gegebenenfalls die Seitenangaben ändern. Das Erzeugen 
% der Indexe erfolgt via \file{-{}-shell-escape} durch \pkg{tudscrmanual}.
%    \begin{macrocode}
  \def\tud@res@c##1{%
    \ifwindows
      \tud@res@a{if exist ##1.ist makeglossaries ##1}%
      \tud@res@a{if exist ##1.xdy makeglossaries ##1}%
    \else
      \tud@res@a{[ -f ##1.ist ] && makeglossaries ##1}%
      \tud@res@a{[ -f ##1.xdy ] && makeglossaries ##1}%
    \fi
  }%
  \def\do##1{%
    \tud@res@c{##1}%
    \tud@res@a{\tud@latex@ext -shell-escape "\tud@res@b{##1}"}%
  }%
  \dolistloop{\tud@tutorial@list}%
  \dolistloop{\tud@tutorial@list}%
  \dolistloop{\tud@tutorial@list}%
  \immediate\closeout\tud@bash@write%
%    \end{macrocode}
% Hier erfolgt die Unterscheidung der Befehle für die unterschiedlichen OS.
%    \begin{macrocode}
  \ifwindows
    \ShellEscape{rename tutorials.sh tutorials.bat}%
    \ShellEscape{tutorials.bat}%
    \ShellEscape{del tutorials.bat}%
  \else
    \ShellEscape{bash tutorials.sh}%
    \ShellEscape{rm tutorials.sh}%
  \fi
}
%</class>
%    \end{macrocode}
% Der Befehl für die Querverweise innerhalb von Tutorials.
% \ToDo{\app{make} ggf. zum Erstellen der Links mehrmals aufrufen?!}[v2.06]
%    \begin{macrocode}
%<*package>
\newrobustcmd*\TUDScriptTutorial[1]{%
  \IfFileExists{#1.pdf}{}{\PackageWarning{tudscrmanual}{`#1.pdf' is missing}}%
  \href[pdfnewwindow]{#1.pdf}{\Tutorial'none'(\tud@ety@dflt){#1}}%
}
%</package>
%    \end{macrocode}
% \end{macro}^^A \tud@tutorial@compile
% \end{macro}^^A \tud@tutorial@list
% \end{macro}^^A \tud@bash@write
% \end{macro}^^A \TUDScriptTutorial
%
% \subsubsection{Tabelle mit abschließender Mehrspaltenzellen}
%
% \begin{environment}{tabularm}
% \begin{macro}{\tabularm@allcolumnpar}
% \begin{macro}{\tabularm@box}
% \begin{macro}{\tabularm@num}
% \begin{length}{\tabularm@wd}
% Die Umgebung \env{tabularm} ist eine Erweiterung der \env{tabular}-Umgebung.
% In dieser wird die Breite der zu setzenden Tabelle mit Hilfe der Box 
% \cs{tabularm@box} in \cs{tabularm@wd} gespeichert. Anschließend kann mit dem
% Befehl \cs{allcolumnpar} eine Zeile über alle Spalten der Tabelle ausgegeben 
% werden. Dabei ist das zu übergebende Argument die Anzahl der zu erzeugenden, 
% linksbündigen Spalten.
%    \begin{macrocode}
\newsavebox\tabularm@box
\tud@newdim\tabularm@wd
\newcommand*\tabularm@num{1}
\NewEnviron{tabularm}[1]{%
  \begin{lrbox}{\tabularm@box}%
    \let\allcolumnpar\@gobble%
    \begin{tabular}{*{#1}l}\BODY\end{tabular}%
  \end{lrbox}%
  \tud@setdim\tabularm@wd{\wd\tabularm@box}%
  \def\tabularm@num{#1}%
  \let\allcolumnpar\tabularm@allcolumnpar%
  \begin{tabular}{*{#1}l}\BODY\end{tabular}%
}
\newcommand*\tabularm@allcolumnpar[1]{%
  \multicolumn{\tabularm@num}{@{}p{\tabularm@wd}@{}}{#1}%
}
%    \end{macrocode}
% \end{length}^^A \tabularm@wd
% \end{macro}^^A \tabularm@box
% \end{macro}^^A \tabularm@num
% \end{macro}^^A \tabularm@allcolumnpar
% \end{environment}^^A tabularm
%
% \subsubsection{Umgebung für die Angabe eines Beispiels}
%
% \begin{environment}{Example}
% \begin{environment}{Example*}
% Diese Umgebung wird für die exemplarische Erläuterung von bestimmten Aspekten 
% im Handbuch verwendet. Wenn dafür ein Quelltextauszug nötig ist, kann 
% innerhalb dieser die \env{Code}-Umgebung genutzt werden. Die Sternversion 
% unterdrückt dabei das Zurücksetzen des eigentlich entfernten vertikalen 
% Abstandes.
%    \begin{macrocode}
\newenvironment{Example}{\csuse{Example*}}{%
  \csuse{endExample*}%
  \addvspace{-\topsep}%
}
\newenvironment{Example*}{%
  \labeling{{\usekomafont{disposition}{Beispiel:\nobreakspace}}}%
  \item[{\usekomafont{disposition}{Beispiel:\nobreakspace}}]%
}{%
  \endlabeling%
}
%    \end{macrocode}
% \end{environment}^^A Example*
% \end{environment}^^A Example
%
% \subsection{Darstellung und Einbindung von \Lettering{LaTeX}-Quelltexten}
%
% Hier werden allerlei Befehle und Umgebungen für die Formatierung, Ausgabe und 
% Ausführung von Quelltextauszügen mit dem Paket \pkg{listings} definiert.
%
% Für den Anwender werden im \TUDScript-Bundle einige Tutorials mit Hinweisen 
% zur Nutzung von \Lettering{LaTeX} bereitgestellt. Innerhalb dieser werden 
% Auszüge von Quelltexten verwendet und erläutert. Zum einen soll die 
% Möglichkeit geschaffen werden, diese gesammelt am Ende eines Tutorials für 
% ein Copy"~\&"~Paste"~Beispiel zu verwenden. Andererseits soll auch das 
% sofortige Ausführen des beschriebenen Quelltextauszuges direkt im Tutorial 
% möglich sein.
%
% Dafür werden im Folgenden die Umgebungen \env{Preamble}, \env{Trunk} und
% \env{Hint} sowie daraus abgeleitet Varianten definiert, womit sich die Angabe
% und Erläuterung der Quelltexte im Tutorial logisch strukturieren lässt und
% dennoch die notwendige Ordnung dieser für das Copy"~\&"~Paste"~Beispiel
% aufrechterhalten werden kann. Hierfür zeichnen die beiden Umgebungen
% \env{Preamble} und \env{Trunk} und deren Derivate verantwortlich. Die
% Umgebung \env{Hint} steht für zusätzliche Erläuterungen bereit, welche jedoch
% nicht in das Copy"~\&"~Paste"~Beispiel übernommen werden.
%
% \begin{environment}{Code}
% Folgend werden Befehle und Umgebungen für die Darstellung von Quelltexten im 
% Handbuch definiert. Mit dieser Umgebung können kurze Quelltextbeispiele 
% ausgegeben werden. Sicherlich sinnvoll ist, die \env{Code}-Umgebung innerhalb
% von \env{Example} oder \env{quoting} zu verwenden, um den Quelltext etwas
% abzuheben.
% \ToDo{
%   \env{quoting} loswerden, automatischer Einzug, an tutorial angleichen
% }[v2.06]
%    \begin{macrocode}
\lstnewenvironment{Code}[1][]{\lstset{style=tudscr,#1}}{}
\NoIndentAfterEnv{Code}
%    \end{macrocode}
% Innerhalb der Umgebung \env{Code} wird \cs{@currentHref} unerwünschter Weise
% geändert. Um dies zu vermeiden, wird dieser Befehl gesichert und anschließend
% zurückgesetzt.
%    \begin{macrocode}
\BeforeBeginEnvironment{Code}{\global\let\tud@currentHref\@currentHref}
\AfterEndEnvironment{Code}{\global\let\@currentHref\tud@currentHref}
%    \end{macrocode}
% \end{environment}^^A Code
%
% \iffalse
%<*package>
% \fi
%
% \begin{macro}{\tud@read}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@write@a}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\tud@write@b}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{macro}{\tud@read@to@outputstream}
% \changes{v2.02}{2014/12/16}{neu}^^A
% Für die Tutorials werden ein Eingabe- sowie zwei Ausgabestreams benötigt.
%    \begin{macrocode}
\tud@newwrite\tud@write@a
\tud@newwrite\tud@write@b
\tud@newread\tud@read
%    \end{macrocode}
% Mit \cs{tud@read@to@outputstream} wird der Inhalt der Datei aus dem ersten 
% Argument in den Ausgabestream des zweiten Argumentes geschrieben.
%    \begin{macrocode}
\newcommand*\tud@read@to@outputstream[2]{%
  \begingroup
    \set@curr@file{#1}%
    \endlinechar=\m@ne\relax%
    \openin\tud@read="\@curr@file" %
%    \end{macrocode}
% Der Schalter \cs{if@tud@res@swa} wird genutzt, um unnötige Leerzeilen in der 
% Ausgabedatei zu entfernen. Wurde eine nicht leere Zeile gefunden, wird diese 
% auf jeden Fall geschrieben, indem \cs{@tud@res@swatrue} gesetzt wird. Eine 
% leere Zeile wird~-- bis auf den Sonderfall, dass es sich um die letzte Zeile 
% in der Datei handelt~-- zunächst nicht weiter beachtet. Im Zweifelsfall wird 
% diese (erste) Leerzeile geschrieben. 
%    \begin{macrocode}
    \@tud@res@swafalse
    \loop\unless\ifeof\tud@read%
      \readline\tud@read to\tud@res@a%
      \ifx\tud@res@a\@empty
        \ifeof\tud@read\@tud@res@swafalse\fi
      \else
        \@tud@res@swatrue
      \fi
%    \end{macrocode}
% Hier erfolgt das eigentliche Schreiben im selektierten Stream.
%    \begin{macrocode}
      \if@tud@res@swa
        \immediate\write#2{\expandonce\tud@res@a}%
      \fi
%    \end{macrocode}
% Im Nachgang wird überprüft, ob die aktuell geschriebene Zeile leer war. Ist 
% dies der Fall, so wird \cs{@tud@res@swafalse} gesetzt, um eine etwaig 
% folgende Leerzeile nicht in die Ausgabedatei zu schrieben.
%    \begin{macrocode}
      \ifx\tud@res@a\@empty\@tud@res@swafalse\fi
    \repeat%
    \closein\tud@read%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \tud@read@to@outputstream
% \end{macro}^^A \tud@write@b
% \end{macro}^^A \tud@write@a
% \end{macro}^^A \tud@read
%
% \subsubsection{Sammeln von Quelltextauszügen}
%
% \begin{macro}{\tud@code@temp}
% \changes{v2.05}{2016/05/01}{neu}^^A
% \begin{macro}{\tud@code@append}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Bei den Tutorials soll zum Schluss ein komplett kompilierbares Beispiel in 
% eine separate Datei \file{\string\jobname-example.tex} mit allen darin 
% diskutierten Inhalten erzeugt werden. Um dieses zusammenzubauen, werden alle 
% im Dokument innerhalb der Varianten der \env{Trunk}-Umgebungen gegebenen 
% Fragmente zusammengesetzt. Um die Quelltexte einlesen und verarbeiten zu 
% können, werden zwei Eingabe- sowie ein Ausgabestream benötigt, welche bereits 
% zuvor initialisiert wurden.
%    \begin{macrocode}
\newcommand*\tud@code@temp{}
\edef\tud@code@temp{\@currname-temp}
%    \end{macrocode}
% Der innerhalb der Umgebungen \env{Preamble} und \env{Trunk}~-- sowie deren 
% Derivaten~-- angegebene Inhalt wird beim Schließen dieser Umgebungen in die 
% Hilfsdatei \cs{tud@code@temp.tex} gespeichert. Mit \cs{tud@code@append}
% wird deren Inhalt ausgelesen und den Dateien \cs{tud@code@temp-preamble.tex} 
% respektive \cs{tud@code@temp-trunk.tex} angehangen und damit gesichert, um 
% die jeweiligen Quelltextauszüge aus dem Tutorial für die Präambel sowie den 
% Dokumentteil trennen beziehungsweise sortieren zu können.
%    \begin{macrocode}
\newcommand*\tud@code@append[1]{%
  \tud@if@strequal{#1}{preamble}{%
    \tud@read@to@outputstream{\tud@code@temp.tex}{\tud@write@a}%
  }{%
    \tud@if@strequal{#1}{trunk}{%
      \tud@read@to@outputstream{\tud@code@temp.tex}{\tud@write@b}%
    }{%
      \tud@read@to@outputstream{\tud@code@temp.tex}{#1}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tud@code@append
% \end{macro}^^A \tud@code@temp
%
% \begin{macro}{\StartTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% \begin{macro}{\FinishTutorial}
% \changes{v2.02}{2014/08/21}{neu}^^A
% Mit \cs{StartTutorial} werden die Ausgabestreams der benötigten Hilfsdateien 
% zur Erstellung von \file{\string\jobname-example.tex} geöffnet. Außerdem 
% wird gleich der Titel und~-- falls im optionalen Argument angegeben~-- eine 
% Zusammenfassung gesetzt.
%    \begin{macrocode}
\newcommand\StartTutorial[1][]{%
  \immediate\openout\tud@write@a="\tud@code@temp-preamble.tex"\relax%
  \immediate\openout\tud@write@b="\tud@code@temp-trunk.tex"\relax%
  \immediate\write\tud@write@b{^^J\string\begin{document}^^J}%
  \Hy@raisedlink{\hyperdef{\jobname}{tutorials:\jobname}{}}%
  \faculty{}%
  \maketitle%
  \IfArgIsEmpty{#1}{}{%
    \noindent%
    \begin{abstract}%
    \noindent#1%
    \end{abstract}%
    \medskip%
  }%
  \noindent\ignorespaces%
}
%    \end{macrocode}
% Der Befehl \cs{FinishTutorial} schließt die offenen Ausgabestream und führt 
% die Inhalte nach \file{\string\jobname-example.tex} zusammen.
% \ToDo{C+P sollte raus}[v2.06]
%    \begin{macrocode}
\newcommand\FinishTutorial[1][]{%
  \immediate\write\tud@write@b{^^J\string\end{document}^^J}%
  \immediate\closeout\tud@write@b%
  \immediate\closeout\tud@write@a%
  \immediate\openout\tud@write@a="\tud@code@temp.tex"\relax%
  \immediate\closeout\tud@write@a%
  \immediate\openout\tud@write@a="\jobname-example.tex"\relax%
  \tud@read@to@outputstream{\tud@code@temp-preamble.tex}{\tud@write@a}%
  \tud@read@to@outputstream{\tud@code@temp-trunk.tex}{\tud@write@a}%
  \immediate\closeout\tud@write@a%
  \clearpage%
  \addsec{Copy~\&~Paste}%
  \thispagestyle{empty}%
  \pagestyle{empty}%
  Der zuvor beschriebene Quelltext wird folgend ausgegeben, um diesen via %
  Copy~\&~Paste nutzen und nachvollziehen zu k\"onnen. Bitte beachten Sie, %
  dass~-- abh\"angig vom verwendeten PDF-Betrachter~-- beim Kopieren die hier %
  dargestellten Einz\"uge und Abs\"atze m\"oglicherweise verloren gehen %
  k\"onnen. Dies kann insbesondere aufgrund fehlender Leerzeilen zu einem %
  falschen Ausgabeergebnis f\"uhren. Alternativ finden Sie den folgenden %
  \Lettering{LaTeX}-Quelltext auch im Pfad %
  \Path{\PName{texmf}/source/latex/tudscr/doc/examples/} %
  als Datei \File{\jobname-example.tex}. \par #1%
  \begin{quoting}[rightmargin=0pt]%
  \lstinputlisting[style=tudscr]{\jobname-example.tex}%
  \end{quoting}%
}
%    \end{macrocode}
% \end{macro}^^A \FinishTutorial
% \end{macro}^^A \StartTutorial
%
% \begin{macro}{\filec@ntents@silent}
% \changes{v2.06e}{2019/10/10}{neu}^^A
% Die Umgebungen \env{Preamble}, \env{Trunk} und \env{Hint} sowie deren
% Varianten nutzen die Umgebung \env{filecontents}, um ihren Inhalt in eine
% temporäre Datei zu schreiben und diese direkt mit dem Paket \pkg{listings}
% darzustellen sowie ggf. den Quelltext auszuführen. Beim Überschreiben einer
% Datei wird für gewöhnlich eine Warnung erzeugt. Dies wird mit dem eigens 
% definierten Parameter \prm{silent} unterbunden.
%    \begin{macrocode}
\providecommand*\filec@ntents@silent{%
  \let\@latex@warning@no@line\@gobble%
}
%    \end{macrocode}
% \end{macro}^^A \filec@ntents@silent
%
% \begin{macro}{\tud@code@pre}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{macro}{\tud@code@post}
% \changes{v2.02}{2014/08/19}{neu}^^A
% Dies sind Hilfsmakros, welche zu Beginn und Ende der Quelltextumgebungen 
% \env{Preamble}, \env{Trunk} und \env{Hint} für das Sichern der Inhalte in
% eine Hilfsdatei verantwortlich sind, wofür die \env{filecontents}-Umgebung 
% genutzt wird.
%    \begin{macrocode}
\newcommand*\tud@code@pre{%
  \csuse{filecontents*}[nosearch,force,silent]{\tud@code@temp.tex}%
}
\newcommand*\tud@code@post{%
  \csuse{endfilecontents*}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@code@post
% \end{macro}^^A \tud@code@pre
%
% \iffalse
%</package>
% \fi
%
% \subsubsection{Einbindung alleinstehender \Lettering{LaTeX}-Dokumente}
%
% \begin{macro}{\tud@file@compile}
% \changes{v2.06p}{2022/11/13}{neu}^^A
% \begin{macro}{\tud@file@stub}
% \changes{v2.06p}{2022/11/13}{neu}^^A
% Hiermit können alleinstehende \Lettering{LaTeX}-Dateien kompiliert werden, 
% wobei dies nur erfolgt, wenn sich deren Quelldatei geändert hat oder noch gar
% kein entsprechendes PDF"~Dokument existiert. Sollte die Quelldatei dabei 
% nicht dem Namen der verwendeten \Lettering{LaTeX}-Datei entsprechen, weil 
% letztere beispielsweise aus einer anderen Quelle generiert wird, kann diese 
% über das optionale Argument in runden Klammern als Referenz für den Vergleich 
% des Zeitstempels angegben werden. Über das gewöhnliche optionale Argument 
% lassen sich Kommadozeilenargumente für den \Lettering{LaTeX}-Lauf angeben.
% \ToDo{compile via \app{make}}[v2.07]
%    \begin{macrocode}
\NewDocumentCommand\tud@file@compile{D(){#3.tex} o m}{%
  \filemodCmp{#3.pdf}{#1}{}{%
    \ifnum\pdf@shellescape=\@ne\relax
      \edef\tud@res@a{\tud@latex@ext\space#2\space"#3.tex"}%
      \ShellEscape{\tud@res@a}%
      \ShellEscape{\tud@res@a}%
    \fi
    \tud@file@check{#3.pdf}%
  }%
}
%    \end{macrocode}
% Setzt einen Platzhalter, falls eine mit \cs{tud@file@compile} zu erstellende 
% PDF"~Datei (noch) nicht vorhanden ist.
%    \begin{macrocode}
\newcommand*\tud@file@stub[3]{
  \begingroup
    \fboxsep=-\arrayrulewidth%
    \noindent\fbox{\vbox to #1{%
      \vss\vss%
      \hbox to #2{\hss\texttt{#3}\hss}%
      \vss\vss\vss%
    }}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \tud@file@stub
% \end{macro}^^A \tud@file@compile
%
% \iffalse
%<*class>
% \fi
%
% \begin{macro}{\IncludeExample}
% \changes{v2.02}{2014/07/25}{Skalierung der eingefügten Seiten}^^A
% Mit diesem Befehl wird eine \Lettering{LaTeX}-Datei ggf. übersetzt und 
% anschließend als PDF"~Datei wieder eingebunden. Zuvor wird der dazugehörige 
% Quelltext mittels \cs{lstinputlisting} im Dokument ausgegeben. Dieser Befehl 
% wird lediglich für die Klasse \cls{tudscrmanual} benötigt.
%    \begin{macrocode}
\newcommand*\IncludeExample[1]{%
  \begingroup
    \lstinputlisting[style=tudscr]{examples/#1.tex}%
%    \end{macrocode}
% Die Beispiele werden nur erneut kompiliert, wenn sich diese geändert haben 
% oder noch gar kein entsprechendes PDF"~Dokument existiert. Sollte es eine 
% spezielle Version eines Beispiels für die Druckausgabe geben, wird auch 
% dieses kompiliert.
%    \begin{macrocode}
    \tud@file@compile[-output-directory examples]{examples/#1}%
    \tud@file@compile[-output-directory examples]{examples/#1_print}%
%    \end{macrocode}
% Ist die gesuchte Datei vorhanden, wird diese auch eingebunden, wobei 
% gegebenenfalls die Druckversion verwendet wird, falls vorhanden.
%    \begin{macrocode}
    \def\tud@res@a{examples/#1.pdf}%
    \IfFileExists{examples/#1_print.tex}{%
      \ifdefined\tudprintflag\def\tud@res@a{examples/#1_print.pdf}\fi
    }{}%
    \IfFileExists{\tud@res@a}{%
      \edef\tud@res@b{\noexpand\includepdf[%
        pages=-,noautoscale,frame,keepaspectratio,pagecommand={},%
        height=\noexpand\textheight,width=\noexpand\textwidth,offset=5mm 0mm%
      ]}%
      \tud@res@b{\tud@res@a}%
    }{%
%    \end{macrocode}
% Andernfalls wird ein Platzhalter für das fehlende Dokument eingefügt.
%    \begin{macrocode}
      \clearpage%
      \tud@file@stub{\textheight}{\textwidth}{\tud@res@a}%
      \clearpage%
    }%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \IncludeExample
%
% \iffalse
%</class>
%<*package>
% \fi
%
% \begin{macro}{\IncludeStandalone}
% \changes{v2.02}{2014/09/10}{neu}^^A
% Der Befehl \cs{IncludeStandalone} bindet die mit den Umgebungen \env{Trunk!} 
% und \env{Hint!} generierten PDF"~Dateien ein. Das optionale Argument in 
% runden Klammern dient zur Angabe der einzubindenden Seiten der PDF"~Datei, 
% wobei diese automatisch auf die Breite des ersten optionalen Argumentes 
% skaliert werden. Da es vorkommen kann, dass die resultierende Datei vor dem 
% eigentlichen Quelltextauszug eingebunden werden soll, wird die Kompilierung 
% erst nach dem Durchlauf ausgeführt.
%    \begin{macrocode}
\NewDocumentCommand\IncludeStandalone{O{\textwidth} D(){1} m}{%
  \AfterReadingMainAux{\tud@file@compile(\jobname.tex){\jobname-temp-#3}}%
  \begingroup
    \tud@res@cnt=\z@%
    \@for\tud@res@a:=#2\do{\advance\tud@res@cnt\@ne}%
    \ifnum\tud@res@cnt>\z@\relax%
      \tud@setdim\tud@res@glue{#1}%
      \divide\tud@res@glue\tud@res@cnt%
      \advance\tud@res@cnt\m@ne%
      \multiply\tud@res@cnt2%
      \tud@addtodim\tud@res@glue{-\tud@res@cnt\tabcolsep}%
      \@for\tud@res@a:=#2\do{%
        \advance\tud@res@cnt\m@ne%
        \IfFileExists{\jobname-temp-#3.pdf}{%
          \edef\tud@res@b{\noexpand\includegraphics[%
            keepaspectratio,width=\the\tud@res@glue,page=\tud@res@a%
          ]}%
          \fbox{\tud@res@b{\jobname-temp-#3.pdf}}%
        }{%
          \tud@file@stub{\fpeval{\the\tud@res@glue/\textwidth}\textheight}%
            {\tud@res@glue}{\jobname-temp-#3.pdf}%
        }%
        \ifnum\tud@res@cnt>\z@\relax\hfill\fi%
      }%
    \fi%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \IncludeStandalone
% \begin{macro}{\tud@code@standalone}
% \changes{v2.02}{2014/10/22}{neu}^^A
% Die Umgebungen \env{Trunk!} und \env{Hint!} verwenden nach der Ausgabe des 
% Quelltextes diesen abermals, um daraus eine PDF-Datei zu erzeugen. Die dafür 
% notwendige \Lettering{LaTeX}-Datei \file{\string\jobname-temp-\#1.tex} wird 
% hier erzeugt und kann mit \cs{IncludeStandalone} kompiliert und eingebunden 
% werden.
%    \begin{macrocode}
\newcommand*\tud@code@standalone[1]{%
  \begingroup
%    \end{macrocode}
% Die benötigten Pakete und Einstellungen der Präambel.
%    \begin{macrocode}
    \def\tud@res@a{%
      \documentclass[english,ngerman]{tudscrreprt}^^J%
      \iftutex^^J%
        \usepackage{fontspec}^^J%
      \else^^J%
        \usepackage[T1]{fontenc}^^J%
        \usepackage[ngerman=ngerman-x-latest]{hyphsubst}^^J%
      \fi^^J%
      \usepackage{babel}^^J%
      \usepackage[babel]{microtype}^^J%
      \usepackage{tudscrsupervisor}^^J%
      \usepackage{isodate}^^J%
      \usepackage{enumitem}^^J%
      \setlist{noitemsep}^^J%
    }%
    \eappto\tud@res@a{\expandafter\noexpand\csname begin\endcsname{document}}%
%    \end{macrocode}
% Das Datum der aktuellen Datei wird ebenfalls extrahiert.
%    \begin{macrocode}
    \def\tud@res@c{\today}%
    \ifx\@date\tud@res@c\else
      \let\printdate\@firstofone
      \eappto\tud@res@a{^^J\noexpand\date{\@date}}%
    \fi
    \edef\tud@res@b{\expandafter\noexpand\csname end\endcsname{document}}%
    \edef\tud@res@a{\detokenize\expandafter{\tud@res@a}}%
    \edef\tud@res@b{\detokenize\expandafter{\tud@res@b}}%
%    \end{macrocode}
% Um keinen weiteren Ausgabestream reservieren zu müssen, wird auf den bereits 
% von der \env{filecontents}-Umgebung genutzten zurückgegriffen. Nach dem 
% Schreiben der Präambel (\cs{tud@res@a})wird der im Dokument angegebene Code 
% aus \file{\string\tud@code@temp.tex} eingelesen.
%    \begin{macrocode}
    \chardef\reserved@c\ifx\directlua\@undefined 15 \else 127 \fi%
    \ch@ck7\reserved@c\write\relax%
    \set@curr@file{\jobname-temp-#1.tex}%
    \immediate\openout\reserved@c="\@curr@file"\relax%
    \immediate\write\reserved@c{\tud@res@a}%
    \tud@read@to@outputstream{\tud@code@temp.tex}{\reserved@c}%
    \immediate\write\reserved@c{\tud@res@b}%
    \immediate\closeout\reserved@c%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \tud@code@standalone
%
% \subsubsection{Verarbeitung von Quelltextauszügen}
%
% \begin{macro}{\tud@with@batchmode}
% \changes{v2.06p}{2022/09/30}{neu}^^A
% Das Argument wird im temporär aktivierten \cs{batchmode} ausgeführt.
%    \begin{macrocode}
\newcommand*\tud@with@batchmode[1]{%
  \begingroup
    \edef\tud@res@a{%
      \endgroup
      \batchmode%
      \unexpanded{#1}%
      \interactionmode\the\interactionmode\space%
    }%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@with@batchmode
% \begin{macro}{\tud@code@input@lst}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Damit wird der Quelltext eingezogen ausgegeben.
%    \begin{macrocode}
\newcommand*\tud@code@input@lst{%
  \begin{quoting}[rightmargin=0pt]%
    \tud@with@batchmode{\lstinputlisting[style=tudscr]{\tud@code@temp.tex}}%
  \end{quoting}%
}
%    \end{macrocode}
% \end{macro}^^A \tud@code@input@lst
% \begin{macro}{\InputCode}
% \changes{v2.02}{2014/10/21}{neu}^^A
% Mit \cs{InputCode} kann der Inhalt der letzen \env{Trunk}-Umgebung 
% direkt ausgeführt werden, ohne diesen zuvor mit \cs{tud@code@input@tex} zu 
% prüfen und zu formatieren.
%    \begin{macrocode}
\newcommand*\InputCode{\tud@with@batchmode{\input{\tud@code@temp.tex}}}
%    \end{macrocode}
% \end{macro}^^A \InputCode
%
% \begin{macro}{\CodePreamble}
% \changes{v2.02}{2014/08/20}{neu}^^A
% \begin{macro}{\Code@Preamble}
% \changes{v2.02}{2014/10/22}{neu}^^A
% \begin{macro}{\CodeHook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% \begin{macro}{\Code@Hook}
% \changes{v2.02}{2014/10/11}{neu}^^A
% Bereitstellung von Hilfsmakros für die formatierte Ausgabe von Quelltexten. 
% Diese werden im Normalfall erst aufgelistet und daran anschließend folgt die 
% Ausgabe des Ergebnisses. Mit \cs{CodePreamble} kann zwischen den beiden 
% Teilen etwas erläuternder Text eingefügt werden.
% \ToDo{remove \cs{CodePreamble}}
% \ToDo{adapt \cs{CodeHook}}
%    \begin{macrocode}
\newcommand\Code@Preamble{}
\let\Code@Preamble\relax
\newcommand\CodePreamble[1]{%
  \long\gdef\Code@Preamble{%
    \hskip\glueexpr\leftmargin/2\relax%
    \textit{Die resultierende Ausgabe:}\space#1%
  }%
}
\newcommand*\Code@Hook{}
\let\Code@Hook\relax
\newcommand*\CodeHook[1]{\gdef\Code@Hook{#1}}
%    \end{macrocode}
% \end{macro}^^A \Code@Hook
% \end{macro}^^A \CodeHook
% \end{macro}^^A \Code@Preamble
% \end{macro}^^A \CodePreamble
%
% \begin{macro}{\tud@code@input@tex}
% \changes{v2.02}{2014/10/13}{neu}^^A
% Für die Ausgabe des Quelltextergebnisses erfolgt ein linker Einzug. Außerdem 
% werden unter anderem abhängig von der Verwendung eines erklärenden Textes die 
% eingefügten vertikalen Abstände angepasst.
%    \begin{macrocode}
\newcommand*\tud@code@input@tex{%
%    \end{macrocode}
% Nach dem Ausführen des ersten Argumentes von \cs{@tempa} wird geprüft, ob
% dieses überhaupt eine sichtbare Ausgabe erzeugt hat. Nur für diesen Fall wird
% nach dieser vertikaler Leerraum eingefügt. Der Anfang entspricht prinzipiell
% dem Standardbefehl \cs{settoheight}, jedoch wird im Inneren zusätzlich eine
% \cs{vbox} verwendet, um damit auch mathematische Umgebungen testen zu können. 
% Das Ganze findet innerhalb einer Gruppierung statt, um keine Änderungen zu
% erzeugen.
% \ToDo{\cs{@tempa} ist ein sehr merkwürdiges Konstrukt!}[v2.06]
%    \begin{macrocode}
  \def\@tempa##1##2{%
    ##1%
    \begingroup%
      ##2%
      \settoheight\@tempdima{\vbox{##1}}%
      \ifdim\@tempdima>\z@\relax%
        \endgraf%
        \medskip%
        \noindent\ignorespaces%
      \fi%
    \endgroup%
  }%
%    \end{macrocode}
% Da aufgrund der Verwendung der \env{filecontents}-Umgebung ein optionales
% Argument für alle Abwandlungen der Quelltextumgebungen nicht möglich ist,
% wird \cs{CodePreamble} bereitgestellt, womit der Ausgabe ein erläuternder
% Text vorangestellt werden kann.
%    \begin{macrocode}
  \@tempa{\Code@Preamble}{}%
  \tud@setdim\@tempdimc{\leftskip}%
  \tud@setdim\leftskip{\leftmargin}%
%    \end{macrocode}
% Durch die doppelte Verwendung von \file{\string\tud@code@temp.tex}~-- einmal 
% direkt und einmal innerhalb einer Box~-- können darin verwendete Befehle wie
% \cs{newcommand} zu Fehlern führen. Mit dem Makro \cs{CodeHook} lassen sich 
% diese Konflikte durch eine lokale Redefinition ebensolcher Befehle auflösen
% (bspw. \cs{let}\cs{newcommand}\cs{renewcommand}).
%    \begin{macrocode}
  \@tempa{\InputCode}{\Code@Hook}%
  \global\let\Code@Hook\relax%
  \tud@setdim\leftskip{\@tempdimc}%
  \noindent\ignorespaces%
}
%    \end{macrocode}
% \end{macro}^^A \tud@code@input@tex
%
%
%
\tud@newcount\tud@code@type@num
\TUD@key[.code]{type}{%
  \TUD@set@numkey{type}{@tempa}{%
    {preamble}{0},{trunk}{1},{hint}{2}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \tud@code@type@num=\@tempa\relax%
  \fi%
}
\tud@newcount\tud@code@lst@num
\TUD@key[.code]{lst}[true]{%
  \TUD@set@numkey{lst}{@tempa}{%
    \TUD@bool@numkey,{show}{1},{input}{2},{swap}{3},{after}{3}%
  }{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \tud@code@lst@num=\@tempa\relax%
  \fi%
}
\NewDocumentCommand\tud@code@process{m d() O{} m}{
  \TUDExecuteOptions[.code]{#3,type=#4}%
  \ifcase\tud@code@type@num\relax% preamble
    \tud@read@to@outputstream{\tud@code@temp.tex}{\tud@write@a}%
  \or% trunk
    \tud@read@to@outputstream{\tud@code@temp.tex}{\tud@write@b}%
  \fi%
  \let\tud@res@a\@empty%
  \ifcase\tud@code@lst@num\relax% false
  \or% true
    \appto\tud@res@a{\tud@code@input@lst}%
  \or% input
    \appto\tud@res@a{\tud@code@input@lst}%
    \appto\tud@res@a{\tud@code@input@tex}%
  \or% swap
    \appto\tud@res@a{\InputCode}%
    \appto\tud@res@a{\tud@code@input@lst}%
  \fi%
  \IfValueT{#2}{%
    \ifcase\tud@code@type@num\relax
      \PackageWarning{tudscrmanual}{%
        As type `#4' was given,\MessageBreak%
        it doesn't make sense to compile the\MessageBreak%
        code snippet standalone%
      }%
    \else
      \appto\tud@res@a{\tud@code@standalone{#2}}%
    \fi
  }%
  \appto\tud@res@a{\global\let\Code@Preamble\relax}%
  \expanded{\noexpand\AddToHookNext{env/#1/after}{\expandonce\tud@res@a}}%
}
\NewDocumentEnvironment{Code}{d() O{} m}{%
  \filecontents[noheader,nosearch,force,silent]{\tud@code@temp.tex}%
}{%
  \endfilecontents%
  \tud@code@process{Code}(#1)[lst=true,#2]{#3}%
}
\NewDocumentEnvironment{Code*}{d() O{} m}{%
  \filecontents[noheader,nosearch,force,silent]{\tud@code@temp.tex}%
}{%
  \endfilecontents%
  \tud@code@process{Code*}(#1)[lst=input,#2]{#3}%
}
%
%
%
% Die nachfolgenden Umgebungen verwenden die beiden, gerade zuvor eingeführten 
% Hilfsmakros \cs{tud@code@pre} und \cs{tud@code@post}, welche den gegebenen 
% Inhalt in die temporäre Datei \file{\string\tud@code@temp.tex} schreiben. Die 
% im Dokument in den Umgebungen gesetzten Quelltextauszüge werden mit dem Makro
% \cs{tud@code@append}~-- abhängig vom gegebenen Argument~-- zusätzlich für ein 
% Copy"~\&"~Paste"~Beispiel in \file{\string\tud@code@temp-preamble.tex} oder
% \file{\string\tud@code@temp-trunk.tex} gespeichert. Die damit gesammelten 
% Inhalte werden am Ende mit \cs{FinishTutorial} ausgegeben.
% \begin{environment}{Preamble}
% \changes{v2.02}{2014/11/02}{neu}^^A
% \begin{environment}{Preamble*}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Preamble+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% Die Umgebung \env{Preamble} dient für die Ausgabe von Quelltextauszügenen, 
% welche in einem \Lettering{LaTeX}-Dokument in der Präambel verwendet werden 
% müssen oder sollten. Die in ihr gesetzten Inhalte werden für das 
% Copy"~\&"~Paste-Beispiel vor den Inhalten aus der Umgebung \env{Trunk} 
% ausgegeben. Die Sternversion führt den Inhalt zusätzlich im Dokument aus. Die 
% Pluszeichenversion fügt dem Ausgabestream ihren Inhalt hinzu, ohne das 
% dieser ausgegeben oder ausgeführt wird.
% \ToDo{noindentafter?}[v2.06]
%    \begin{macrocode}
\newenvironment{Preamble}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{preamble}%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble*}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{preamble}%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \tud@code@input@tex%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Preamble+}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{preamble}%
  \gdef\@tempa{%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Preamble+
% \end{environment}^^A Preamble*
% \end{environment}^^A Preamble
%
% \begin{environment}{Trunk}
% \changes{v2.02}{2014/08/16}{neu}^^A
% \begin{environment}{Trunk*}
% \changes{v2.02}{2014/08/19}{neu}^^A
% \begin{environment}{Trunk+}
% \changes{v2.02}{2014/11/03}{neu}^^A
% \begin{environment}{Trunk!}
% \changes{v2.02}{2014/10/07}{neu}^^A
% Die Umgebung \env{Trunk} dient zur Ausgabe von exemplarischen Quelltexten, 
% die in einem \Lettering{LaTeX}-Dokument innerhalb der \env{document}-Umgebung 
% verwendet werden müssen oder sollten. Für das Copy"~\&"~Paste-Beispiel werden 
% die gegebenen Inhalte nach den Inhalten aus der Umgebung \env{Preamble} 
% ausgegeben. Die Sternversion der Umgebung führt ihren Inhalt zusätzlich im
% Dokument aus. Die Pluszeichenversion fügt dem Ausgabestream ihren Inhalt 
% hinzu, ohne diesen auszugeben oder auszuführen. Die Ausrufezeichenversion 
% fügt den Quelltext im Dokument ein und führt diesen zusätzlich in einer
% separaten Datei mit einem minimalen Dokumentkörper aus, um daraus eine
% PDF"~Datei zu erzeugen, welche im Nachhinein mit \cs{IncludeStandalone} als 
% Grafik eingebunden werden kann. Dies ist für Quelltextabschnitte gedacht,
% deren Ausgabe zu groß ist, um diese direkt anzuzeigen und dennoch dargestellt
% werden sollen.
% \ToDo{noindentafter?}[v2.06]
%    \begin{macrocode}
\newenvironment{Trunk}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{trunk}%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk*}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{trunk}%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \tud@code@input@tex%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Trunk+}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{trunk}%
  \gdef\@tempa{%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\NewDocumentEnvironment{Trunk!}{m}{\tud@code@pre}{%
  \tud@code@post%
  \tud@code@append{trunk}%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \tud@code@standalone{#1}%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Trunk!
% \end{environment}^^A Trunk+
% \end{environment}^^A Trunk*
% \end{environment}^^A Trunk
%
% \begin{environment}{Hint}
% \changes{v2.02}{2014/09/16}{neu}^^A
% \begin{environment}{Hint*}
% \changes{v2.02}{2014/10/13}{neu}^^A
% \begin{environment}{Hint?}
% \changes{v2.02}{2014/12/09}{neu}^^A
% \begin{environment}{Hint!}
% \changes{v2.02}{2014/11/13}{neu}^^A
% Um Quelltextausschnitte zur weiterführenden Information anzugeben, wird die
% Umgebung \env{Hint} definiert. Der Inhalt wird ausgegben und~-- falls die
% Sternversion genutzt wurde~-- auch ausgeführt, allerdings nicht in das 
% Copy"~\&"~Paste"~Beispiel übernommen. Ansonsten entsprechen alle Umgebungen 
% in ihren Eigenschaften den äquivalenten \env{Trunk}-Umgebungen. Die Version 
% mit Fragezeichen ist für Quelltextauszüge gedacht, die ungeprüft \emph{vor}
% dessen Ausgabe ausgeführt werden sollen. 
% \ToDo{optionales Argument für \cs{hfuzz}; \cs{pcolumnfuzz} treatise}[v2.06]
% \ToDo{noindentafter?}[v2.06]
%    \begin{macrocode}
\newenvironment{Hint}{\tud@code@pre}{%
  \tud@code@post%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint*}{\tud@code@pre}{%
  \tud@code@post%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \tud@code@input@tex%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\newenvironment{Hint?}{\tud@code@pre}{%
  \tud@code@post%
  \gdef\@tempa{%
    \InputCode%
    \tud@code@input@lst%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
\NewDocumentEnvironment{Hint!}{m}{\tud@code@pre}{%
  \tud@code@post%
  \gdef\@tempa{%
    \tud@code@input@lst%
    \tud@code@standalone{#1}%
    \global\let\Code@Preamble\relax%
  }%
  \aftergroup\@tempa%
}
%    \end{macrocode}
% \end{environment}^^A Hint!
% \end{environment}^^A Hint?
% \end{environment}^^A Hint*
% \end{environment}^^A Hint
%
% \subsection{Automatische Erstellung von \pkg{pstricks}-Grafiken}
%
% Falls innerhalb eines Tutorials das Paket \pkg{pstricks} verwendet wird, muss
% dafür Sorge getragen werden, dass die automatische Kompilierung reibungslos
% mit \pkg{auto-pst-pdf} funktioniert. Aktuell gibt es beim Zusammenspiel von 
% \pkg{hyperref} und \pkg{preview} Probleme. Relevante Bugreports sind unter
% \href{https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44578}{auctex\#44578} und
% \GitHubRepo<rolfn/pst-pdf>'6' zu finden. Der folgende Workaround deaktiviert 
% im DVI-Modus einfach das Paket \pkg{hyperref}. Alternativ könnte eventuell
% auch \app{luapstricks} genutzt werden.
%    \begin{macrocode}
\AfterPackage*{pstricks}{%
  \ifpdf
    \def\@tempa{off}%
    \filemodCmp{\jobname-pics.pdf}{\jobname.tex}{}{%
      \ifnum\pdf@shellescape=\@ne\relax
%    \end{macrocode}
% Da kleinere Beispieldokumente (\file{\string\tud@code@temp-standalone.tex}) 
% separat kompiliert werden, erstellt \pkg{auto-pst-pdf} auch für diese die 
% entsprechenden Hilfsdateien. Deshalb werden diese hier rigoros gelöscht,
% nachdem \pkg{auto-pst-pdf} seine Arbeit verrichtet hat.
%    \begin{macrocode}
        \def\@tempa{on,runs=2,cleanup={}}%
        \AfterReadingMainAux{\app@exe{\app@rm "*-\app@suffix*"}}%
      \fi
      \tud@file@check{\jobname-pics.pdf}%
    }%
    \PassOptionsToPackage{\@tempa}{auto-pst-pdf}%
  \else
    \disable@package@load{hyperref}{}%
    \disable@package@load{bookmark}{}%
  \fi
  \RequirePackage{auto-pst-pdf}%
}
%    \end{macrocode}
%
% \iffalse
%</package>
%<*class>
% \fi
%
% \subsection{Debug-Traces für die Klasse \cls{tudscrmanual}}
%
% Ab und an ist es beim Erstellen des Handbuchs recht sinnvoll, verschiedene 
% Dinge direkt im Log-File zu überprüfen. Hierfür werden folgend einige Befehle 
% zur Ablaufkontrolle definiert.
%
% \begin{macro}{\tud@trace@check@types}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Ein Hilfsmakro zum Überprüfen gegebener Tracingtypen. Das optionale Argument 
% kann genutzt werden, um den gültigen Typ zu verarbeiten.
%    \begin{macrocode}
\newcommand*\tud@trace@check@types[3][\@gobble]{%
  \begingroup
    \tud@toks@{}%
    \def\do##1{%
      \ifinlist{##1}{#2}{\addto@hook\tud@toks@{#1{##1}}}{%
        \ClassError{tudscrmanual}{Undefined tracing type `##1'}{%
          Tracing type `##1' unknown, possible values are:\MessageBreak%
          #2%
        }%
      }%
    }%
    \docsvlist{#3}%
    \edef\tud@res@a{\endgroup\the\tud@toks@}%
  \tud@res@a%
}
%    \end{macrocode}
% \end{macro}^^A \tud@trace@check@types
% \begin{macro}{\tracinglabels}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \changes{v2.06p}{2022/11/05}{überarbeitet und erweitert}^^A
% \begin{macro}{\tud@trace@lbl@log@sorted}
% \changes{v2.06p}{2022/11/05}{neu}^^A
% \begin{macro}{\tud@trace@lbl@on@line}
% \changes{v2.06p}{2022/11/05}{neu}^^A
% \begin{macro}{\tud@trace@lbl@types}
% \changes{v2.06p}{2022/11/05}{neu}^^A
% \begin{macro}{\tud@trace@lbl@created@list}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@missing@list}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \begin{macro}{\tud@trace@lbl@matched@list}
% \changes{v2.06p}{2022/11/05}{neu}^^A
% \begin{macro}{\tud@trace@lbl@add}
% \changes{v2.06p}{2022/11/05}{neu}^^A
% Mit \cs{tracinglabels} wird die Nachverfolgung aller erstellten Labels in der 
% Dokumentation aktiviert, wobei zwischen erzeugten (\val{created}), genutzten 
% (\val{matched}) sowie fehlenden (\val{missing}) Labeln unterschieden wird. 
% Die nachverfolgten Label werden direkt im Log-File~-- bei der Verwendung der 
% Sternversion ohne Zeilennummer~-- ausgegeben. Mit dem gewöhnlichen optionalen 
% Argument kann eine Angabe der gewünschten Tracingtypen für die Nachvervolgung 
% erfolgen. Über das optionale Argument in Guillemets werden alle den gegebenen 
% Tracingtypen zugehörigen Label am Ende des Log-Files sortiert aufgelistet. 
% Für beide optionale Argumente gilt, das eine leere Angabe von |[]| respektive 
% |<>| zur Verwendung aller Typen führt.
%    \begin{macrocode}
\newcommand*\tud@trace@lbl@log@sorted{\relax}
\AfterEndDocument{\tud@trace@lbl@log@sorted}
\newcommand*\tud@trace@lbl@types{}
\listadd\tud@trace@lbl@types{created}
\listadd\tud@trace@lbl@types{missing}
\listadd\tud@trace@lbl@types{matched}
\NewDocumentCommand\tracinglabels{s O{missing} d<>}{%
  \newcommand*\tud@trace@lbl@on@line{}%
  \IfBooleanT{#1}{\let\tud@trace@lbl@on@line\on@line}%
  \begingroup
    \def\do##1{%
      \expandafter\newcommand\csname tud@trace@lbl@##1@list\endcsname{}%
      \global\cslet{tud@trace@lbl@##1@list}\relax%
    }%
    \dolistloop{\tud@trace@lbl@types}%
    \tud@if@strempty{#2}{%
      \let\tud@res@a\tud@trace@lbl@types
    }{%
      \let\tud@res@a\@empty
      \tud@trace@check@types[\listadd\tud@res@a]{\tud@trace@lbl@types}{#2}%
    }%
    \def\do##1{\global\cslet{tud@trace@lbl@##1@list}\@empty}%
    \dolistloop{\tud@res@a}%
    \IfValueT{#3}{%
      \tud@if@strempty{#3}{%
        \let\tud@res@b\tud@res@a
      }{%
        \let\tud@res@b\@empty
        \tud@trace@check@types[\listadd\tud@res@b]{\tud@res@a}{#3}%
      }%
      \def\do##1{%
        \gappto\tud@trace@lbl@log@sorted{%
          \ifcsvoid{tud@trace@lbl@##1@list}{%
            \wlog{+++++ no labels ##1 +++++}%
          }{%
            \wlog{+++++ labels ##1 (sorted) +++++}%
            \expandafter\tud@list@sort\expandafter{%
              \csname tud@trace@lbl@##1@list\endcsname%
            }%
%    \end{macrocode}
% Damit der Befehl \cs{wlog} nicht mit jedem Schleifendurchlauf aufgerufen 
% werden muss, wird ein Hilfsmakro mit dem notwendigen Inhalt bestückt.
%    \begin{macrocode}
            \begingroup
              \let\tud@res@a\@empty%
              \def\do####1{\appto\tud@res@a{####1^^J}}%
              \dolistcsloop{tud@trace@lbl@##1@list}%
              \wlog{\tud@res@a}%
            \endgroup
          }%
        }%
      }%
      \dolistloop{\tud@res@b}%
    }%
  \endgroup
}
\@onlypreamble\tracinglabels
%    \end{macrocode}
% Hiermit werden Labels aus der Liste im zweiten obligatorischen Argument der 
% Typliste im ersten obligatorischen Argument hinzugefügt.
%    \begin{macrocode}
\NewDocumentCommand\tud@trace@lbl@add{m m}{%
  \begingroup
    \def\tud@res@a##1{%
      \ifcsundef{tud@trace@lbl@##1@list}{}{%
        \tud@unique@csxadd{tud@trace@lbl@##1@list}{#2}%
        \wlog{%
          +++++ label ##1\tud@trace@lbl@on@line\space+++++^^J%
          \@spaces#2%
        }%
      }%
    }%
    \tud@trace@check@types[\tud@res@a]{\tud@trace@lbl@types}{#1}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \tud@trace@lbl@add
% \end{macro}^^A \tud@trace@lbl@matched@list
% \end{macro}^^A \tud@trace@lbl@missing@list
% \end{macro}^^A \tud@trace@lbl@created@list
% \end{macro}^^A \tud@trace@lbl@types
% \end{macro}^^A \tud@trace@lbl@on@line
% \end{macro}^^A \tud@trace@lbl@log@sorted
% \end{macro}^^A \tracinglabels
% \begin{macro}{\tracingentities}
% \changes{v2.05}{2015/10/29}{neu}^^A
% \changes{v2.06p}{2022/11/04}{überarbeitet und erweitert}^^A
% \begin{macro}{\tud@trace@ety@on@line}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\tud@trace@ety@types}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\tud@trace@ety@active}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% \begin{macro}{\tud@trace@ety@add}
% \changes{v2.06p}{2022/11/04}{neu}^^A
% Mit \cs{tracingentities} wird die Nachverfolgung aller Aufrufe von
% \cs{Process@@MarkupDeclare} und \cs{Process@@MarkupInline} durch
% \cs{Process@Markup} inklusive all ihrer Argumente aktiviert. Dies wird 
% gegebenenfalls zur Kontrolle des erzeugten Markups genutzt. Die 
% nachverfolgten Entitätsbefehle werden direkt im Log-File~-- bei der Nutzung 
% der Sternversion ohne Zeilennummer~-- ausgegeben. Über das optionale Argument 
% kann gewählt werden, ob die Deklarationen~(\val{declared}) respektive die 
% Ausgaben~(\val{output}) nachverfolgt werden sollen. Sollen alle Typen genutzt 
% werden, kann ein leeres Argument |[]| angegeben werden.
%    \begin{macrocode}
\newcommand*\tud@trace@ety@types{}
\listadd\tud@trace@ety@types{declared}
\listadd\tud@trace@ety@types{output}
\newcommand*\tud@trace@ety@active{}
\NewDocumentCommand\tracingentities{s O{declared}}{%
  \newcommand*\tud@trace@ety@on@line{}%
  \IfBooleanT{#1}{\let\tud@trace@ety@on@line\on@line}%
  \tud@if@strempty{#2}{%
    \let\tud@trace@ety@active\tud@trace@ety@types
  }{%
    \tud@trace@check@types[\listadd\tud@trace@ety@active]%
      {\tud@trace@ety@types}{#2}%
  }%
}
\@onlypreamble\tracingentities
%    \end{macrocode}
% Hiermit werden Entitätsbefehle aus der Liste im zweiten obligatorischen 
% Argument der Typliste im ersten obligatorischen Argument hinzugefügt.
%    \begin{macrocode}
\NewDocumentCommand\tud@trace@ety@add{m m}{%
  \begingroup
    \def\tud@res@a##1{%
      \ifinlist{##1}{\tud@trace@ety@active}{%
        \protected@edef\tud@res@b{#2}%
        \@onelevel@sanitize\tud@res@b%
        \wlog{%
          +++++ entity ##1\tud@trace@ety@on@line\space+++++^^J%
          \@spaces\tud@res@b%
        }%
      }{}%
    }%
    \tud@trace@check@types[\tud@res@a]{\tud@trace@ety@types}{#1}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}^^A \tud@trace@ety@add
% \end{macro}^^A \tud@trace@ety@active
% \end{macro}^^A \tud@trace@ety@types
% \end{macro}^^A \tud@trace@ety@on@line
% \end{macro}^^A \tracingentities
%
% \iffalse
%</class>
%</body>
%<*option>
% \fi
%
% \subsection{Optionen für die finale Ausgabe}
%
% \begin{option}{final}
% \begin{option}{print}
% \begin{macro}{\tudfinalflag}
% \begin{macro}{\tudprintflag}
% Diese beiden Optionen dienen zur finalen und/oder der unbunten Ausgabe.
%    \begin{macrocode}
\TUD@key{final}[true]{%
  \TUD@set@ifkey{final}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudfinalflag\relax%
    \fi%
  \fi%
}
\TUD@key{print}[true]{%
  \TUD@set@ifkey{print}{@tempswa}{#1}%
  \ifx\FamilyKeyState\FamilyKeyStateProcessed%
    \if@tempswa%
      \let\tudprintflag\relax%
    \fi%
  \fi%
}
%    \end{macrocode}
% Wurde eine oder beide der Optionen \opt{final} oder \opt{print} gesetzt bzw.
% mit einem Aufruf über die Kommandozeile die Flags \cs{tudfinalflag} und/oder
% \cs{tudprintflag} definiert, werden die entsprechenden Einstellungen zur
% finalen Ausgabe und/oder unbunten Druck vorgenommen und anschließend die 
% entsprechenden Optionen unschädlich gemacht.
%    \begin{macrocode}
%<*class>
\AtEndOfClass%
%</class>
%<*package>
\AtEndOfPackage%
%</package>
{%
  \TUD@key@toolate{final}%
  \TUD@key@toolate{print}%
  \ifdefined\tudfinalflag
    \TUDoptions{ToDo=false}%
    \TUD@key{ToDo}{\FamilyKeyStateProcessed}%
  \else
    \TUD@KOMAoptions{overfullrule}%
  \fi
  \ifdefined\tudprintflag
    \ifnum\tud@cd@num>\z@\relax
      \TUDoptions{cd=true}%
    \fi
    \PassOptionsToPackage{hidelinks}{hyperref}%
    \AfterEndPreamble{\hypersetup{hidelinks}}%
  \fi
  \TUD@key@toolate{cd}%
%<*class> 
  \ClassInfoNoLine{tudscrmanual}%
%</class>
%<*package>
  \PackageInfoNoLine{tudscrmanual}%
%</package>
  {%
    Output mode:%
    \space`\ifdefined\tudfinalflag\else non-\fi final'%
    \space`\ifdefined\tudprintflag\else non-\fi print'%
  }%
}
%    \end{macrocode}
% \end{macro}^^A \tudprintflag
% \end{macro}^^A \tudfinalflag
% \end{option}^^A print
% \end{option}^^A final
%
% \iffalse
%</option>
% \fi
%
% \PrintBackMatter
%
\endinput
