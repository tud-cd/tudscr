% \CheckSum{209}
% \iffalse meta-comment
%
%  TUD-Script -- Corporate Design of Technische Universität Dresden
% ----------------------------------------------------------------------------
%
%  Copyright (C) Falk Hanisch <hanisch.latex@outlook.com>, 2012-2021
%
% ----------------------------------------------------------------------------
%
%  This work may be distributed and/or modified under the conditions of the
%  LaTeX Project Public License, either version 1.3c of this license or
%  any later version. The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
%  and version 1.3c or later is part of all distributions of
%  LaTeX version 2008-05-04 or later.
%
%  This work has the LPPL maintenance status "maintained".
%
%  The current maintainer and author of this work is Falk Hanisch.
%
% ----------------------------------------------------------------------------
%
%<*dtx>
\ifx\documentclass\undefined
\input docstrip.tex
\begingroup
\catcode`\%=12 \catcode`\*=14
\gdef\processLineX%#1{*
  \ifcase\ifx%#10\else
         \ifx<#11\else
         \ifx!#12\else 3\fi\fi\fi\relax
    \expandafter\putMetaComment\or
    \expandafter\checkOption\or
    \expandafter\expandVariable\or
    \expandafter\removeComment\fi
  #1}
\endgroup
\def\expandVariable!#1\endLine{%
  \advance\codeLinesPassed\@ne
  \maybeMsg{x}%
  \edef\inLine{\csname #1\endcsname}%
  \let\do\putline@do
  \activefiles
}
\@@input ../tudscr-version.dtx
\edef\TUD@Version@Echo{echo\space\space\space\TUD@Version}
\keepsilent
\askforoverwritefalse
\generate{%
  \nopreamble\nopostamble%
  \file{tudscr_V_install.bxt}     {\from{tudscr-scripts.dtx}{win,bundle}}%
%\file{tudscr_V_full_install.bxt}{\from{tudscr-scripts.dtx}{win,bundle,font}}%
  \file{tudscr_fonts_install.bxt} {\from{tudscr-scripts.dtx}{win,font}}%
  \file{tud_fonts_install.bxt}    {\from{tudscr-scripts.dtx}{win,font,old}}%
  \file{tudscr_uninstall.bxt}     {\from{tudscr-scripts.dtx}{win,uninstall}}%
  \file{tudscr_V_install.sh}      {\from{tudscr-scripts.dtx}{unix,bundle}}%
%\file{tudscr_V_full_install.sh} {\from{tudscr-scripts.dtx}{unix,bundle,font}}%
  \file{tudscr_fonts_install.sh}  {\from{tudscr-scripts.dtx}{unix,font}}%
  \file{tud_fonts_install.sh}     {\from{tudscr-scripts.dtx}{unix,font,old}}%
  \file{tudscr_uninstall.sh}      {\from{tudscr-scripts.dtx}{unix,uninstall}}%
}
%\generate{%
%  \nopreamble\nopostamble%
%  \file{tudscr_fonts_convert.bxt}{\from{tudscr-scripts.dtx}{win,convert}}%
%  \file{tudscr_fonts_convert.sh}{\from{tudscr-scripts.dtx}{unix,convert}}%
%  \file{tudscr_fonts_converted_install.bxt}{%
%    \from{tudscr-scripts.dtx}{win,converted}%
%  }%
%  \file{tudscr_fonts_converted_install.sh}{%
%    \from{tudscr-scripts.dtx}{unix,converted}%
%  }%
%}
\else
\let\endbatchfile\relax
\fi
\endbatchfile
%</dtx>
%
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \iffalse
%<*dtx>
% \fi
%
\ifx\ProvidesFile\undefined\def\ProvidesFile#1[#2]{}\fi
\ProvidesFile{tudscr-scripts.dtx}[2019/06/28 v2.06 TUD-Script\space%
  (installation scripts)%
]
%
% \iffalse
\documentclass[english,ngerman,xindy]{tudscrdoc}
\iftutex
  \usepackage{fontspec}
\else
  \usepackage[T1]{fontenc}
  \usepackage[ngerman=ngerman-x-latest]{hyphsubst}
\fi
\usepackage{babel}
\usepackage{tudscrfonts}
\KOMAoptions{parskip=half-}
\usepackage{bookmark}
\usepackage[babel]{microtype}

\CodelineIndex
\RecordChanges
\GetFileInfo{tudscr-scripts.dtx}
\title{\file{\filename}}
\author{Falk Hanisch\qquad\expandafter\mailto\expandafter{\tudscrmail}}
\date{\fileversion\nobreakspace(\filedate)}

\begin{document}
  \maketitle
  \tableofcontents
  \DocInput{\filename}
\end{document}
%</dtx>
% \fi
%
% \selectlanguage{ngerman}
%
% \changes{v2.03}{2015/01/23}{\pkg{mweights} unnötig}^^A
% \changes{v2.04}{2015/03/11}{MiKTeX Portable wird unterstützt}^^A
% \changes{v2.04}{2015/04/12}{Bugfix für Windowspfade mit Leerzeichen}^^A
% \changes{v2.04}{2015/04/22}{Bugfix für MiKTeX-Maps}^^A
% \changes{v2.04}{2015/04/24}{TeX Live Portable wird unterstützt}^^A
% \changes{v2.04}{2015/05/12}{Pakete für T1-Kodierung obligatorisch}^^A
% \changes{v2.04}{2015/06/17}{Unix-Bash-Skripte verbessert}^^A
% \changes{v2.04}{2015/07/02}{Windows-Batch-Skripte verbessert}^^A
% \changes{v2.06}{2018/09/10}{Schriftinstallation entfällt mit \OpenSans}^^A
%
% \section{Installationsskripte}
%
% Es werden mehrere Varianten von Installationsskripte für Windows und Linux 
% automatisch generiert. Für eine Installation oder ein Update der lokalen
% Benutzerinstallation ist das mit \texttt{<bundle>} gekennzeichnete Skript
% zuständig. Das Skript zur Installation der alten Schriften ist mit dem Tag
% \texttt{<font>} versehen. Die Klassen von Klaus~Bergmann nutzen die gleichen 
% Schriften, definieren aber eine andere Familie, wofür zusätzlich der Tag 
% \texttt{<old>} verwendet wird. Das Skript zur automatisierten lokalen
% Benutzerinstallation der Schriften \emph{und} der Klassen und Pakete wird 
% durch die Kombination von \texttt{<bundle>} und \texttt{<font>}  markiert. 
% Zur Deinstallation der lokalen Installation wird ein separates, weitgehend
% unabhängiges Skript mit \texttt{<uninstall>} erzeugt.
%
% Für die interne Verwendung gibt es außerdem noch \texttt{<convert>}, womit 
% die konvertierten Schriften zwar erzeugt, aber nicht installiert werden. 
% Dieses Skript generiert ein Archiv mit diesen Schriften. Diese können mit dem 
% Skript \texttt{<converted>} installiert werden.
%
% \StopEventually{\PrintIndex\PrintChanges\PrintToDos}
%
% \begingroup%
% \DisableCrossrefsForced%
%
% \iffalse
%<*win>
% \fi
%
% \subsection{Batch-Skripte für Windows}
% \subsubsection{Identifikation}
%
% Zuerst wird die Ausgabe der Befehlszeilen mit |@echo off| deaktiviert, 
% darauf folgen ein paar Kommentare im Skript und daran anschließend die
% erfolgt Ausgabe der Identifikation des jeweiligen Skriptes.
% \changes{v2.05}{2015/12/07}{Ausgabe des Skriptpfades}^^A
%
%    \begin{macrocode}
@echo off
::
:: Autor: Falk Hanisch
::
:: getestet auf:
:: Microsoft Windows 7 Professional x64
:: Microsoft Windows 8 Pro x64
::
:: in Kombination mit:
:: MiKTeX 2.9 32-bit
:: MiKTeX Portable 2.9 32-bit
:: MiKTeX 2.9 64-bit
:: TeX Live 2016
:: TeX Live 2016 Portable
::
echo.
echo  =====================================================================
echo.
echo   %~dp0
echo.
echo  =====================================================================
echo.
%<bundle>echo   Installation TUD-Script unter Windows
%<font>echo   Installation TUD-CD-Schriften unter Windows
%<convert>echo   Konvertieren der TUD-CD-Schriften unter Windows
%<converted>echo   Installation der konvertierten TUD-CD-Schriften unter Windows
%<uninstall>echo   Deinstallation TUD-Script unter Windows
%<old>echo   fuer obsolete Klassen und Pakete
%!TUD@Version@Echo
echo.
cd /d %~dp0
%    \end{macrocode}
% Für das Batch-Skript wird ein temporärer Ordner angelegt, der am Ende wieder 
% gelöscht wird.
%    \begin{macrocode}
if exist tudscrtemp rmdir /s /q tudscrtemp> nul
mkdir tudscrtemp\converted
cd tudscrtemp
%    \end{macrocode}
% Als erstes wird nach der \LaTeX-Distribution gesucht. Falls keine auffindbar 
% ist, wird die Installation abgebrochen.
%    \begin{macrocode}
set texpath=
where tex> nul 2> nul> texpath.tmp
set /p texpath=<texpath.tmp
if "%texpath%"=="" goto :nothing
%    \end{macrocode}
%
% \iffalse
%<*!uninstall>
% \fi
%
% \subsubsection{Installationsskripte für Windows}
%
% Die Batch-Skripte werden für eine lokale Installation von \TUDScript sowie 
% die Schriftinstallation unter Windows angeboten.
%
% Es wird unterschieden, ob es sich um eine normale oder eine portable 
% Installation handelt. Mit |wmic| werden alle vorhandenen Laufwerke und deren
% Typ ausgegeben. In der Schleife wird geprüft, ob \LaTeX{} auf der HDD oder
% einem USB-Stick installiert ist.
%
%    \begin{macrocode}
set portable=false
for /f "usebackq tokens=1,2" %%a in (
  `wmic logicaldisk get caption^,drivetype`
) do (
  if "%%a"=="%texpath:~,2%" (
    if %%b==2 set portable=true
  )
)
%    \end{macrocode}
% Für Windows muss erkannt werden, ob \TeX~Live oder MiK\TeX{} installiert und
% aktiv ist. Die gefundene Distribution wird zur Information ausgegeben.
%    \begin{macrocode}
set texdistrib=
tex --version> texdistrib.tmp
set /p texdistrib=< texdistrib.tmp
:TeXLive
echo %texdistrib% | find "TeX Live"> nul
if errorlevel 1 goto :MiKTeX
set texdistrib="TeXLive"
if "%portable%" == "true" (
  echo   LaTeX-Distribution TeX Live Portable gefunden in:
) else (
  echo   LaTeX-Distribution TeX Live gefunden in:
)
goto :resume
:MiKTeX
echo %texdistrib% | find "MiKTeX"> nul
if errorlevel 1 goto :nothing
set texdistrib="MiKTeX"
if "%portable%" == "true" (
  echo   LaTeX-Distribution MiKTeX Portable gefunden in:
) else (
  echo   LaTeX-Distribution MiKTeX gefunden in:
)
goto :resume
:resume
echo   '%texpath%'
%    \end{macrocode}
% Vor der eigentlichen Installation wird geprüft, ob auch alle benötigeten 
% Archive, Skripte und \LaTeX-Pakete vorhanden sind.
%    \begin{macrocode}
echo  =====================================================================
echo.
echo   Notwendige Dateien und Pakete werden gesucht.
echo   Dies kann einen Moment dauern.
echo.
%    \end{macrocode}
% Da die automatische Installation notwendiger Pakete von MiK\TeX{} nicht
% fehlerfrei funktioniert, wird diese deaktiviert.
%    \begin{macrocode}
%set MIKTEX_KPSEWHICH_MPM_AUTOINSTALL=no
set missing=false
%    \end{macrocode}
% Für die lokale Installation von \TUDScript ist die gewünschte Versionsnummer 
% im Dateinamen des Skriptes hinterlegt. Das dazugehörige Archiv wird mit 
% dieser gesucht.
%    \begin{macrocode}
%<*bundle>
set version=%~n0
set version=%version:~7,-8%
call :checkfile    "tudscr_%version%.zip"
%</bundle>
%    \end{macrocode}
% Die Archive, Skripte und Pakete für die Schriftumwandlung werden gesucht.
%    \begin{macrocode}
%<converted>call :checkfile    "tudscr_fonts_converted.zip"
%<*font|convert>
call :checkfile    "Univers_PS.zip"
call :checkfile    "DIN_Bd_PS.zip"
%<!old>call :checkfile    "tudscr_fonts_install.zip"
if "%missing%" == "true" goto :abort
call :checkscript  "tftopl"       "fontware"
call :checkscript  "pltotf"       "fontware"
call :checkscript  "vptovf"       "fontware"
call :checkpackage "fontinst.sty" "fontinst"
%</font|convert>
%    \end{macrocode}
% Für die Schriftfamilien im Stil von \TUDScript werden einige zusätzliche 
% Pakete benötigt.
%    \begin{macrocode}
%<*font&!old|convert|converted>
call :checkpackage "type1ec.sty"  "cm-super"
call :checkpackage "lmodern.sty"  "lm"
call :checkpackage "cmbright.sty" "cmbright"
call :checkpackage "hfbright.map" "hfbright"
call :checkpackage "iwona.sty"    "iwona"
%</font&!old|convert|converted>
%    \end{macrocode}
% Wenn auch nur eine benötigte Datei nicht vorhanden ist, wird die Installation 
% abgebrochen.
%    \begin{macrocode}
if "%missing%" == "true" goto :abort
echo.
echo   Es wurden alle notwendigen Dateien und Pakete gefunden.
echo.
echo  =====================================================================
echo  =====================================================================
echo.
%    \end{macrocode}
% Als nächstes wird der Installationspfad bestimmt. Dabei wird unterschieden, 
% ob das Skript normal oder als Administrator ausgeführt wird.
%    \begin{macrocode}
%<*!convert>
net session >nul 2>&1
if %errorlevel%==0 (
  set admin=true
) else (
  set admin=false
)
%    \end{macrocode}
% Die Variablen |TEXMFLOCAL| und |TEXMFHOME| werden momentan nur von \TeX~Live
% sinnvoll bereitgestellt. Für die Distribution MiK\TeX{} werden daher die 
% Variablen |TEXMFSYSVAR| bzw. |TEXMFVAR| verwendet und als Pfade empfohlen.
%    \begin{macrocode}
set texmfpath=
if "%admin%" == "true" (
  if %texdistrib%=="MiKTeX" (
    kpsewhich --var-value=TEXMFSYSVAR> texmfpath.tmp
  ) else (
    kpsewhich --var-value=TEXMFLOCAL> texmfpath.tmp
  )
  echo   Mehrbenutzerinstallation ^(Administrator^).
) else (
  if %texdistrib%=="MiKTeX" (
    kpsewhich --var-value=TEXMFVAR> texmfpath.tmp
  ) else (
    kpsewhich --var-value=TEXMFHOME> texmfpath.tmp
  )
  echo   Einzelbenutzerinstallation.
)
echo.
echo  =====================================================================
echo  =====================================================================
echo.
%    \end{macrocode}
% Für eine portable MiK\TeX-Installation wird als lokaler \LaTeX-Pfad einer auf
% der gleichen Ordnerebene vorgeschlagen.
%    \begin{macrocode}
if %texdistrib%=="MiKTeX" (
  if "%portable%" == "true" (
    setlocal enabledelayedexpansion
      pushd !cd!
      cd /d !texpath:~,2!
      cd !texpath:~,-10!\..\..\..
      set texmfpath=!cd!\texmf
      popd
      echo !texmfpath!> texmfpath.tmp
    endlocal
  )
)
set /p texmfpath=< texmfpath.tmp
%    \end{macrocode}
% Folgend wird der Installationsordner durch den Nutzer festgelegt, wobei
% dieser mit dem zuvor ermittelten und empfohlenen Pfad vorgeschlagen wird.
%    \begin{macrocode}
echo   Bitte geben Sie das gewuenschte Installationsverzeichnis an.
echo   Dieses sollte sich jenseits der Distributionsordnerstruktur
if "%portable%" == "true" (
  echo   auf dem USB-Stick befinden.
) else (
  if "%admin%" == "true" (
    echo   in einem Pfad mit Lese-Zugriff fuer alle Benutzer befinden.
  ) else (
    echo   in einem lokalen Benutzerpfad befinden.
  )
)
echo.
echo  =====================================================================
echo.
echo   Sie sollten nachfolgend den eingestellten Standardpfad verwenden.
echo   Aendern Sie diesen nur, wenn Sie genau wissen, was Sie tun.
:proof_userinput
echo.
set /p texmfpath=< texmfpath.tmp
set "texmfpath=%texmfpath:/=\%"
if "%texmfpath:~-1%"=="\" set texmfpath=%texmfpath:~,-1%
echo %texmfpath%> texmfpath.tmp
echo.
echo   %texmfpath%
echo.
echo   Soll dieser Pfad genutzt werden?
if not exist "%texmfpath%" (
  echo   Der angegebene Ordner existiert nicht, wird jedoch erstellt.
)
echo   [j]a ^(ENTER^) / [n]ein:
echo.
set w=
set /p w=
echo.
%    \end{macrocode}
% Dennoch kann der Installationsordner auch manuell festgelegt werden.
%    \begin{macrocode}
if /i "%w%"=="" goto :install
if /i "%w%"=="j" goto :install
if /i "%w%"=="n" goto :set_texmfpath
goto :proof_userinput
:set_texmfpath
set texmfpath=
echo   Geben Sie das Installationsverzeichnis an ^(ohne Anfuerungszeichen^):
echo.
set /p texmfpath=
echo %texmfpath%> texmfpath.tmp
echo.
goto :proof_userinput
%    \end{macrocode}
% Nach der Festlegung des installationspfades beginnt nun die eigentliche 
% Installationsroutine.
%    \begin{macrocode}
:install
echo.
echo  =====================================================================
echo   Installation in folgenden Pfad:
echo   %texmfpath%
echo  =====================================================================
echo.
%</!convert>
%    \end{macrocode}
% Die ledigliche Konvertierung~-- ohne Installation~-- der Schriften erfolgt 
% direkt im Pfad des Skriptes.
%    \begin{macrocode}
%<*convert>
set texmfpath=%~dp0
echo.
echo  =====================================================================
echo   Erzeugen der konvertierten TUD-CD-Schriften
echo  =====================================================================
echo.
%</convert>
%    \end{macrocode}
% Für die notwendige Registrierung der Schriften nach der Installtion wird 
% geprüft, ob dies für alle Nutzer mit \textbf{updmap-sys} erfolgen kann oder 
% ob die nutzerindividuelle Variante mit \textbf{updmap} notwendig ist. Dies 
% ist jedoch lediglich für \TeX~Live relevant.
%    \begin{macrocode}
%<*font|converted>
set updmapsys=true
kpsewhich --var-value=TEXMFVAR> texmfvar.tmp
set /p texmfvar=< texmfvar.tmp
if exist "%texmfvar%\fonts\map" set updmapsys=false
%</font|converted>
%    \end{macrocode}
% Die benötigten Verzeichnisse für die konvertierten Schriften werden erzeugt.
%    \begin{macrocode}
%<*font|convert>
%<old>set localfolder=tud
%<!old>set localfolder=tudscr
if not exist "%texmfpath%\tex\latex\%localfolder%\fonts" (
  mkdir "%texmfpath%\tex\latex\%localfolder%\fonts"
)
if not exist "%texmfpath%\fonts\tfm\%localfolder%" (
  mkdir "%texmfpath%\fonts\tfm\%localfolder%"
)
if not exist "%texmfpath%\fonts\afm\%localfolder%" (
  mkdir "%texmfpath%\fonts\afm\%localfolder%"
)
if not exist "%texmfpath%\fonts\vf\%localfolder%" (
  mkdir "%texmfpath%\fonts\vf\%localfolder%"
)
if not exist "%texmfpath%\fonts\type1\%localfolder%" (
  mkdir "%texmfpath%\fonts\type1\%localfolder%"
)
if not exist "%texmfpath%\fonts\map\dvips\%localfolder%" (
  mkdir "%texmfpath%\fonts\map\dvips\%localfolder%"
)
%</font|convert>
%    \end{macrocode}
% Für Komplettinstallationen wird das \TUDScript-Bundle in den eingestellten 
% Pfad entpackt.
%    \begin{macrocode}
cd /d %~dp0
%<bundle>call :unzip tudscr_%version%.zip %texmfpath%
%<converted>call :unzip tudscr_fonts_converted.zip %texmfpath%
%    \end{macrocode}
% Anschließend werden die Type1-Schriften für die Konvertierung in den 
% temporären Ordner extrahiert.
%    \begin{macrocode}
%<*font|convert>
call :unzip Univers_PS.zip tudscrtemp
call :unzip DIN_Bd_PS.zip tudscrtemp
%<!old>call :unzip tudscr_fonts_install.zip tudscrtemp\converted
cd tudscrtemp
%    \end{macrocode}
% Dies ist die Konvertierungsroutine für die alten Schriftfamilien.
%    \begin{macrocode}
%<*old>
copy uvcel___.pfb converted\aunl8a.pfb> nul
copy uvcel___.afm converted\aunl8a.afm> nul
copy uvxlo___.pfb converted\aunlo8a.pfb> nul
copy uvxlo___.afm converted\aunlo8a.afm> nul
copy uvce____.pfb converted\aunr8a.pfb> nul
copy uvce____.afm converted\aunr8a.afm> nul
copy uvceo___.pfb converted\aunro8a.pfb> nul
copy uvceo___.afm converted\aunro8a.afm> nul
copy uvceb___.pfb converted\aunb8a.pfb> nul
copy uvceb___.afm converted\aunb8a.afm> nul
copy uvxbo___.pfb converted\aunbo8a.pfb> nul
copy uvxbo___.afm converted\aunbo8a.afm> nul
copy uvcz____.pfb converted\aubr8a.pfb> nul
copy uvcz____.afm converted\aubr8a.afm> nul
copy uvczo___.pfb converted\aubro8a.pfb> nul
copy uvczo___.afm converted\aubro8a.afm> nul
copy DINBd___.pfb converted\dinb8a.pfb> nul
copy DINBd___.afm converted\dinb8a.afm> nul
cd converted
echo \input fontinst.sty> installoldfonts.tex
echo \needsfontinstversion{1.933}>> installoldfonts.tex
echo \recordtransforms{record.tex}>> installoldfonts.tex
echo \latinfamily{aun}{}>> installoldfonts.tex
echo \latinfamily{aub}{}>> installoldfonts.tex
echo \latinfamily{din}{}>> installoldfonts.tex
echo \endrecordtransforms>> installoldfonts.tex
echo \bye>> installoldfonts.tex
latex installoldfonts.tex
%</old>
%    \end{macrocode}
% Die neuen \TUDScript-Schriftfamilien ergänzen die fehlenden Glyphen durch~-- 
% einigermaßen passende~-- aus freien \LaTeX-Schriften.
%    \begin{macrocode}
%<*!old>
copy uvcel___.pfb converted\lunl8a.pfb> nul
copy uvcel___.afm converted\lunl8a.afm> nul
copy uvxlo___.pfb converted\lunlo8a.pfb> nul
copy uvxlo___.afm converted\lunlo8a.afm> nul
copy uvce____.pfb converted\lunr8a.pfb> nul
copy uvce____.afm converted\lunr8a.afm> nul
copy uvceo___.pfb converted\lunro8a.pfb> nul
copy uvceo___.afm converted\lunro8a.afm> nul
copy uvceb___.pfb converted\lunb8a.pfb> nul
copy uvceb___.afm converted\lunb8a.afm> nul
copy uvxbo___.pfb converted\lunbo8a.pfb> nul
copy uvxbo___.afm converted\lunbo8a.afm> nul
copy uvcz____.pfb converted\lunc8a.pfb> nul
copy uvcz____.afm converted\lunc8a.afm> nul
copy uvczo___.pfb converted\lunco8a.pfb> nul
copy uvczo___.afm converted\lunco8a.afm> nul
copy DINBd___.pfb converted\0m6b8a.pfb> nul
copy DINBd___.afm converted\0m6b8a.afm> nul
echo.
echo  =====================================================================
echo   Virtuelle Schriften erzeugen. ^(Dies kann einen Moment dauern^)
echo  =====================================================================
echo.
cd converted
echo 00/19
tftopl cmbr10.tfm cmbr10.pl
echo 01/19
tftopl cmbrsl10.tfm cmbrsl10.pl
echo 02/19
tftopl cmbrbx10.tfm cmbrbx10.pl
echo 03/19
tftopl tbmr10.tfm tbmr10.pl
echo 04/19
tftopl tbmo10.tfm tbmo10.pl
echo 05/19
tftopl tbsr10.tfm tbsr10.pl
echo 06/19
tftopl tbso10.tfm tbso10.pl
echo 07/19
tftopl tbbx10.tfm tbbx10.pl
echo 08/19
tftopl cmbrmi10.tfm cmbrmi10.pl
echo 09/19
tftopl cmbrmb10.tfm cmbrmb10.pl
echo 10/19
tftopl cmbrsy10.tfm cmbrsy10.pl
echo 11/19
tftopl sy-iwonamz.tfm sy-iwonamz.pl
echo 12/19
tftopl sy-iwonahz.tfm sy-iwonahz.pl
echo 13/19
tftopl rm-iwonach.tfm rm-iwonach.pl
echo 14/19
tftopl rm-iwonachi.tfm rm-iwonachi.pl
echo 15/19
tftopl ts1-iwonach.tfm ts1-iwonach.pl
echo 16/19
tftopl ts1-iwonachi.tfm ts1-iwonachi.pl
echo 17/19
tftopl mi-iwonachi.tfm mi-iwonachi.pl
echo 18/19
tftopl sy-iwonachz.tfm sy-iwonachz.pl
echo 19/19
latex installfonts.tex
%</!old>
%    \end{macrocode}
% Nachdem alle Schriften erstellt wurden, werden diese noch mit den passenden 
% Skripten in die benötigten Dateiformate gewandelt.
%    \begin{macrocode}
dir /b *.pl> files.txt
for /f "delims=. " %%i in (files.txt) do pltotf %%i.pl %%i.tfm
dir /b *.vpl> files.txt
for /f "delims=. " %%i in (files.txt) do vptovf %%i.vpl %%i.vf %%i.tfm
%    \end{macrocode}
% Danach werden die notwendigen Map-Dateien erstellt.
%    \begin{macrocode}
%<*old>
echo \input finstmsc.sty> createoldmap.tex
echo \resetstr{PSfontsuffix}{.pfb}>> createoldmap.tex
echo \adddriver{dvips}{tud.map}>> createoldmap.tex
echo \input record.tex>> createoldmap.tex
echo \donedrivers>> createoldmap.tex
echo \bye>> createoldmap.tex
latex createoldmap.tex
%</old>
%<!old>latex createmap.tex
%    \end{macrocode}
% Die erzeugten Schriftdateien werden anschließend in die Ordnerstruktur im 
% Installationspfad kopiert.
%    \begin{macrocode}
echo.
echo  =====================================================================
echo   Konvertierung abgeschlossen.
echo  =====================================================================
echo.
copy /y *.fd  "%texmfpath%\tex\latex\%localfolder%\fonts"
copy /y *.tfm "%texmfpath%\fonts\tfm\%localfolder%"
copy /y *.afm "%texmfpath%\fonts\afm\%localfolder%"
copy /y *.vf  "%texmfpath%\fonts\vf\%localfolder%"
copy /y *.pfb "%texmfpath%\fonts\type1\%localfolder%"
copy /y *.map "%texmfpath%\fonts\map\dvips\%localfolder%"
%<convert>goto :end
%</font|convert>
%    \end{macrocode}
%
% \iffalse
%<*!convert>
% \fi
%
% Abhängig von der aktiven Distribution werden jetzt die Schriften registriert.
%    \begin{macrocode}
set "texmfpath=%texmfpath:\=/%"
if %texdistrib%=="MiKTeX" goto :MiKTeXHash
:TeXLiveHash
texhash
%<*font|converted>
if "%admin%" == "true"      goto :TeXLiveSysMap
if "%updmapsys%" == "false" goto :TeXLiveUserMap
:TeXLiveSysMap
echo  =====================================================================
echo   Aufruf von 'updmap-sys'
echo  =====================================================================
%<old>updmap-sys --enable Map=tud.map --force
%<!old>updmap-sys --enable Map=tudscr.map --force
if "%updmapsys%" == "true"  goto :end
:TeXLiveUserMap
echo  =====================================================================
echo   Aufruf von 'updmap'
echo  =====================================================================
%<old>updmap --enable Map=tud.map --force
%<!old>updmap --enable Map=tudscr.map --force
%</font|converted>
goto :end
:MiKTeXHash
%<*font|converted>
set "texmfpath=%texmfpath:/=\%"
set mapcfg=%texmfpath%\miktex\config\updmap.cfg
if not exist "%mapcfg%" (
  if not exist "%texmfpath%\miktex\config" (
    mkdir "%texmfpath%\miktex\config"
  )
%<old>  echo Map tud.map> "%mapcfg%"
%<!old>  echo Map tudscr.map> "%mapcfg%"
) else (
%<*old>
  find "Map tud.map" "%mapcfg%"> nul
  if errorlevel 1 echo Map tud.map>> "%mapcfg%"
%</old>
%<*!old>
  find "Map tudscr.map" "%mapcfg%"> nul
  if errorlevel 1 echo Map tudscr.map>> "%mapcfg%"
%</!old>
)
%</font|converted>
if "%admin%" == "true" (
  if "%portable%" == "true" initexmf --admin --register-root="%texmfpath%"
  initexmf --admin --update-fndb="%texmfpath%"
%<font|converted>  initexmf --admin --mkmaps
) else (
  if "%portable%" == "true" initexmf --register-root="%texmfpath%"
  initexmf --update-fndb="%texmfpath%"
%<font|converted>  initexmf --mkmaps
)
set "texmfpath=%texmfpath:\=/%"
goto :end
%    \end{macrocode}
% Damit ist die Installation abgeschlossen. 
%
% \iffalse
%</!convert>
%</!uninstall>
%<*uninstall>
% \fi
%
% \subsubsection{Deinstallationsskript für Windows}
%
% Dieses Skript kann zum Deinstallieren lokalen Benutzerinstallation von 
% \TUDScript genutzt werden.
%
%    \begin{macrocode}
kpsewhich --var-value=TEXMFDIST> texmfpath.tmp
set /p texmfdist=< texmfpath.tmp
kpsewhich tudscrbase.sty --all> texmfpath.tmp
setlocal enabledelayedexpansion
for /f "tokens=*" %%f in (texmfpath.tmp) do (
  set "texmfpath=%%f"
  if "%%f"=="!texmfpath:%texmfdist%=!" (
    set texmfpath=!texmfpath:tudscrbase.sty=!
    echo  =====================================================================
    echo   Soll TUD-Script aus folgendem Pfad entfernt werden?
    echo   !texmfpath!
    echo  =====================================================================
    echo.
    echo   [j]a ^(ENTER^) / [n]ein:
    echo.
    set /p w=
    if /i "!w!"=="" call :uninstall "!texmfpath!"
    if /i "!w!"=="j" call :uninstall "!texmfpath!"
    echo.
  )
)
endlocal
del texmfpath.tmp> nul
texhash
goto :end
:uninstall
  pushd %cd%
  cd /d %~d1
  cd %~1
  if exist logo rmdir /s /q logo> nul
%  del *.clo> nul
  del *.cls> nul
  del *.sty> nul
  cd ..\..\..
  if exist doc\latex\tudscr rmdir /s /q doc\latex\tudscr> nul
  if exist source\latex\tudscr rmdir /s /q source\latex\tudscr> nul
  popd
  goto :eof
%    \end{macrocode}
%
% \iffalse
%</uninstall>
% \fi
%
% \subsubsection{Funktionen innerhalb der Skripte}
%
% Hier werden die für die Skripte gleichermaßen verwendeten Funktionen 
% definiert.
%
%    \begin{macrocode}
%<*!uninstall>
:checkfile
  if not exist ..\%~1 (
    set missing=true
    call :missingfile %~1
  ) else (
    echo   Datei %~1 gefunden.
  )
  goto :eof
:missingfile
  echo  =====================================================================
  echo.
  echo   Die Datei %~1 wurde nicht gefunden. Diese wird fuer die
  echo   Installation zwingend benoetigt. Bitte kopieren Sie %~1
  echo   in das Verzeichnis des Skriptes und fuehren dieses abermals aus.
  echo   Beachten Sie, dass die Schriftarchive speziell fuer die Verwendung
  echo   von LaTeX bestellt werden muessen, ein alleiniges Umbenennen
  echo   falscher Archive wird zu Fehlern bei der Installation fuehren.
  echo.
  echo  =====================================================================
  goto :eof
%    \end{macrocode}
% Es wird -- wenn möglich -- die automatische Paketinstallation von MiK\TeX{} 
% verwendet.
%    \begin{macrocode}
:checkpackage
  setlocal enabledelayedexpansion
    if %texdistrib%=="MiKTeX" (
      mpm --verify=%~2 >nul 2>nul
      if !errorlevel! neq 0 kpsewhich %~1
      set MIKTEX_KPSEWHICH_MPM_AUTOINSTALL=no
    )
    kpsewhich %~1> package.tmp
  endlocal
  set package=
%  kpsewhich %~1> package.tmp
  set /p package=< package.tmp
  if "%package%"=="" (
    set missing=true
    call :missingpackage %~1 %~2
  ) else (
    echo   Paket %~2 ^(%~1^) gefunden.
  )
  goto :eof
:missingpackage
  echo  =====================================================================
  echo.
  echo   Das LaTeX-Paket %~2 ^(%~1^) wurde nicht gefunden.
  echo   Dieses wird fuer die Schriftinstallation zwingend benoetigt.
  echo   Bitte das Paket '%~2' ueber die Distribution installieren und
  echo   danach dieses Skript abermals ausfuehren.
  echo.
  echo  =====================================================================
  goto :eof
:checkscript
  set script=
  where %~1> nul 2> nul> script.tmp
  set /p script=<script.tmp
  if "%script%"=="" (
    set missing=true
    call :missingscript %~1 %~2
  ) else (
    echo   Skript %~1 aus Paket %~2 gefunden.
  )
  goto :eof
:missingscript
  echo  =====================================================================
  echo.
  echo   Das ausfuehrbare Skript %~1 aus dem Paket %~2 wurde nicht
  echo   gefunden. Dieses wird im Normalfall von der LaTeX-Distribution
  echo   bereitgestellt und zur Schriftinstallation zwingend benoetigt.
  echo   Bitte das Paket '%~2' ueber die Distribution installieren und
  echo   danach dieses Skript abermals ausfuehren.
  echo.
  echo  =====================================================================
  goto :eof
%    \end{macrocode}
% Da das Entpacken von zip-Archiven nicht direkt mit Windows-Boardmitteln 
% möglich ist, wird dies über \textbf{VBScript} erledigt. Hierfür wird das 
% notwendige Skript beim Ausführen der Batch-Datei erstellt und aufgerufen. 
% Sollte sich im aktuellen Pfad die Standalone-Variante von \textbf{7zip} 
% befinden, wird diese verwendet. Dies war bis zur Version~v2.04 zwingend 
% notwendig.
% \changes{v2.04a}{2015/07/24}{Bugfix CScript-Aufruf mit Leerzeichen im Pfad}^^A
% \changes{v2.05}{2016/05/11}{Ausgabe der entpackten Dateien}^^A
%    \begin{macrocode}
:unzip
  echo  =====================================================================
  echo   Entpacken von %~1
  echo  =====================================================================
  if exist 7za.exe (
    7za x %~1 -o"%~2" -y
  ) else (
    if not exist tudscrtemp\winunzip.vbs (
      (
        echo With WScript
        echo   ZipFile = .Arguments^(0^)
        echo   Folder = .Arguments^(1^)
        echo End With
        echo With CreateObject^("Scripting.FileSystemObject"^)
        echo   If Not .FolderExists^(Folder^) Then
        echo     .CreateFolder^(Folder^)
        echo   End If
        echo End With
        echo With CreateObject^("Shell.Application"^)
        echo   Set objZipFile = .NameSpace^(ZipFile^).Items^(^)
        echo   For Each zFile In objZipFile
        echo     .NameSpace^(Folder^).CopyHere zFile, 272
        echo     WScript.Echo^(zFile.Name ^& " entpackt"^)
        echo   Next
        echo End With
        echo WScript.Echo^(^)
        echo WScript.Echo^("Alle Dateien entpackt"^)
        echo WScript.Echo^(^)
        echo WScript.Sleep 1000
      ) > tudscrtemp\winunzip.vbs
    )
    setlocal enabledelayedexpansion
      set zipfile=%cd%\%~1
      set "zipfile=!zipfile:\\=\!"
      set unzipfolder=%cd%\%~2
      set "unzipfolder=!unzipfolder:\\=\!"
      if not exist !unzipfolder! set unzipfolder=%~2
      CScript tudscrtemp\winunzip.vbs "!zipfile!" "!unzipfolder!"
    endlocal
  )
  goto :eof
%</!uninstall>
:nothing
  echo.
  echo   TeX Live oder MiKTeX wurden nicht gefunden.
  echo.
  echo  =====================================================================
  echo.
  goto :abort
:abort
  echo.
  echo  =====================================================================
  echo   Abbruch der Installation, temporaere Dateien werden geloescht.
  echo  =====================================================================
  echo.
  pause
  cd /d %~dp0
  if exist tudscrtemp rmdir /s /q tudscrtemp> nul
  exit /b 0
:end
%<*!convert>
  echo.
  echo  =====================================================================
%<bundle|font|converted>  echo   Die Installation wird beendet.
%<uninstall>  echo   Es wurde keine ^(weitere^) lokale Nutzerinstallation von
%<uninstall>  echo   TUD-Script gefunden. Die Deinstallation wird beendet.
  echo   Der Ordner mitsamt aller temporaeren Dateien wird geloescht.
  echo  =====================================================================
%<*!old>
  echo   Dokumentation und Beispiele fuer das TUD-Script-Bundle sind
%<bundle>  echo   unter '%texmfpath%/doc/latex/tudscr' oder
  echo   ueber den Konsolenaufruf 'texdoc tudscr' zu finden.
  echo  =====================================================================
%</!old>
  echo.
  pause
%</!convert>
  cd /d %~dp0
  if exist tudscrtemp rmdir /s /q tudscrtemp> nul
  echo.
  exit /b 0
%    \end{macrocode}
%
% \iffalse
%</win>
%<*unix>
% \fi
%
% \subsection{Bash-Skripte für Unix-Systeme}
% \subsubsection{Identifikation}
%
% Auch hier erfolgt nach einigen Kommentaren die Ausgabe der Identifikation des
% jeweiligen Skriptes.
%
%    \begin{macrocode}
#!/bin/bash
#
# Autor: Falk Hanisch, Jons-Tobias Wamhoff
#
# getestet auf:
# Ubuntu 14.04
# Ubuntu 15.04
#
# in Kombination mit:
# TeX Live 2016
#
%<*!uninstall>
# Notwendige Tools:
# unzip        (Ubuntu package unzip)
#
# Vorausgesetzte LaTeX Pakete:
# fontinst (Ubuntu package texlive-font-utils)
# lmodern  (Ubuntu package lmodern)
# cm-super (Ubuntu package cm-super)
# cmbright (Ubuntu package texlive-fonts-extra)
# hfbright (Ubuntu package texlive-fonts-extra)
# iwona    (Ubuntu package texlive-fonts-extra)
#
# Benoetigte Archive (im Verzeichnis des Installationsskriptes):
# DIN_Bd_PS.zip
# Univers_PS.zip
#
# Die Installation erfolgt in Normalfall in das lokale Benutzerverzeichnis
# $TEXMFHOME. Dieses entspricht unter Linux in '~/texmf' und unter Mac OS in
# '~/Library/texmf'. Wird das Skript mit 'sudo' ausgefuehrt, erfolgt die
# systemweite Installation fuer alle Nutzer in $TEXMFLOCAL.
#
%<*font|converted>
# Fuer die lokale Benutzerinstallation wird waehrend des Installationsprozesses
# geprueft, ob die Schriften mit dem Befehl 'updmap-sys' systemweit registriert
# werden koennen oder ob dies im Zweifelsfall mit 'updmap' fuer den aktuellen
# Benutzer lokal geschehen muss. Die erste Variante benoetigt Zugriffsrechte
# auf den Installationsordner der Distribution, welche im Zweifelsfall durch
# das Skript efragt werden. Wird die zweite Variante gewaehlt, wird der Befehl
# 'updmap-sys' wirkungslos und der Anwender muss ab sofort den Befehl 'updmap'
# nach Aenderungen an den systemweiten LaTeX-Schriften (z.B. Updates) manuell
# aufrufen, damit neue respektive aktualisierte Schriften registriert werden.
# Bei Mac OS kann dies automatisch mit "TeX Live Utility.app": "Preferences..."
# -> "Automatically enable fonts in my home directory." erfolgen.
#
%</font|converted>
%</!uninstall>
SOURCE="${BASH_SOURCE[0]}"
# if $SOURCE was a relative symlink, we need to resolve it relative to the path
# where the symlink file was located
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
echo
echo  =====================================================================
echo
echo   $DIR
echo
echo  =====================================================================
echo
%<bundle>echo   Installation TUD-Script unter Unix
%<font>echo   Installation TUD-CD-Schriften unter Unix
%<convert>echo   Konvertieren der TUD-CD-Schriften unter Unix
%<converted>echo   Installation der konvertierten TUD-CD-Schriften unter Unix
%<uninstall>echo   Deinstallation TUD-Script unter Unix
%<old>echo   fuer obsolete Klassen und Pakete
%!TUD@Version@Echo
echo
%    \end{macrocode}
%
% \subsubsection{Funktionen innerhalb der Skripte}
%
% Hier werden die für die Skripte gleichermaßen verwendeten Funktionen 
% definiert.
%
%    \begin{macrocode}
%<*!uninstall>
checkfile()
{
  if [ ! -f "$1" ] ; then
    missing=true
    missingfile "$1"
  else
    echo   Datei $1 gefunden.
  fi
}
missingfile()
{
  echo  =====================================================================
  echo
  echo   Die Datei $1 wurde nicht gefunden. Diese wird fuer die
  echo   Installation zwingend benoetigt. Bitte kopieren Sie $1
  echo   in das Verzeichnis des Skriptes und fuehren dieses abermals aus.
  echo   Beachten Sie, dass die Schriftarchive speziell fuer die Verwendung
  echo   von LaTeX bestellt werden muessen, ein alleiniges Umbenennen
  echo   falscher Archive wird zu Fehlern bei der Installation fuehren.
  echo
  echo  =====================================================================
}
checkpackage()
{
  package=$(kpsewhich $1)
  if [ -z "$package" ] ; then
    missing=true
    missingpackage "$1" "$2"
  else
    echo   Paket $2 \($1\) gefunden.
  fi
}
missingpackage()
{
  echo  =====================================================================
  echo
  echo   Das LaTeX-Paket $2 \($1\) wurde nicht gefunden.
  echo   Dieses wird fuer die Schriftinstallation zwingend benoetigt.
  echo   Bitte das Paket \'$2\' ueber die Distribution installieren und
  echo   danach dieses Skript abermals ausfuehren.
  echo
  echo  =====================================================================
}
checkscript()
{
  script=$(find $texpath -name "$1")
  if [ -z "$script" ] ; then
    missing=true
    missingscript "$1" "$2"
  else
    echo   Skript $1 aus Paket $2 gefunden.
  fi
}
missingscript()
{
  echo  =====================================================================
  echo
  echo   Das ausfuehrbare Skript $1 aus dem Paket $2 wurde nicht
  echo   gefunden. Dieses wird im Normalfall von der LaTeX-Distribution
  echo   bereitgestellt und zur Schriftinstallation zwingend benoetigt.
  echo   Bitte das Paket \'$2\' ueber die Distribution installieren und
  echo   danach dieses Skript abermals ausfuehren.
  echo
  echo  =====================================================================
}
%<*!convert>
proof_userinput()
{
  echo
  echo  =====================================================================
  echo
  echo   $texmfpath
  echo
  echo   Soll dieser Pfad genutzt werden?
  if [ ! -d $texmfpath ] ; then
    echo   Der angegebene Ordner existiert nicht, wird jedoch erstellt.
  fi
  select yn in "Ja (empfohlen)" "Nein"; do
    case $yn in
      "Ja (empfohlen)") break;;
      "Nein")
        set_texmfpath
        break;;
    esac
  done
}
set_texmfpath()
{
  echo
  echo   Geben Sie das Installationsverzeichnis an:
  read texmfpath
  proof_userinput
}
%</!convert>
mkvaldir()
{
  mkdir -p $1
  if [ $? -ne 0 ] ; then
    echo Keine Schreibberechtigung fuer folgenden Pfad:
    echo $1
    echo Versuchen Sie das Ausfuehren mit \'sudo -k bash <Skriptname>\'
    abort
  fi
}
%</!uninstall>
abort()
{
  echo
  echo  =====================================================================
  echo   Abbruch der Installation, temporaere Dateien werden geloescht.
  echo  =====================================================================
  echo
  read -n1 -r -p "Druecken Sie eine beliebige Taste . . . "
  echo
  rm -rf tudscrtemp
  exit 0
}
%    \end{macrocode}
% Nach der Defiition der Funktionen wird geprüft, ob eine \LaTeX-Distribution 
% vorhanden ist.
%    \begin{macrocode}
symlinkpath=$(which tex)
while [ -h "$symlinkpath" ]; do
  DIR="$( cd -P "$( dirname "$symlinkpath" )" && pwd )"
  symlinkpath="$(readlink "$symlinkpath")"
  [[ $symlinkpath != /* ]] && SOURCE="$texpath/$symlinkpath"
done
texpath="$( cd -P "$( dirname "$symlinkpath" )" && pwd )"
if [ -z "$texpath" ] ; then
  echo Es wurde keine LaTeX-Distribution gefunden.
  echo Moeglicherweise hilft der Aufruf des Skriptes mit:
  echo "'sudo -k env \"PATH=\$PATH\" bash $0'"
  abort
else
  PATH=$texpath:$PATH
fi
echo
echo   LaTeX-Distribution gefunden in:
echo   \'$texpath\'
echo
echo  =====================================================================
echo
%    \end{macrocode}
%
% \iffalse
%<*!uninstall>
% \fi
%
% \subsubsection{Installationsskripte für Unix-Systeme}
%
% Die Bash-Skripte werden für die Schriftinstallation sowie für eine lokale
% Installation von \TUDScript unter unixartigen Betriebssystemen angeboten.
%
% Es wird ein temporärer Ordner angelegt, der am Ende wieder gelöscht wird. 
% Danach wird auf alle benötigten Archive, Skripte und Pakete geprüft.
%
%    \begin{macrocode}
rm -rf tudscrtemp
mkvaldir tudscrtemp/converted
echo  =====================================================================
echo
echo   Notwendige Dateien und Pakete werden gesucht.
echo   Dies kann einen Moment dauern.
echo
missing=false
%    \end{macrocode}
% Für die lokale Installation von \TUDScript ist die gewünschte Versionsnummer 
% im Dateinamen des Skriptes hinterlegt. Das dazugehörige Archiv wird mit 
% dieser gesucht.
%    \begin{macrocode}
%<*bundle>
version="$(basename $0)"
version=$(echo $version|cut -c8-)
version=$(echo $version|rev|cut -c12-|rev)
checkfile "tudscr_$version.zip"
%</bundle>
%    \end{macrocode}
% Die Archive, Skripte und Pakete für die Schriftumwandlung werden gesucht.
%    \begin{macrocode}
%<converted>checkfile "tudscr_fonts_converted.zip"
%<*font|convert>
checkfile "Univers_PS.zip"
checkfile "DIN_Bd_PS.zip"
%<!old>checkfile "tudscr_fonts_install.zip"
if $missing ; then
  abort
fi
checkscript "tftopl"        "fontware"
checkscript "pltotf"        "fontware"
checkscript "vptovf"        "fontware"
checkpackage "fontinst.sty" "fontinst"
%</font|convert>
%    \end{macrocode}
% Für die Schriftfamilien im Stil von \TUDScript werden einige zusätzliche 
% Pakete benötigt.
%    \begin{macrocode}
%<*font&!old|convert|converted>>
checkpackage "type1ec.sty"  "cm-super"
checkpackage "lmodern.sty"  "lm"
checkpackage "cmbright.sty" "cmbright"
checkpackage "hfbright.map" "hfbright"
checkpackage "iwona.sty"    "iwona"
%</font&!old|convert|converted>>
%    \end{macrocode}
% Wenn auch nur eine benötigte Datei nicht vorhanden ist, wird die Installation 
% abgebrochen.
%    \begin{macrocode}
if $missing ; then
  abort
fi
echo
echo   Es wurden alle notwendigen Dateien und Pakete gefunden.
echo
echo  =====================================================================
echo  =====================================================================
echo
%    \end{macrocode}
% Als nächstes wird der Installationspfad bestimmt.
%    \begin{macrocode}
%<*!convert>
if [ "$EUID" -eq 0 ] ; then
  texmfpath=$(kpsewhich --var-value=TEXMFLOCAL)
  echo   Mehrbenutzerinstallation \(Administrator\).
else
  texmfpath=$(kpsewhich --var-value=TEXMFHOME)
  echo   Einzelbenutzerinstallation.
fi
echo
echo  =====================================================================
echo  =====================================================================
echo
%    \end{macrocode}
% Folgend wird der Installationsordner durch den Nutzer festgelegt, wobei
% dieser mit dem zuvor ermittelten und empfohlenen Pfad vorgeschlagen wird.
%    \begin{macrocode}
echo   Bitte geben Sie das gewuenschte Installationsverzeichnis an.
echo   Dieses sollte sich jenseits der Distributionsordnerstruktur
if [ "$EUID" -eq 0 ] ; then
  echo   in einem Pfad mit Lese-Zugriff fuer alle Benutzer befinden.
else
  echo   in einem lokalen Benutzerpfad befinden.
fi
echo
echo  =====================================================================
echo   Sie sollten nachfolgend den eingestellten Standardpfad verwenden.
echo   Aendern Sie diesen nur, wenn Sie genau wissen, was Sie tun.
proof_userinput
echo
echo   Installation in folgenden Pfad:
echo   $texmfpath
echo  =====================================================================
echo
%</!convert>
%<*convert>
texmfpath=$""
echo
echo  =====================================================================
echo   Erzeugen der konvertierten TUD-CD-Schriften
echo  =====================================================================
echo
%</convert>
%    \end{macrocode}
% Für die notwendige Registrierung der Schriften nach der Installtion wird 
% geprüft, ob dies für alle Nutzer mit \textbf{updmap-sys} erfolgen kann oder 
% ob die nutzerindividuelle Variante mit \textbf{updmap} notwendig ist.
%    \begin{macrocode}
%<*font|converted>
updmapsys=true
if [ -d "$(kpsewhich --var-value=TEXMFVAR)/fonts/map/" ] ; then
  updmapsys=false
%    \end{macrocode}
% Da für die systemweite Installation erweiterte Zugriffsrechte auf bestimmte 
% Installationspfade benötigt werden, wird entsprechend darauf geprüft. 
%    \begin{macrocode}
else
%    \end{macrocode}
% Dafür wird als erstes ein Array mit den notwendigen Pfaden erstellt. Mit der 
% Funktion |looptexdirarray| wird dieses Feld durchlaufen und für den Fall, 
% dass der aktuelle Pfad nicht beschreibbar ist, der nachfolgend angegebene
% Befehl ausgeführt.
%    \begin{macrocode}
  texdirarray=(
    $(kpsewhich --var-value=TEXMFSYSVAR)
    $(kpsewhich --var-value=TEXMFSYSCONFIG)
    $(kpsewhich --var-value=TEXMFHOME)
  )
  looptexdirarray()
  {
    for d in "${texdirarray[@]}"; do
      if [ -d "$d" ] && [ ! -w "$d" ] ; then
        if [ "$1" == "use" ] ; then
          eval ${@:2} $d;
        else
          eval $@;
        fi
      fi
    done
  }
  texdirpermitted=false
  looptexdirarray texdirpermitted=true
%    \end{macrocode}
% Sollte der nutzer auf einen der Ordner keine Schreibrechte besitzen, werden 
% diese entweder gesetzt oder die Schriften werden nur für den aktuellen Nutzer 
% installiert.
%    \begin{macrocode}
  if $texdirpermitted ; then
    echo Fuer das systemweite Registrieren der Schriften ist das Ausfuehren
    echo von \'updmap-sys\' erforderlich. Dazu muessen fuer die nachfolgend
    echo aufgelisteten Ordner fuer alle anderen Benutzer \(\'other\'\) mit
    echo \'sudo chmod -R o+w\' Schreibrechte gesetzt werden. Dieses Vorgehen
    echo wird empfohlen.
    echo
    looptexdirarray use echo
    echo
    echo Andernfalls wird lediglich \'updmap\' aufgerufen, wodurch der Befehl
    echo \'updmap-sys\' ab diesem Zeitpunkt wirkungslos wird und der Anwender
    echo ab sofort nach Aenderungen an den LaTeX-Schriften \(z.B. Updates\)
    echo den Befehl \'updmap\' manuell aufrufen muss, damit neue respektive
    echo aktualisierte Schriften registriert werden.
    select yn in "Schreibrechte setzen (empfohlen)" "'updmap' verwenden"; do
      case $yn in
        "Schreibrechte setzen (empfohlen)")
          looptexdirarray use sudo chmod -R o+w
          sudo -k
          texdirpermitted=false
          looptexdirarray texdirpermitted=true
          if $texdirpermitted ; then
            echo
            echo Setzen der Schreibrechte gescheitert!
            abort
          fi
          break;;
        "'updmap' verwenden")
          updmapsys=false
          break;;
      esac
    done
  fi
fi
%</font|converted>
%    \end{macrocode}
% Die benötigten Verzeichnisse für die konvertierten Schriften werden erzeugt.
%    \begin{macrocode}
%<*font|convert>
%<old>localfolder=tud
%<!old>localfolder=tudscr
mkvaldir $texmfpath/tex/latex/$localfolder/fonts
mkvaldir $texmfpath/fonts/tfm/$localfolder
mkvaldir $texmfpath/fonts/afm/$localfolder
mkvaldir $texmfpath/fonts/vf/$localfolder
mkvaldir $texmfpath/fonts/type1/$localfolder
mkvaldir $texmfpath/fonts/map/dvips/$localfolder
%</font|convert>
%    \end{macrocode}
% Für Komplettinstallationen wird das \TUDScript-Bundle in den eingestellten 
% Pfad entpackt.
%    \begin{macrocode}
%<bundle>unzip -o tudscr_$version.zip -d $texmfpath
%<converted>unzip -o tudscr_fonts_converted.zip -d $texmfpath
%    \end{macrocode}
% Anschließend werden die Type1-Schriften für die Konvertierung in den 
% temporären Ordner extrahiert.
%    \begin{macrocode}
%<*font|convert>
unzip Univers_PS.zip -d tudscrtemp
unzip DIN_Bd_PS.zip -d tudscrtemp
%<!old>unzip tudscr_fonts_install.zip -d tudscrtemp/converted
cd tudscrtemp
%    \end{macrocode}
% Dies ist die Konvertierungsroutine für die alten Schriftfamilien.
%    \begin{macrocode}
%<*old>
cp uvcel___.pfb converted/aunl8a.pfb
cp uvcel___.afm converted/aunl8a.afm
cp uvxlo___.pfb converted/aunlo8a.pfb
cp uvxlo___.afm converted/aunlo8a.afm
cp uvce____.pfb converted/aunr8a.pfb
cp uvce____.afm converted/aunr8a.afm
cp uvceo___.pfb converted/aunro8a.pfb
cp uvceo___.afm converted/aunro8a.afm
cp uvceb___.pfb converted/aunb8a.pfb
cp uvceb___.afm converted/aunb8a.afm
cp uvxbo___.pfb converted/aunbo8a.pfb
cp uvxbo___.afm converted/aunbo8a.afm
cp uvcz____.pfb converted/aubr8a.pfb
cp uvcz____.afm converted/aubr8a.afm
cp uvczo___.pfb converted/aubro8a.pfb
cp uvczo___.afm converted/aubro8a.afm
cp DINBd___.pfb converted/dinb8a.pfb
cp DINBd___.afm converted/dinb8a.afm
cd converted
echo "\input fontinst.sty"> installoldfonts.tex
echo "\needsfontinstversion{1.933}">> installoldfonts.tex
echo "\recordtransforms{record.tex}">> installoldfonts.tex
echo "\latinfamily{aun}{}">> installoldfonts.tex
echo "\latinfamily{aub}{}">> installoldfonts.tex
echo "\latinfamily{din}{}">> installoldfonts.tex
echo "\endrecordtransforms">> installoldfonts.tex
echo "\bye">> installoldfonts.tex
latex installoldfonts.tex
%</old>
%    \end{macrocode}
% Die neuen \TUDScript-Schriftfamilien ergänzen die fehlenden Glyphen durch~-- 
% einigermaßen passende~-- aus freien \LaTeX-Schriften.
%    \begin{macrocode}
%<*!old>
cp uvcel___.pfb converted/lunl8a.pfb
cp uvcel___.afm converted/lunl8a.afm
cp uvxlo___.pfb converted/lunlo8a.pfb
cp uvxlo___.afm converted/lunlo8a.afm
cp uvce____.pfb converted/lunr8a.pfb
cp uvce____.afm converted/lunr8a.afm
cp uvceo___.pfb converted/lunro8a.pfb
cp uvceo___.afm converted/lunro8a.afm
cp uvceb___.pfb converted/lunb8a.pfb
cp uvceb___.afm converted/lunb8a.afm
cp uvxbo___.pfb converted/lunbo8a.pfb
cp uvxbo___.afm converted/lunbo8a.afm
cp uvcz____.pfb converted/lunc8a.pfb
cp uvcz____.afm converted/lunc8a.afm
cp uvczo___.pfb converted/lunco8a.pfb
cp uvczo___.afm converted/lunco8a.afm
cp DINBd___.pfb converted/0m6b8a.pfb
cp DINBd___.afm converted/0m6b8a.afm
echo
echo  =====================================================================
echo   Virtuelle Schriften erzeugen. \(Dies kann einen Moment dauern\)
echo  =====================================================================
echo
cd converted
echo 00/19
tftopl cmbr10.tfm cmbr10.pl
echo 01/19
tftopl cmbrsl10.tfm cmbrsl10.pl
echo 02/19
tftopl cmbrbx10.tfm cmbrbx10.pl
echo 03/19
tftopl tbmr10.tfm tbmr10.pl
echo 04/19
tftopl tbmo10.tfm tbmo10.pl
echo 05/19
tftopl tbsr10.tfm tbsr10.pl
echo 06/19
tftopl tbso10.tfm tbso10.pl
echo 07/19
tftopl tbbx10.tfm tbbx10.pl
echo 08/19
tftopl cmbrmi10.tfm cmbrmi10.pl
echo 09/19
tftopl cmbrmb10.tfm cmbrmb10.pl
echo 10/19
tftopl cmbrsy10.tfm cmbrsy10.pl
echo 11/19
tftopl sy-iwonamz.tfm sy-iwonamz.pl
echo 12/19
tftopl sy-iwonahz.tfm sy-iwonahz.pl
echo 13/19
tftopl rm-iwonach.tfm rm-iwonach.pl
echo 14/19
tftopl rm-iwonachi.tfm rm-iwonachi.pl
echo 15/19
tftopl ts1-iwonach.tfm ts1-iwonach.pl
echo 16/19
tftopl ts1-iwonachi.tfm ts1-iwonachi.pl
echo 17/19
tftopl mi-iwonachi.tfm mi-iwonachi.pl
echo 18/19
tftopl sy-iwonachz.tfm sy-iwonachz.pl
echo 19/19
latex installfonts.tex
%</!old>
%    \end{macrocode}
% Nachdem alle Schriften erstellt wurden, werden diese noch mit den passenden 
% Skripten in die benötigten Dateiformate gewandelt.
%    \begin{macrocode}
for f in $(ls *.pl) ; do
  pltotf $f
done
for f in $(ls *.vpl) ; do
  vptovf $f
done
%    \end{macrocode}
% Danach werden die notwendigen Map-Dateien erstellt.
%    \begin{macrocode}
%<*old>
echo "\input finstmsc.sty"> createoldmap.tex
echo "\resetstr{PSfontsuffix}{.pfb}">> createoldmap.tex
echo "\adddriver{dvips}{tud.map}">> createoldmap.tex
echo "\input record.tex">> createoldmap.tex
echo "\donedrivers">> createoldmap.tex
echo "\bye">> createoldmap.tex
latex createoldmap.tex
%</old>
%<!old>latex createmap.tex
%    \end{macrocode}
% Die erzeugten Schriftdateien werden anschließend in die Ordnerstruktur im 
% Installationspfad kopiert.
%    \begin{macrocode}
echo
echo  =====================================================================
echo   Konvertierung abgeschlossen.
echo  =====================================================================
echo
cp -f *.fd  $texmfpath/tex/latex/$localfolder/fonts
cp -f *.tfm $texmfpath/fonts/tfm/$localfolder
cp -f *.afm $texmfpath/fonts/afm/$localfolder
cp -f *.vf  $texmfpath/fonts/vf/$localfolder
cp -f *.pfb $texmfpath/fonts/type1/$localfolder
cp -f *.map $texmfpath/fonts/map/dvips/$localfolder
%</font|convert>
%    \end{macrocode}
% Nun werden die Schriften registriert.
%    \begin{macrocode}
%<*!convert>
texhash
%<*font|converted>
if $updmapsys || [ "$EUID" -eq 0 ] ; then
  echo  =====================================================================
  echo   Aufruf von \'updmap-sys\'
  echo  =====================================================================
%<old>  updmap-sys --enable Map=tud.map --force
%<!old>  updmap-sys --enable Map=tudscr.map --force
fi
if ! $updmapsys ; then
  echo  =====================================================================
  echo   Aufruf von \'updmap\'
  echo  =====================================================================
%<old>  updmap --enable Map=tud.map --force
%<!old>  updmap --enable Map=tudscr.map --force
fi
%</font|converted>
%    \end{macrocode}
% Damit ist die Installation abgeschlossen. 
%    \begin{macrocode}
echo
echo  =====================================================================
%<bundle|font|converted>echo   Die Installation wird beendet.
echo   Der Ordner mitsamt aller temporaeren Dateien wird geloescht.
echo  =====================================================================
%<*!old>
echo   Dokumentation und Beispiele fuer das TUD-Script-Bundle sind
%<bundle>echo   unter $texmfpath/doc/latex/tudscr oder
echo   ueber den Terminalaufruf \'texdoc tudscr\' zu finden.
echo  =====================================================================
%</!old>
%</!convert>
cd ../..
read -n1 -r -p "Druecken Sie eine beliebige Taste . . . "
echo
rm -rf tudscrtemp
exit 0
%    \end{macrocode}
%
% \iffalse
%</!uninstall>
%<*uninstall>
% \fi
%
% \subsubsection{Deinstallationsskript für Unix-Systeme}
%
% Dieses Skript kann zum Deinstallieren lokalen Benutzerinstallation von 
% \TUDScript genutzt werden.
%
%    \begin{macrocode}
uninstall()
{
  cd $1
  if [ -d logo ] ; then
    rm -rf logo
  fi
%  rm -f *.clo
  rm -f *.cls
  rm -f *.sty
  cd ../../..
  if [ -d doc/latex/tudscr ] ; then
    rm -rf doc/latex/tudscr
  fi
  if [ -d source/latex/tudscr ] ; then
    rm -rf source/latex/tudscr
  fi
}
texmfdist=$(kpsewhich --var-value=TEXMFDIST)
texmfpath=$(kpsewhich tudscrbase.sty --all)
while read -r line; do
  if [[ $line != *"$texmfdist"* ]] ; then
    texmftemp=$(echo $line|rev|cut -c15-|rev)
    echo  =====================================================================
    echo   Soll TUD-Script aus folgendem Pfad entfernt werden?
    echo   $texmftemp
    echo  =====================================================================
    echo
    select yn in "Ja" "Nein"; do
      case $yn in
        Ja ) uninstall $texmftemp; break;;
        Nein )  break;;
      esac
    done <&4;
    echo
  fi
done 4<&0 <<< "$texmfpath"
texhash
echo
echo  =====================================================================
echo   Es wurde keine \(weitere\) lokale Nutzerinstallation von
echo   TUD-Script gefunden. Die Deinstallation wird beendet.
echo  =====================================================================
echo
exit 0
%    \end{macrocode}
%
% \iffalse
%</uninstall>
%</unix>
% \fi
%
% \endgroup
%
% \Finale
%
\endinput
